<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Posts tagged ‘haskell’ on abhinavsarkar.net</title>
    <link href="https://abhinavsarkar.net/tags/haskell/feed.atom" rel="self" />
    <link href="https://abhinavsarkar.net" />
    <id>https://abhinavsarkar.net/tags/haskell/feed.atom</id>
    <author>
        <name>Abhinav Sarkar</name>
        <email>abhinav@abhinavsarkar.net</email>
        <uri>https://abhinavsarkar.net/about/</uri>
    </author>
    <updated>2020-03-18T00:00:00Z</updated>
    <icon>https://abhinavsarkar.net/images/favicon.ico</icon>
    <rights>© 2017-2019, Abhinav Sarkar</rights>
    <entry>
    <title>Notes for 'Thinking with Types: Type-level Programming in Haskell', Chapter 1–5</title>
    <link rel="alternate" href="https://abhinavsarkar.net/posts/twt-notes-1/" />
    <id>https://abhinavsarkar.net/posts/twt-notes-1/</id>
    <published>2020-03-18T00:00:00Z</published>
    <updated>2020-03-18T00:00:00Z</updated>
    
    <author>
        <name>Abhinav Sarkar</name>
        <email>abhinav@abhinavsarkar.net</email>
        <uri>https://abhinavsarkar.net/about/</uri>
    </author>
    
    
    <category term="haskell" />
    
    <category term="notes" />
    
    <category term="programming" />
    
    <summary type="html"><![CDATA[<p><a href="https://www.haskell.org" target="_blank" rel="noopener">Haskell</a> — with its powerful type system — has a great support for type-level programming and it has gotten much better in the recent times with the new releases of the <a href="https://www.haskell.org/ghc/" target="_blank" rel="noopener">GHC</a> compiler. But type-level programming remains a daunting topic even with seasoned haskellers. <a href="https://thinkingwithtypes.com/" target="_blank" rel="noopener"><em>Thinking with Types: Type-level Programming in Haskell</em></a> by <a href="https://sandymaguire.me/about/" target="_blank" rel="noopener">Sandy Maguire</a> is a book which attempts to fix that. I’ve taken some notes to summarize my understanding of the same.</p>
<!--more-->
<nav id="toc"><h3>Contents</h3><ol><li><a href="#introduction">Introduction</a></li><li><a href="#chapter-1.-the-algebra-behind-types">Chapter 1. The Algebra Behind Types</a><ol><li><a href="#isomorphisms-and-cardinalities">Isomorphisms and Cardinalities</a></li><li><a href="#sum-product-and-exponential-types">Sum, Product and Exponential Types</a></li><li><a href="#the-curry-howard-isomorphism">The Curry-Howard Isomorphism</a></li><li><a href="#canonical-representations">Canonical Representations</a></li></ol></li><li><a href="#chapter-2.-terms-types-and-kinds">Chapter 2. Terms, Types and Kinds</a><ol><li><a href="#the-kind-system">The Kind System</a></li><li><a href="#data-kinds">Data Kinds</a></li><li><a href="#promotion-of-built-in-types">Promotion of Built-In Types</a></li><li><a href="#type-level-functions">Type-level Functions</a></li></ol></li><li><a href="#chapter-3.-variance">Chapter 3. Variance</a></li><li><a href="#chapter-4.-working-with-types">Chapter 4. Working with Types</a></li><li><a href="#chapter-5.-constraints-and-gadts">Chapter 5. Constraints and GADTs</a><ol><li><a href="#constraints">Constraints</a></li><li><a href="#gadts">GADTs</a></li><li><a href="#heterogeneous-lists">Heterogeneous Lists</a></li><li><a href="#creating-new-constraints">Creating New Constraints</a></li></ol></li></ol></nav>
<h2 id="introduction" data-track-content data-content-name="introduction" data-content-piece="twt-notes-1">Introduction<a href="#introduction" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<ul>
<li>Type-level Programming (TLP) is writing programs that run at compile-time, unlike term-level programming which is writing programs that run at run-time.</li>
<li>TLP should be used in moderation.</li>
<li>TLP should be mostly used
<ul>
<li>for programs that are catastrophic to get wrong (finance, healthcare, etc).</li>
<li>when it simplifies the program API massively.</li>
<li>when power-to-weight ratio of adding TLP is high.</li>
</ul></li>
<li>Types are not a silver bullet for fixing all errors:
<ul>
<li>Correct programs can be not well-typed.</li>
<li>It could be hard to assign type for useful programs. e.g. <code>printf</code> from C.</li>
</ul></li>
<li>Types can turn possible runtime errors into compile-time errors.</li>
</ul>
<h2 id="chapter-1.-the-algebra-behind-types" data-track-content data-content-name="chapter-1.-the-algebra-behind-types" data-content-piece="twt-notes-1">Chapter 1. The Algebra Behind Types<a href="#chapter-1.-the-algebra-behind-types" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<h3 id="isomorphisms-and-cardinalities">Isomorphisms and Cardinalities<a href="#isomorphisms-and-cardinalities" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<ul>
<li><em>Cardinality</em> of a type is the number of values it can have ignoring bottoms. The values of a type are also called the <em>inhabitants</em> of the type.</li>
</ul>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">data</span> <span class="dt">Void</span></span>
<span id="cb1-2"><a href="#cb1-2"></a> <span class="co">-- no possible values. cardinality: 0</span></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">data</span> <span class="dt">Unit</span> <span class="ot">=</span> <span class="dt">Unit</span></span>
<span id="cb1-4"><a href="#cb1-4"></a> <span class="co">-- only one possible value. cardinality: 1</span></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="kw">data</span> <span class="dt">Bool</span> <span class="ot">=</span> <span class="dt">True</span> <span class="op">|</span> <span class="dt">False</span></span>
<span id="cb1-6"><a href="#cb1-6"></a> <span class="co">-- only two possible values. cardinality: 2</span></span></code></pre></div>
<ul>
<li>Cardinality is written using notation: <code>|Void| = 0</code></li>
<li>Two types are said to be <em>Isomorphic</em> if they have same cardinality.</li>
<li>An <em>isomorphism</em> between types <code>a</code> and <code>b</code> is a pair of functions <code>to</code> and <code>from</code> such that:</li>
</ul>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="ot">to ::</span> a <span class="ot">-&gt;</span> b</span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="ot">from ::</span> b <span class="ot">-&gt;</span> a</span>
<span id="cb2-3"><a href="#cb2-3"></a>to <span class="op">.</span> from <span class="ot">=</span> <span class="fu">id</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>from <span class="op">.</span> to <span class="ot">=</span> <span class="fu">id</span></span></code></pre></div>
<h3 id="sum-product-and-exponential-types">Sum, Product and Exponential Types<a href="#sum-product-and-exponential-types" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<ul>
<li><code>Either a b</code> is a <em>Sum</em> type. Its number of inhabitants is sum of the number of inhabitants of type <code>a</code> and <code>b</code> like so: <code>|a|</code> possible values with <code>Left</code> constructor and <code>|b|</code> possible values with the <code>Right</code> constructor. Formally:</li>
</ul>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="op">|</span><span class="dt">Either</span> a b<span class="op">|</span> <span class="ot">=</span> <span class="op">|</span>a<span class="op">|</span> <span class="op">+</span> <span class="op">|</span>b<span class="op">|</span></span></code></pre></div>
<ul>
<li><code>(a, b)</code> is a <em>Product</em> type. Its number of inhabitant is the product of the number of inhabitants of types <code>a</code> and <code>b</code>. Formally:</li>
</ul>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="op">|</span>(a, b)<span class="op">|</span> <span class="ot">=</span> <span class="op">|</span>a<span class="op">|</span> <span class="op">*</span> <span class="op">|</span>b<span class="op">|</span></span></code></pre></div>
<ul>
<li>Some more examples:</li>
</ul>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="op">|</span><span class="dt">Maybe</span> a<span class="op">|</span> <span class="ot">=</span> <span class="op">|</span><span class="dt">Nothing</span><span class="op">|</span> <span class="op">+</span> <span class="op">|</span><span class="dt">Just</span> a<span class="op">|</span> <span class="ot">=</span> <span class="dv">1</span> <span class="op">+</span> <span class="op">|</span>a<span class="op">|</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="op">|</span>[a]<span class="op">|</span> <span class="ot">=</span> <span class="dv">1</span> <span class="op">+</span> <span class="op">|</span>a<span class="op">|</span> <span class="op">+</span> <span class="op">|</span>a<span class="op">|^</span><span class="dv">2</span> <span class="op">+</span> <span class="op">|</span>a<span class="op">|^</span><span class="dv">3</span> <span class="op">+</span> <span class="op">...</span></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="op">|</span><span class="dt">Either</span> a <span class="dt">Void</span><span class="op">|</span> <span class="ot">=</span> <span class="op">|</span>a<span class="op">|</span> <span class="op">+</span> <span class="dv">0</span> <span class="ot">=</span> <span class="op">|</span>a<span class="op">|</span></span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="op">|</span><span class="dt">Either</span> <span class="dt">Void</span> a<span class="op">|</span> <span class="ot">=</span> <span class="dv">0</span> <span class="op">+</span> <span class="op">|</span>a<span class="op">|</span> <span class="ot">=</span> <span class="op">|</span>a<span class="op">|</span></span>
<span id="cb5-5"><a href="#cb5-5"></a><span class="op">|</span>(a, <span class="dt">Unit</span>)<span class="op">|</span> <span class="ot">=</span> <span class="op">|</span>a<span class="op">|</span> <span class="op">*</span> <span class="dv">1</span> <span class="ot">=</span> <span class="op">|</span>a<span class="op">|</span></span>
<span id="cb5-6"><a href="#cb5-6"></a><span class="op">|</span>(<span class="dt">Unit</span>, a)<span class="op">|</span> <span class="ot">=</span> <span class="dv">1</span> <span class="op">*</span> <span class="op">|</span>a<span class="op">|</span> <span class="ot">=</span> <span class="op">|</span>a<span class="op">|</span></span></code></pre></div>
<ul>
<li>Function types are exponentiation types.</li>
</ul>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="op">|</span>a <span class="ot">-&gt;</span> b<span class="op">|</span> <span class="ot">=</span> <span class="op">|</span>b<span class="op">|^|</span>a<span class="op">|</span></span></code></pre></div>
<p>For every value in domain <code>a</code> there can be <code>|b|</code> possible values in the range <code>b</code>. And there are <code>|a|</code> possible values in domain <code>a</code>. So:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1"></a><span class="op">|</span>a <span class="ot">-&gt;</span> b<span class="op">|</span></span>
<span id="cb7-2"><a href="#cb7-2"></a>  <span class="ot">=</span> <span class="op">|</span>b<span class="op">|</span> <span class="op">*</span> <span class="op">|</span>b<span class="op">|</span> <span class="op">*</span> <span class="op">...</span> <span class="op">*</span> <span class="op">|</span>b<span class="op">|</span> <span class="co">-- (|a| times)</span></span>
<span id="cb7-3"><a href="#cb7-3"></a>  <span class="ot">=</span> <span class="op">|</span>b<span class="op">|^|</span>a<span class="op">|</span></span></code></pre></div>
<ul>
<li>Data can be represented in many possible isomorphic types. Some of them are more useful than others. Example:</li>
</ul>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">data</span> <span class="dt">TicTacToe1</span> a <span class="ot">=</span> <span class="dt">TicTacToe1</span></span>
<span id="cb8-2"><a href="#cb8-2"></a>  {<span class="ot"> topLeft      ::</span> a</span>
<span id="cb8-3"><a href="#cb8-3"></a>  ,<span class="ot"> topCenter    ::</span> a</span>
<span id="cb8-4"><a href="#cb8-4"></a>  ,<span class="ot"> topRight     ::</span> a</span>
<span id="cb8-5"><a href="#cb8-5"></a>  ,<span class="ot"> middleLeft   ::</span> a</span>
<span id="cb8-6"><a href="#cb8-6"></a>  ,<span class="ot"> middleCenter ::</span> a</span>
<span id="cb8-7"><a href="#cb8-7"></a>  ,<span class="ot"> middleRight  ::</span> a</span>
<span id="cb8-8"><a href="#cb8-8"></a>  ,<span class="ot"> bottomLeft   ::</span> a</span>
<span id="cb8-9"><a href="#cb8-9"></a>  ,<span class="ot"> bottomCenter ::</span> a</span>
<span id="cb8-10"><a href="#cb8-10"></a>  ,<span class="ot"> bottomRight  ::</span> a</span>
<span id="cb8-11"><a href="#cb8-11"></a>  }</span>
<span id="cb8-12"><a href="#cb8-12"></a></span>
<span id="cb8-13"><a href="#cb8-13"></a><span class="op">|</span><span class="dt">TicTacToe1</span> a<span class="op">|</span></span>
<span id="cb8-14"><a href="#cb8-14"></a>  <span class="ot">=</span> <span class="op">|</span>a<span class="op">|</span> <span class="op">*</span> <span class="op">|</span>a<span class="op">|</span> <span class="op">*</span> <span class="op">...</span> <span class="op">*</span> <span class="op">|</span>a<span class="op">|</span> <span class="co">-- 9 times</span></span>
<span id="cb8-15"><a href="#cb8-15"></a>  <span class="ot">=</span> <span class="op">|</span>a<span class="op">|^</span><span class="dv">9</span></span>
<span id="cb8-16"><a href="#cb8-16"></a></span>
<span id="cb8-17"><a href="#cb8-17"></a><span class="ot">emptyBoard1 ::</span> <span class="dt">TicTacToe1</span> (<span class="dt">Maybe</span> <span class="dt">Bool</span>)</span>
<span id="cb8-18"><a href="#cb8-18"></a>emptyBoard1 <span class="ot">=</span></span>
<span id="cb8-19"><a href="#cb8-19"></a>  <span class="dt">TicTacToe1</span> <span class="dt">Nothing</span> <span class="dt">Nothing</span> <span class="dt">Nothing</span></span>
<span id="cb8-20"><a href="#cb8-20"></a>             <span class="dt">Nothing</span> <span class="dt">Nothing</span> <span class="dt">Nothing</span></span>
<span id="cb8-21"><a href="#cb8-21"></a>             <span class="dt">Nothing</span> <span class="dt">Nothing</span> <span class="dt">Nothing</span></span>
<span id="cb8-22"><a href="#cb8-22"></a></span>
<span id="cb8-23"><a href="#cb8-23"></a><span class="co">-- Alternatively</span></span>
<span id="cb8-24"><a href="#cb8-24"></a></span>
<span id="cb8-25"><a href="#cb8-25"></a><span class="kw">data</span> <span class="dt">Three</span> <span class="ot">=</span> <span class="dt">One</span> <span class="op">|</span> <span class="dt">Two</span> <span class="op">|</span> <span class="dt">Three</span></span>
<span id="cb8-26"><a href="#cb8-26"></a><span class="kw">data</span> <span class="dt">TicTacToe2</span> a <span class="ot">=</span></span>
<span id="cb8-27"><a href="#cb8-27"></a>  <span class="dt">TicTacToe2</span> (<span class="dt">Three</span> <span class="ot">-&gt;</span> <span class="dt">Three</span> <span class="ot">-&gt;</span> a)</span>
<span id="cb8-28"><a href="#cb8-28"></a></span>
<span id="cb8-29"><a href="#cb8-29"></a><span class="op">|</span><span class="dt">TicTacToe2</span> a<span class="op">|</span> <span class="ot">=</span> <span class="op">|</span>a<span class="op">|^</span>(<span class="op">|</span><span class="dt">Three</span><span class="op">|</span> <span class="op">*</span> <span class="op">|</span><span class="dt">Three</span><span class="op">|</span>)</span>
<span id="cb8-30"><a href="#cb8-30"></a>               <span class="ot">=</span> <span class="op">|</span>a<span class="op">|^</span>(<span class="dv">3</span><span class="op">*</span><span class="dv">3</span>)</span>
<span id="cb8-31"><a href="#cb8-31"></a>               <span class="ot">=</span> <span class="op">|</span>a<span class="op">|^</span><span class="dv">9</span></span>
<span id="cb8-32"><a href="#cb8-32"></a></span>
<span id="cb8-33"><a href="#cb8-33"></a><span class="ot">emptyBoard2 ::</span> <span class="dt">TicTacToe2</span> (<span class="dt">Maybe</span> <span class="dt">Bool</span>)</span>
<span id="cb8-34"><a href="#cb8-34"></a>emptyBoard2 <span class="ot">=</span></span>
<span id="cb8-35"><a href="#cb8-35"></a>  <span class="dt">TicTacToe2</span> <span class="op">$</span> <span class="fu">const</span> <span class="op">$</span> <span class="fu">const</span> <span class="dt">Nothing</span></span></code></pre></div>
<h3 id="the-curry-howard-isomorphism">The Curry-Howard Isomorphism<a href="#the-curry-howard-isomorphism" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<ul>
<li>Every logic statement can be expressed as an equivalent computer program.</li>
<li>Helps us analyze mathematical theorems through programming.</li>
</ul>
<h3 id="canonical-representations">Canonical Representations<a href="#canonical-representations" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<ul>
<li>Since multiple equivalent representations of a type are possible, the representation in form of sum of products is considered the canonical representation of the type. Example:</li>
</ul>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1"></a><span class="dt">Either</span> a (<span class="dt">Either</span> b (c, d)) <span class="co">-- canonical</span></span>
<span id="cb9-2"><a href="#cb9-2"></a></span>
<span id="cb9-3"><a href="#cb9-3"></a>(a, <span class="dt">Bool</span>) <span class="co">-- not canonical</span></span>
<span id="cb9-4"><a href="#cb9-4"></a><span class="dt">Either</span> a a</span>
<span id="cb9-5"><a href="#cb9-5"></a><span class="co">-- same cardinality as above but canonical</span></span></code></pre></div>
<h2 id="chapter-2.-terms-types-and-kinds" data-track-content data-content-name="chapter-2.-terms-types-and-kinds" data-content-piece="twt-notes-1">Chapter 2. Terms, Types and Kinds<a href="#chapter-2.-terms-types-and-kinds" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<h3 id="the-kind-system">The Kind System<a href="#the-kind-system" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<ul>
<li><em>Terms</em> are things manipulated at runtime. <em>Types</em> of terms are used by compiler to prove “things” about the terms.</li>
<li>Similarly, <em>Types</em> are things manipulated at compile-time. <em>Kinds</em> of types are used by the compiler to prove “things” about the types.</li>
<li>Kinds are “the types of the Types”.</li>
<li>Kind of things that can exist at runtime (terms) is <code>*</code>. That is, kind of <code>Int</code>, <code>String</code> etc is <code>*</code>.</li>
</ul>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1"></a><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="dt">True</span></span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="dt">True</span><span class="ot"> ::</span> <span class="dt">Bool</span></span>
<span id="cb10-3"><a href="#cb10-3"></a><span class="op">&gt;</span> <span class="op">:</span>kind <span class="dt">Bool</span></span>
<span id="cb10-4"><a href="#cb10-4"></a><span class="dt">Bool</span><span class="ot"> ::</span> <span class="op">*</span></span></code></pre></div>
<ul>
<li>There are kinds other than <code>*</code>. For example:</li>
</ul>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1"></a><span class="op">&gt;</span> <span class="op">:</span>kind <span class="dt">Show</span> <span class="dt">Int</span></span>
<span id="cb11-2"><a href="#cb11-2"></a><span class="dt">Show</span> <span class="dt">Int</span><span class="ot"> ::</span> <span class="dt">Constraint</span></span></code></pre></div>
<ul>
<li>Higher-kinded types have <code>(-&gt;)</code> in their kind signature:</li>
</ul>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1"></a><span class="op">&gt;</span> <span class="op">:</span>kind <span class="dt">Maybe</span></span>
<span id="cb12-2"><a href="#cb12-2"></a><span class="dt">Maybe</span><span class="ot"> ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span></span>
<span id="cb12-3"><a href="#cb12-3"></a><span class="op">&gt;</span> <span class="op">:</span>kind <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb12-4"><a href="#cb12-4"></a><span class="dt">Maybe</span> <span class="dt">Int</span><span class="ot"> ::</span> <span class="op">*</span></span>
<span id="cb12-5"><a href="#cb12-5"></a></span>
<span id="cb12-6"><a href="#cb12-6"></a><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="dt">Control.Monad.Trans.Maybe.MaybeT</span></span>
<span id="cb12-7"><a href="#cb12-7"></a><span class="dt">Control.Monad.Trans.Maybe.MaybeT</span></span>
<span id="cb12-8"><a href="#cb12-8"></a><span class="ot">  ::</span> m (<span class="dt">Maybe</span> a) <span class="ot">-&gt;</span> <span class="dt">Control.Monad.Trans.Maybe.MaybeT</span> m a</span>
<span id="cb12-9"><a href="#cb12-9"></a><span class="op">&gt;</span> <span class="op">:</span>kind <span class="dt">Control.Monad.Trans.Maybe.MaybeT</span></span>
<span id="cb12-10"><a href="#cb12-10"></a><span class="dt">Control.Monad.Trans.Maybe.MaybeT</span><span class="ot"> ::</span> (<span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span>) <span class="ot">-&gt;</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="op">*</span></span>
<span id="cb12-11"><a href="#cb12-11"></a><span class="op">&gt;</span> <span class="op">:</span>kind <span class="dt">Control.Monad.Trans.Maybe.MaybeT</span> <span class="dt">IO</span> <span class="dt">Int</span></span>
<span id="cb12-12"><a href="#cb12-12"></a><span class="dt">Control.Monad.Trans.Maybe.MaybeT</span> <span class="dt">IO</span> <span class="dt">Int</span><span class="ot"> ::</span> <span class="op">*</span></span></code></pre></div>
<h3 id="data-kinds">Data Kinds<a href="#data-kinds" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-DataKinds" target="_blank" rel="noopener"><code>-XDataKinds</code></a> extension lets us create new kinds.</li>
<li>It lifts data constructors into type constructors and types into kinds.</li>
</ul>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XDataKinds</span></span>
<span id="cb13-2"><a href="#cb13-2"></a><span class="op">&gt;</span> <span class="kw">data</span> <span class="dt">Allow</span> <span class="ot">=</span> <span class="dt">Yes</span> <span class="op">|</span> <span class="dt">No</span></span>
<span id="cb13-3"><a href="#cb13-3"></a><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="dt">Yes</span></span>
<span id="cb13-4"><a href="#cb13-4"></a><span class="dt">Yes</span><span class="ot"> ::</span> <span class="dt">Allow</span></span>
<span id="cb13-5"><a href="#cb13-5"></a><span class="co">-- Yes is data constructor</span></span>
<span id="cb13-6"><a href="#cb13-6"></a><span class="op">&gt;</span> <span class="op">:</span>kind <span class="dt">Allow</span> <span class="co">-- Allow is a type</span></span>
<span id="cb13-7"><a href="#cb13-7"></a><span class="dt">Allow</span><span class="ot"> ::</span> <span class="op">*</span></span>
<span id="cb13-8"><a href="#cb13-8"></a><span class="op">&gt;</span> <span class="op">:</span>kind <span class="dt">'Yes</span></span>
<span id="cb13-9"><a href="#cb13-9"></a><span class="dt">'Yes</span><span class="ot"> ::</span> <span class="dt">Allow</span></span>
<span id="cb13-10"><a href="#cb13-10"></a><span class="co">-- 'Yes is a type too. Its kind is 'Allow.</span></span></code></pre></div>
<ul>
<li>Lifted constructors and types are written with a preceding <code>'</code> (called <em>tick</em>).</li>
</ul>
<h3 id="promotion-of-built-in-types">Promotion of Built-In Types<a href="#promotion-of-built-in-types" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-DataKinds" target="_blank" rel="noopener"><code>-XDataKinds</code></a> extension promotes built-in types too.</li>
<li>Strings are promoted to the kind <code>Symbol</code>.</li>
<li>Natural numbers are promoted to the kind <code>Nat</code>.</li>
</ul>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1"></a><span class="op">&gt;</span> <span class="op">:</span>kind <span class="st">&quot;hi&quot;</span></span>
<span id="cb14-2"><a href="#cb14-2"></a><span class="st">&quot;hi&quot;</span><span class="ot"> ::</span> <span class="dt">GHC.Types.Symbol</span></span>
<span id="cb14-3"><a href="#cb14-3"></a><span class="co">-- &quot;hi&quot; is a type-level string</span></span>
<span id="cb14-4"><a href="#cb14-4"></a><span class="op">&gt;</span> <span class="op">:</span>kind <span class="dv">123</span></span>
<span id="cb14-5"><a href="#cb14-5"></a><span class="dv">123</span><span class="ot"> ::</span> <span class="dt">GHC.Types.Nat</span></span>
<span id="cb14-6"><a href="#cb14-6"></a><span class="co">-- 123 is a type-level natural number</span></span></code></pre></div>
<ul>
<li>We can do type level operations on <code>Symbol</code>s and <code>Nat</code>s.</li>
</ul>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1"></a><span class="op">&gt;</span> <span class="op">:</span>m <span class="op">+</span><span class="dt">GHC.TypeLits</span></span>
<span id="cb15-2"><a href="#cb15-2"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span>kind <span class="dt">AppendSymbol</span></span>
<span id="cb15-3"><a href="#cb15-3"></a><span class="dt">AppendSymbol</span><span class="ot"> ::</span> <span class="dt">Symbol</span> <span class="ot">-&gt;</span> <span class="dt">Symbol</span> <span class="ot">-&gt;</span> <span class="dt">Symbol</span></span>
<span id="cb15-4"><a href="#cb15-4"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span>kind<span class="op">!</span> <span class="dt">AppendSymbol</span> <span class="st">&quot;hello &quot;</span> <span class="st">&quot;there&quot;</span></span>
<span id="cb15-5"><a href="#cb15-5"></a><span class="dt">AppendSymbol</span> <span class="st">&quot;hello &quot;</span> <span class="st">&quot;there&quot;</span><span class="ot"> ::</span> <span class="dt">Symbol</span></span>
<span id="cb15-6"><a href="#cb15-6"></a><span class="ot">=</span> <span class="st">&quot;hello there&quot;</span></span>
<span id="cb15-7"><a href="#cb15-7"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XTypeOperators</span></span>
<span id="cb15-8"><a href="#cb15-8"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span>kind<span class="op">!</span> (<span class="dv">1</span> <span class="op">+</span> <span class="dv">2</span>) <span class="op">^</span> <span class="dv">7</span></span>
<span id="cb15-9"><a href="#cb15-9"></a>(<span class="dv">1</span> <span class="op">+</span> <span class="dv">2</span>) <span class="op">^</span> <span class="dv">7</span><span class="ot"> ::</span> <span class="dt">Nat</span></span>
<span id="cb15-10"><a href="#cb15-10"></a><span class="ot">=</span> <span class="dv">2187</span></span></code></pre></div>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-TypeOperators" target="_blank" rel="noopener"><code>-XTypeOperators</code></a> extension is needed for applying type-level functions with symbolic identifiers.</li>
<li>There are type-level lists and tuples:</li>
</ul>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span>kind '[ <span class="dt">'True</span> ]</span>
<span id="cb16-2"><a href="#cb16-2"></a>'[ <span class="dt">'True</span> ]<span class="ot"> ::</span> [<span class="dt">Bool</span>]</span>
<span id="cb16-3"><a href="#cb16-3"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span>kind '[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb16-4"><a href="#cb16-4"></a>'[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]<span class="ot"> ::</span> [<span class="dt">Nat</span>]</span>
<span id="cb16-5"><a href="#cb16-5"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span>kind '[<span class="st">&quot;abc&quot;</span>]</span>
<span id="cb16-6"><a href="#cb16-6"></a>'[<span class="st">&quot;abc&quot;</span>]<span class="ot"> ::</span> [<span class="dt">Symbol</span>]</span>
<span id="cb16-7"><a href="#cb16-7"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span>kind <span class="dt">'False</span> '<span class="op">:</span> <span class="dt">'True</span> '<span class="op">:</span> '[]</span>
<span id="cb16-8"><a href="#cb16-8"></a><span class="dt">'False</span> '<span class="op">:</span> <span class="dt">'True</span> '<span class="op">:</span> '[]<span class="ot"> ::</span> [<span class="dt">Bool</span>]</span>
<span id="cb16-9"><a href="#cb16-9"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span>kind '(<span class="dv">6</span>, <span class="st">&quot;x&quot;</span>, <span class="dt">'False</span>)</span>
<span id="cb16-10"><a href="#cb16-10"></a>'(<span class="dv">6</span>, <span class="st">&quot;x&quot;</span>, <span class="dt">'False</span>)<span class="ot"> ::</span> (<span class="dt">Nat</span>, <span class="dt">Symbol</span>, <span class="dt">Bool</span>)</span></code></pre></div>
<h3 id="type-level-functions">Type-level Functions<a href="#type-level-functions" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<ul>
<li>With the <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-TypeFamilies" target="_blank" rel="noopener"><code>-XTypeFamilies</code></a> extension, it’s possible to write new type-level functions as closed type families:</li>
</ul>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XDataKinds</span></span>
<span id="cb17-2"><a href="#cb17-2"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XTypeFamilies</span></span>
<span id="cb17-3"><a href="#cb17-3"></a><span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb17-4"><a href="#cb17-4"></a><span class="op">|</span> <span class="kw">type</span> <span class="kw">family</span> <span class="dt">And</span> (<span class="ot">x ::</span> <span class="dt">Bool</span>) (<span class="ot">y ::</span> <span class="dt">Bool</span>)<span class="ot"> ::</span> <span class="dt">Bool</span> <span class="kw">where</span></span>
<span id="cb17-5"><a href="#cb17-5"></a><span class="op">|</span>   <span class="dt">And</span> <span class="dt">'True</span> <span class="dt">'True</span> <span class="ot">=</span> <span class="dt">'True</span></span>
<span id="cb17-6"><a href="#cb17-6"></a><span class="op">|</span>   <span class="dt">And</span> _     _     <span class="ot">=</span> <span class="dt">'False</span></span>
<span id="cb17-7"><a href="#cb17-7"></a><span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb17-8"><a href="#cb17-8"></a><span class="op">&gt;</span> <span class="op">:</span>kind <span class="dt">And</span></span>
<span id="cb17-9"><a href="#cb17-9"></a><span class="dt">And</span><span class="ot"> ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb17-10"><a href="#cb17-10"></a><span class="op">&gt;</span> <span class="op">:</span>kind<span class="op">!</span> <span class="dt">And</span> <span class="dt">'True</span> <span class="dt">'False</span></span>
<span id="cb17-11"><a href="#cb17-11"></a><span class="dt">And</span> <span class="dt">'True</span> <span class="dt">'False</span><span class="ot"> ::</span> <span class="dt">Bool</span></span>
<span id="cb17-12"><a href="#cb17-12"></a><span class="ot">=</span> <span class="dt">'False</span></span>
<span id="cb17-13"><a href="#cb17-13"></a><span class="op">&gt;</span> <span class="op">:</span>kind<span class="op">!</span> <span class="dt">And</span> <span class="dt">'True</span> <span class="dt">'True</span></span>
<span id="cb17-14"><a href="#cb17-14"></a><span class="dt">And</span> <span class="dt">'True</span> <span class="dt">'True</span><span class="ot"> ::</span> <span class="dt">Bool</span></span>
<span id="cb17-15"><a href="#cb17-15"></a><span class="ot">=</span> <span class="dt">'True</span></span>
<span id="cb17-16"><a href="#cb17-16"></a><span class="op">&gt;</span> <span class="op">:</span>kind<span class="op">!</span> <span class="dt">And</span> <span class="dt">'False</span> <span class="dt">'True</span></span>
<span id="cb17-17"><a href="#cb17-17"></a><span class="dt">And</span> <span class="dt">'False</span> <span class="dt">'True</span><span class="ot"> ::</span> <span class="dt">Bool</span></span>
<span id="cb17-18"><a href="#cb17-18"></a><span class="ot">=</span> <span class="dt">'False</span></span></code></pre></div>
<h2 id="chapter-3.-variance" data-track-content data-content-name="chapter-3.-variance" data-content-piece="twt-notes-1">Chapter 3. Variance<a href="#chapter-3.-variance" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<ul>
<li>There are three types of <em>Variance</em> (<code>T</code> here a type of kind <code>* -&gt; *</code>):
<ul>
<li>Covariant: any function of type <code>a -&gt; b</code> can be lifted into a function of type <code>T a -&gt; T b</code>. Covariant types are instances of the <a href="https://hackage.haskell.org/package/base/docs/Prelude.html#t:Functor" target="_blank" rel="noopener"><code>Functor</code></a> typeclass:</li>
</ul>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1"></a><span class="kw">class</span> <span class="dt">Functor</span> f <span class="kw">where</span></span>
<span id="cb18-2"><a href="#cb18-2"></a><span class="ot">  fmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span></code></pre></div>
<ul>
<li>Contravariant: any function of type <code>a -&gt; b</code> can be lifted into a function of type <code>T b -&gt; T a</code>. Contravariant functions are instances of the <a href="https://hackage.haskell.org/package/base/docs/Data-Functor-Contravariant.html" target="_blank" rel="noopener"><code>Contravariant</code></a> typeclass:</li>
</ul>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1"></a><span class="kw">class</span> <span class="dt">Contravariant</span> f <span class="kw">where</span></span>
<span id="cb19-2"><a href="#cb19-2"></a><span class="ot">  contramap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f b <span class="ot">-&gt;</span> f a</span></code></pre></div>
<ul>
<li>Invariant: no function of type <code>a -&gt; b</code> can be lifted into a function of type <code>T a</code>. Invariant functions are instances of the <a href="https://hackage.haskell.org/package/invariant/docs/Data-Functor-Invariant.html#t:Invariant" target="_blank" rel="noopener"><code>Invariant</code></a> typeclass:</li>
</ul>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1"></a><span class="kw">class</span> <span class="dt">Invariant</span> f <span class="kw">where</span></span>
<span id="cb20-2"><a href="#cb20-2"></a><span class="ot">  invmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (b <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span></code></pre></div></li>
<li>Variance of a type <code>T</code> is specified with respect to a particular type parameter. A type <code>T</code> with two parameters <code>a</code> and <code>b</code> could be covariant wrt. <code>a</code> and contravariant wrt. <code>b</code>.</li>
<li>Variance of a type <code>T</code> wrt. a particular type parameter is determined by whether the parameter appears in positive or negative <em>position</em>s.
<ul>
<li>If a type parameter appears on the left-hand side of a function, it is said to be in a negative position. Else it is said to be in a positive position.</li>
<li>If a type parameter appears only in positive positions then the type is covariant wrt. that parameter.</li>
<li>If a type parameter appears only in negative positions then the type is contravariant wrt. that parameter.</li>
<li>If a type parameter appears in both positive and negative positions then the type is invariant wrt. that parameter.</li>
<li>positions follow the laws of multiplication for their <em>sign</em>s.</li>
</ul></li>
</ul>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">a</th>
<th style="text-align: left;">b</th>
<th style="text-align: left;">a * b</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">+</td>
<td style="text-align: left;">+</td>
<td style="text-align: left;">+</td>
</tr>
<tr class="even">
<td style="text-align: left;">+</td>
<td style="text-align: left;">-</td>
<td style="text-align: left;">-</td>
</tr>
<tr class="odd">
<td style="text-align: left;">-</td>
<td style="text-align: left;">+</td>
<td style="text-align: left;">-</td>
</tr>
<tr class="even">
<td style="text-align: left;">-</td>
<td style="text-align: left;">-</td>
<td style="text-align: left;">+</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>Examples:</li>
</ul>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1"></a><span class="kw">newtype</span> <span class="dt">T1</span> a <span class="ot">=</span> <span class="dt">T1</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> a)</span>
<span id="cb21-2"><a href="#cb21-2"></a><span class="co">-- a is in +ve position, T1 is covariant wrt. a.</span></span>
<span id="cb21-3"><a href="#cb21-3"></a><span class="kw">newtype</span> <span class="dt">T2</span> a <span class="ot">=</span> <span class="dt">T2</span> (a <span class="ot">-&gt;</span> <span class="dt">Int</span>)</span>
<span id="cb21-4"><a href="#cb21-4"></a><span class="co">-- a is in -ve position, T2 is contravariant wrt. a.</span></span>
<span id="cb21-5"><a href="#cb21-5"></a><span class="kw">newtype</span> <span class="dt">T3</span> a <span class="ot">=</span> <span class="dt">T3</span> (a <span class="ot">-&gt;</span> a)</span>
<span id="cb21-6"><a href="#cb21-6"></a><span class="co">-- a is in both -ve and +ve position. T3 is invariant wrt. a.</span></span>
<span id="cb21-7"><a href="#cb21-7"></a><span class="kw">newtype</span> <span class="dt">T4</span> a <span class="ot">=</span> <span class="dt">T4</span> ((<span class="dt">Int</span> <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> <span class="dt">Int</span>)</span>
<span id="cb21-8"><a href="#cb21-8"></a><span class="co">-- a is in +ve position but (Int -&gt; a) is in -ve position.</span></span>
<span id="cb21-9"><a href="#cb21-9"></a><span class="co">-- So a is in -ve position overall. T4 is contravariant wrt. a.</span></span>
<span id="cb21-10"><a href="#cb21-10"></a><span class="kw">newtype</span> <span class="dt">T5</span> a <span class="ot">=</span> <span class="dt">T5</span> ((a <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Int</span>)</span>
<span id="cb21-11"><a href="#cb21-11"></a><span class="co">-- a is in -ve position but (a -&gt; Int) is in -ve position.</span></span>
<span id="cb21-12"><a href="#cb21-12"></a><span class="co">-- So a is in +ve position overall. T5 is covariant wrt. a.</span></span></code></pre></div>
<ul>
<li>Covariant parameters are said to be <em>produced</em> or <em>owned</em> by the type.</li>
<li>Contravariant parameters are said to be <em>consumed</em> by the type.</li>
<li>A type that has two parameters and is covariant in both of them is an instance of <a href="https://hackage.haskell.org/package/base/docs/Data-Bifunctor.html#t:Bifunctor" target="_blank" rel="noopener"><code>BiFunctor</code></a>.</li>
<li>A type that has two parameters and is contravariant in first parameter and covariant in second parameter is an instance of <a href="https://hackage.haskell.org/package/profunctors/docs/Data-Profunctor.html#t:Profunctor" target="_blank" rel="noopener"><code>Profunctor</code></a>.</li>
</ul>
<h2 id="chapter-4.-working-with-types" data-track-content data-content-name="chapter-4.-working-with-types" data-content-piece="twt-notes-1">Chapter 4. Working with Types<a href="#chapter-4.-working-with-types" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<ul>
<li>Standard Haskell has no notion of scopes for types.</li>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-ScopedTypeVariables" target="_blank" rel="noopener"><code>-XScopedTypeVariables</code></a> extension lets us bind type variables to a scope. It requires an explicitly <code>forall</code> quantifier in type signatures.</li>
</ul>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1"></a><span class="co">-- This does not compile.</span></span>
<span id="cb22-2"><a href="#cb22-2"></a><span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb22-3"><a href="#cb22-3"></a><span class="op">|</span><span class="ot"> comp ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb22-4"><a href="#cb22-4"></a><span class="op">|</span> comp f g a <span class="ot">=</span> go f</span>
<span id="cb22-5"><a href="#cb22-5"></a><span class="op">|</span>  <span class="kw">where</span></span>
<span id="cb22-6"><a href="#cb22-6"></a><span class="op">|</span><span class="ot">   go ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> c</span>
<span id="cb22-7"><a href="#cb22-7"></a><span class="op">|</span>   go f' <span class="ot">=</span> g (f' a)</span>
<span id="cb22-8"><a href="#cb22-8"></a><span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb22-9"><a href="#cb22-9"></a></span>
<span id="cb22-10"><a href="#cb22-10"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">11</span><span class="op">:</span><span class="dv">11</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span></span>
<span id="cb22-11"><a href="#cb22-11"></a>    • <span class="dt">Couldn't</span> match expected <span class="kw">type</span> ‘c1’ with actual <span class="kw">type</span> ‘c’</span>
<span id="cb22-12"><a href="#cb22-12"></a>      ‘c1’ is a rigid <span class="kw">type</span> variable bound by</span>
<span id="cb22-13"><a href="#cb22-13"></a>        the <span class="kw">type</span> signature for<span class="op">:</span></span>
<span id="cb22-14"><a href="#cb22-14"></a><span class="ot">          go ::</span> <span class="kw">forall</span> a1 b1 c1<span class="op">.</span> (a1 <span class="ot">-&gt;</span> b1) <span class="ot">-&gt;</span> c1</span>
<span id="cb22-15"><a href="#cb22-15"></a>        at <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">10</span><span class="op">:</span><span class="dv">3</span><span class="op">-</span><span class="dv">21</span></span>
<span id="cb22-16"><a href="#cb22-16"></a>      ‘c’ is a rigid <span class="kw">type</span> variable bound by</span>
<span id="cb22-17"><a href="#cb22-17"></a>        the <span class="kw">type</span> signature for<span class="op">:</span></span>
<span id="cb22-18"><a href="#cb22-18"></a><span class="ot">          comp ::</span> <span class="kw">forall</span> a b c<span class="op">.</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb22-19"><a href="#cb22-19"></a>        at <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">7</span><span class="op">:</span><span class="dv">1</span><span class="op">-</span><span class="dv">38</span></span>
<span id="cb22-20"><a href="#cb22-20"></a>    • <span class="dt">In</span> the expression<span class="op">:</span> g (f' a)</span>
<span id="cb22-21"><a href="#cb22-21"></a></span>
<span id="cb22-22"><a href="#cb22-22"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">11</span><span class="op">:</span><span class="dv">14</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span></span>
<span id="cb22-23"><a href="#cb22-23"></a>    • <span class="dt">Couldn't</span> match expected <span class="kw">type</span> ‘b’ with actual <span class="kw">type</span> ‘b1’</span>
<span id="cb22-24"><a href="#cb22-24"></a>      ‘b1’ is a rigid <span class="kw">type</span> variable bound by</span>
<span id="cb22-25"><a href="#cb22-25"></a>        the <span class="kw">type</span> signature for<span class="op">:</span></span>
<span id="cb22-26"><a href="#cb22-26"></a><span class="ot">          go ::</span> <span class="kw">forall</span> a1 b1 c1<span class="op">.</span> (a1 <span class="ot">-&gt;</span> b1) <span class="ot">-&gt;</span> c1</span>
<span id="cb22-27"><a href="#cb22-27"></a>        at <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">10</span><span class="op">:</span><span class="dv">3</span><span class="op">-</span><span class="dv">21</span></span>
<span id="cb22-28"><a href="#cb22-28"></a>      ‘b’ is a rigid <span class="kw">type</span> variable bound by</span>
<span id="cb22-29"><a href="#cb22-29"></a>        the <span class="kw">type</span> signature for<span class="op">:</span></span>
<span id="cb22-30"><a href="#cb22-30"></a><span class="ot">          comp ::</span> <span class="kw">forall</span> a b c<span class="op">.</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb22-31"><a href="#cb22-31"></a>        at <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">7</span><span class="op">:</span><span class="dv">1</span><span class="op">-</span><span class="dv">38</span></span>
<span id="cb22-32"><a href="#cb22-32"></a>    • <span class="dt">In</span> the first argument <span class="kw">of</span> ‘g’, namely ‘(f' a)’</span>
<span id="cb22-33"><a href="#cb22-33"></a></span>
<span id="cb22-34"><a href="#cb22-34"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">11</span><span class="op">:</span><span class="dv">17</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span></span>
<span id="cb22-35"><a href="#cb22-35"></a>    • <span class="dt">Couldn't</span> match expected <span class="kw">type</span> ‘a1’ with actual <span class="kw">type</span> ‘a’</span>
<span id="cb22-36"><a href="#cb22-36"></a>      ‘a1’ is a rigid <span class="kw">type</span> variable bound by</span>
<span id="cb22-37"><a href="#cb22-37"></a>        the <span class="kw">type</span> signature for<span class="op">:</span></span>
<span id="cb22-38"><a href="#cb22-38"></a><span class="ot">          go ::</span> <span class="kw">forall</span> a1 b1 c1<span class="op">.</span> (a1 <span class="ot">-&gt;</span> b1) <span class="ot">-&gt;</span> c1</span>
<span id="cb22-39"><a href="#cb22-39"></a>        at <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">10</span><span class="op">:</span><span class="dv">3</span><span class="op">-</span><span class="dv">21</span></span>
<span id="cb22-40"><a href="#cb22-40"></a>      ‘a’ is a rigid <span class="kw">type</span> variable bound by</span>
<span id="cb22-41"><a href="#cb22-41"></a>        the <span class="kw">type</span> signature for<span class="op">:</span></span>
<span id="cb22-42"><a href="#cb22-42"></a><span class="ot">          comp ::</span> <span class="kw">forall</span> a b c<span class="op">.</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb22-43"><a href="#cb22-43"></a>        at <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">7</span><span class="op">:</span><span class="dv">1</span><span class="op">-</span><span class="dv">38</span></span>
<span id="cb22-44"><a href="#cb22-44"></a>    • <span class="dt">In</span> the first argument <span class="kw">of</span> ‘f'’, namely ‘a’</span>
<span id="cb22-45"><a href="#cb22-45"></a></span>
<span id="cb22-46"><a href="#cb22-46"></a><span class="co">-- But this does.</span></span>
<span id="cb22-47"><a href="#cb22-47"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XScopedTypeVariables</span></span>
<span id="cb22-48"><a href="#cb22-48"></a><span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb22-49"><a href="#cb22-49"></a><span class="op">|</span><span class="ot"> comp ::</span> <span class="kw">forall</span> a b c<span class="op">.</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb22-50"><a href="#cb22-50"></a><span class="op">|</span> comp f g a <span class="ot">=</span> go f</span>
<span id="cb22-51"><a href="#cb22-51"></a><span class="op">|</span>  <span class="kw">where</span></span>
<span id="cb22-52"><a href="#cb22-52"></a><span class="op">|</span><span class="ot">   go ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> c</span>
<span id="cb22-53"><a href="#cb22-53"></a><span class="op">|</span>   go f' <span class="ot">=</span> g (f' a)</span>
<span id="cb22-54"><a href="#cb22-54"></a><span class="op">|</span> <span class="op">:</span>}</span></code></pre></div>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-TypeApplications" target="_blank" rel="noopener"><code>-XTypeApplications</code></a> extension lets us directly apply types to expressions:</li>
</ul>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XTypeApplications</span></span>
<span id="cb23-2"><a href="#cb23-2"></a><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="fu">traverse</span></span>
<span id="cb23-3"><a href="#cb23-3"></a><span class="fu">traverse</span></span>
<span id="cb23-4"><a href="#cb23-4"></a><span class="ot">  ::</span> (<span class="dt">Traversable</span> t, <span class="dt">Applicative</span> f) <span class="ot">=&gt;</span></span>
<span id="cb23-5"><a href="#cb23-5"></a>     (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> f (t b)</span>
<span id="cb23-6"><a href="#cb23-6"></a><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="fu">traverse</span> <span class="op">@</span><span class="dt">Maybe</span></span>
<span id="cb23-7"><a href="#cb23-7"></a><span class="fu">traverse</span> <span class="op">@</span><span class="dt">Maybe</span></span>
<span id="cb23-8"><a href="#cb23-8"></a><span class="ot">  ::</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span></span>
<span id="cb23-9"><a href="#cb23-9"></a>     (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> f (<span class="dt">Maybe</span> b)</span>
<span id="cb23-10"><a href="#cb23-10"></a><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="fu">traverse</span> <span class="op">@</span><span class="dt">Maybe</span> <span class="op">@</span>[]</span>
<span id="cb23-11"><a href="#cb23-11"></a><span class="fu">traverse</span> <span class="op">@</span><span class="dt">Maybe</span> <span class="op">@</span>[]</span>
<span id="cb23-12"><a href="#cb23-12"></a><span class="ot">  ::</span> (a <span class="ot">-&gt;</span> [b]) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> [<span class="dt">Maybe</span> b]</span>
<span id="cb23-13"><a href="#cb23-13"></a><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="fu">traverse</span> <span class="op">@</span><span class="dt">Maybe</span> <span class="op">@</span>[] <span class="op">@</span><span class="dt">Int</span></span>
<span id="cb23-14"><a href="#cb23-14"></a><span class="fu">traverse</span> <span class="op">@</span><span class="dt">Maybe</span> <span class="op">@</span>[] <span class="op">@</span><span class="dt">Int</span></span>
<span id="cb23-15"><a href="#cb23-15"></a><span class="ot">  ::</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> [b]) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> [<span class="dt">Maybe</span> b]</span>
<span id="cb23-16"><a href="#cb23-16"></a><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="fu">traverse</span> <span class="op">@</span><span class="dt">Maybe</span> <span class="op">@</span>[] <span class="op">@</span><span class="dt">Int</span> <span class="op">@</span><span class="dt">String</span></span>
<span id="cb23-17"><a href="#cb23-17"></a><span class="fu">traverse</span> <span class="op">@</span><span class="dt">Maybe</span> <span class="op">@</span>[] <span class="op">@</span><span class="dt">Int</span> <span class="op">@</span><span class="dt">String</span></span>
<span id="cb23-18"><a href="#cb23-18"></a><span class="ot">  ::</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>]) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> [<span class="dt">Maybe</span> <span class="dt">String</span>]</span></code></pre></div>
<ul>
<li>Types are applied in the order they appear in the type signature. It is possible to avoid applying types by using a type with an underscore: <code>@_</code></li>
</ul>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1"></a><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="fu">traverse</span> <span class="op">@</span><span class="dt">Maybe</span> <span class="op">@</span>_ <span class="op">@</span>_ <span class="op">@</span><span class="dt">String</span></span>
<span id="cb24-2"><a href="#cb24-2"></a><span class="fu">traverse</span> <span class="op">@</span><span class="dt">Maybe</span> <span class="op">@</span>_ <span class="op">@</span>_ <span class="op">@</span><span class="dt">String</span></span>
<span id="cb24-3"><a href="#cb24-3"></a><span class="ot">  ::</span> <span class="dt">Applicative</span> w1 <span class="ot">=&gt;</span></span>
<span id="cb24-4"><a href="#cb24-4"></a>     (w2 <span class="ot">-&gt;</span> w1 <span class="dt">String</span>) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> w2 <span class="ot">-&gt;</span> w1 (<span class="dt">Maybe</span> <span class="dt">String</span>)</span></code></pre></div>
<ul>
<li>Sometimes the compiler cannot infer the type of an expression. <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-AllowAmbiguousTypes" target="_blank" rel="noopener"><code>-XAllowAmbiguousTypes</code></a> extension allow such programs to compile.</li>
</ul>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XScopedTypeVariables</span></span>
<span id="cb25-2"><a href="#cb25-2"></a><span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb25-3"><a href="#cb25-3"></a><span class="op">|</span><span class="ot"> f ::</span> <span class="kw">forall</span> a<span class="op">.</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> <span class="dt">Bool</span></span>
<span id="cb25-4"><a href="#cb25-4"></a><span class="op">|</span> f <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb25-5"><a href="#cb25-5"></a><span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb25-6"><a href="#cb25-6"></a></span>
<span id="cb25-7"><a href="#cb25-7"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">7</span><span class="op">:</span><span class="dv">6</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span></span>
<span id="cb25-8"><a href="#cb25-8"></a>    • <span class="dt">Could</span> <span class="fu">not</span> deduce (<span class="dt">Show</span> a0)</span>
<span id="cb25-9"><a href="#cb25-9"></a>      from the context<span class="op">:</span> <span class="dt">Show</span> a</span>
<span id="cb25-10"><a href="#cb25-10"></a>        bound by the <span class="kw">type</span> signature for<span class="op">:</span></span>
<span id="cb25-11"><a href="#cb25-11"></a><span class="ot">                   f ::</span> <span class="kw">forall</span> a<span class="op">.</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> <span class="dt">Bool</span></span>
<span id="cb25-12"><a href="#cb25-12"></a>        at <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">7</span><span class="op">:</span><span class="dv">6</span><span class="op">-</span><span class="dv">29</span></span>
<span id="cb25-13"><a href="#cb25-13"></a>      <span class="dt">The</span> <span class="kw">type</span> variable ‘a0’ is ambiguous</span>
<span id="cb25-14"><a href="#cb25-14"></a>    • <span class="dt">In</span> the ambiguity check for ‘f’</span>
<span id="cb25-15"><a href="#cb25-15"></a>      <span class="dt">To</span> defer the ambiguity check to use sites, enable <span class="dt">AllowAmbiguousTypes</span></span>
<span id="cb25-16"><a href="#cb25-16"></a>      <span class="dt">In</span> the <span class="kw">type</span> signature<span class="op">:</span><span class="ot"> f ::</span> <span class="kw">forall</span> a<span class="op">.</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> <span class="dt">Bool</span></span></code></pre></div>
<ul>
<li><code>Proxy</code> is a type isomorphic to <code>()</code> except with a phantom type parameter:</li>
</ul>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1"></a><span class="kw">data</span> <span class="dt">Proxy</span> a <span class="ot">=</span> <span class="dt">Proxy</span></span></code></pre></div>
<ul>
<li>With all the three extensions enabled, it is possible to get a term-level representation of types using the <a href="https://hackage.haskell.org/package/base/docs/Data-Typeable.html" target="_blank" rel="noopener"><code>Data.Typeable</code></a> module:</li>
</ul>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XScopedTypeVariables</span></span>
<span id="cb27-2"><a href="#cb27-2"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XTypeApplications</span></span>
<span id="cb27-3"><a href="#cb27-3"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XAllowAmbiguousTypes</span></span>
<span id="cb27-4"><a href="#cb27-4"></a><span class="op">&gt;</span> <span class="op">:</span>m <span class="op">+</span><span class="dt">Data.Typeable</span></span>
<span id="cb27-5"><a href="#cb27-5"></a><span class="dt">Data.Typeable</span><span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb27-6"><a href="#cb27-6"></a><span class="dt">Data.Typeable</span><span class="op">|</span><span class="ot"> typeName ::</span> <span class="kw">forall</span> a<span class="op">.</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">String</span></span>
<span id="cb27-7"><a href="#cb27-7"></a><span class="dt">Data.Typeable</span><span class="op">|</span> typeName <span class="ot">=</span> <span class="fu">show</span> <span class="op">.</span> typeRep <span class="op">$</span> <span class="dt">Proxy</span> <span class="op">@</span>a</span>
<span id="cb27-8"><a href="#cb27-8"></a><span class="dt">Data.Typeable</span><span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb27-9"><a href="#cb27-9"></a><span class="dt">Data.Typeable</span><span class="op">&gt;</span> typeName <span class="op">@</span><span class="dt">String</span></span>
<span id="cb27-10"><a href="#cb27-10"></a><span class="st">&quot;[Char]&quot;</span></span>
<span id="cb27-11"><a href="#cb27-11"></a><span class="dt">Data.Typeable</span><span class="op">&gt;</span> typeName <span class="op">@</span>(<span class="dt">IO</span> <span class="dt">Int</span>)</span>
<span id="cb27-12"><a href="#cb27-12"></a><span class="st">&quot;IO Int&quot;</span></span></code></pre></div>
<h2 id="chapter-5.-constraints-and-gadts" data-track-content data-content-name="chapter-5.-constraints-and-gadts" data-content-piece="twt-notes-1">Chapter 5. Constraints and GADTs<a href="#chapter-5.-constraints-and-gadts" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<h3 id="constraints">Constraints<a href="#constraints" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<ul>
<li><em>Constraints</em> are a kind different than the types (<code>*</code>).</li>
<li>Constraints are what appear on the left-hand side on the fat context arrow <code>=&gt;</code>, like <code>Show a</code>.</li>
</ul>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1"></a><span class="op">&gt;</span> <span class="op">:</span>k <span class="dt">Show</span></span>
<span id="cb28-2"><a href="#cb28-2"></a><span class="dt">Show</span><span class="ot"> ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span></span>
<span id="cb28-3"><a href="#cb28-3"></a><span class="op">&gt;</span> <span class="op">:</span>k <span class="dt">Show</span> <span class="dt">Int</span></span>
<span id="cb28-4"><a href="#cb28-4"></a><span class="dt">Show</span> <span class="dt">Int</span><span class="ot"> ::</span> <span class="dt">Constraint</span></span>
<span id="cb28-5"><a href="#cb28-5"></a><span class="op">&gt;</span> <span class="op">:</span>k (<span class="dt">Show</span> <span class="dt">Int</span>, <span class="dt">Eq</span> <span class="dt">String</span>)</span>
<span id="cb28-6"><a href="#cb28-6"></a>(<span class="dt">Show</span> <span class="dt">Int</span>, <span class="dt">Eq</span> <span class="dt">String</span>)<span class="ot"> ::</span> <span class="dt">Constraint</span></span></code></pre></div>
<ul>
<li>Type equalities <code>(Int ~ a)</code> are another way of creating Constraints. <code>(Int ~ a)</code> says <code>a</code> is same as <code>Int</code>.</li>
<li>Type equalities are
<ul>
<li>reflexive: <code>a ~ a</code> always</li>
<li>symmetrical: <code>a ~ b</code> implies <code>b ~ a</code></li>
<li>transitive: <code>a ~ b</code> and <code>b ~ c</code> implies <code>a ~ c</code></li>
</ul></li>
</ul>
<h3 id="gadts">GADTs<a href="#gadts" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<ul>
<li><em>GADTs</em> are Generalized Algebraic DataTypes. They allow writing explicit type signatures for data constructors. Here is the code for a length-typed list using GADTs:</li>
</ul>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XGADTs</span></span>
<span id="cb29-2"><a href="#cb29-2"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XKindSignatures</span></span>
<span id="cb29-3"><a href="#cb29-3"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XTypeOperators</span></span>
<span id="cb29-4"><a href="#cb29-4"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XDataKinds</span></span>
<span id="cb29-5"><a href="#cb29-5"></a><span class="op">&gt;</span> <span class="op">:</span>m <span class="op">+</span><span class="dt">GHC.TypeLits</span></span>
<span id="cb29-6"><a href="#cb29-6"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb29-7"><a href="#cb29-7"></a><span class="dt">GHC.TypeLits</span><span class="op">|</span> <span class="kw">data</span> <span class="dt">List</span> (<span class="ot">a ::</span> <span class="op">*</span>) (<span class="ot">n ::</span> <span class="dt">Nat</span>) <span class="kw">where</span></span>
<span id="cb29-8"><a href="#cb29-8"></a><span class="dt">GHC.TypeLits</span><span class="op">|</span>   <span class="dt">Nil</span><span class="ot">  ::</span> <span class="dt">List</span> a <span class="dv">0</span></span>
<span id="cb29-9"><a href="#cb29-9"></a><span class="dt">GHC.TypeLits</span><span class="op">|</span><span class="ot">   (:~) ::</span> a <span class="ot">-&gt;</span> <span class="dt">List</span> a n <span class="ot">-&gt;</span> <span class="dt">List</span> a (n <span class="op">+</span> <span class="dv">1</span>)</span>
<span id="cb29-10"><a href="#cb29-10"></a><span class="dt">GHC.TypeLits</span><span class="op">|</span> <span class="kw">infixr</span> <span class="dv">5</span> <span class="op">:~</span></span>
<span id="cb29-11"><a href="#cb29-11"></a><span class="dt">GHC.TypeLits</span><span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb29-12"><a href="#cb29-12"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="dt">Nil</span></span>
<span id="cb29-13"><a href="#cb29-13"></a><span class="dt">Nil</span><span class="ot"> ::</span> <span class="dt">List</span> a <span class="dv">0</span></span>
<span id="cb29-14"><a href="#cb29-14"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="ch">'a'</span> <span class="op">:~</span> <span class="dt">Nil</span></span>
<span id="cb29-15"><a href="#cb29-15"></a><span class="ch">'a'</span> <span class="op">:~</span> <span class="dt">Nil</span><span class="ot"> ::</span> <span class="dt">List</span> <span class="dt">Char</span> <span class="dv">1</span></span>
<span id="cb29-16"><a href="#cb29-16"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="ch">'b'</span> <span class="op">:~</span> <span class="ch">'a'</span> <span class="op">:~</span> <span class="dt">Nil</span></span>
<span id="cb29-17"><a href="#cb29-17"></a><span class="ch">'b'</span> <span class="op">:~</span> <span class="ch">'a'</span> <span class="op">:~</span> <span class="dt">Nil</span><span class="ot"> ::</span> <span class="dt">List</span> <span class="dt">Char</span> <span class="dv">2</span></span>
<span id="cb29-18"><a href="#cb29-18"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="dt">True</span> <span class="op">:~</span> <span class="ch">'a'</span> <span class="op">:~</span> <span class="dt">Nil</span></span>
<span id="cb29-19"><a href="#cb29-19"></a></span>
<span id="cb29-20"><a href="#cb29-20"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">1</span><span class="op">:</span><span class="dv">9</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span></span>
<span id="cb29-21"><a href="#cb29-21"></a>    • <span class="dt">Couldn't</span> match <span class="kw">type</span> ‘<span class="dt">Char</span>’ with ‘<span class="dt">Bool</span>’</span>
<span id="cb29-22"><a href="#cb29-22"></a>      <span class="dt">Expected</span> <span class="kw">type</span><span class="op">:</span> <span class="dt">List</span> <span class="dt">Bool</span> <span class="dv">1</span></span>
<span id="cb29-23"><a href="#cb29-23"></a>        <span class="dt">Actual</span> <span class="kw">type</span><span class="op">:</span> <span class="dt">List</span> <span class="dt">Char</span> (<span class="dv">0</span> <span class="op">+</span> <span class="dv">1</span>)</span>
<span id="cb29-24"><a href="#cb29-24"></a>    • <span class="dt">In</span> the second argument <span class="kw">of</span> ‘(<span class="op">:~</span>)’, namely ‘<span class="ch">'a'</span> <span class="op">:~</span> <span class="dt">Nil</span>’</span>
<span id="cb29-25"><a href="#cb29-25"></a>      <span class="dt">In</span> the expression<span class="op">:</span> <span class="dt">True</span> <span class="op">:~</span> <span class="ch">'a'</span> <span class="op">:~</span> <span class="dt">Nil</span></span></code></pre></div>
<ul>
<li>GADTs are just syntactic sugar for ADTs with type equalities. The above definition is equivalent to:</li>
</ul>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XGADTs</span></span>
<span id="cb30-2"><a href="#cb30-2"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XKindSignatures</span></span>
<span id="cb30-3"><a href="#cb30-3"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XTypeOperators</span></span>
<span id="cb30-4"><a href="#cb30-4"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XDataKinds</span></span>
<span id="cb30-5"><a href="#cb30-5"></a><span class="op">&gt;</span> <span class="op">:</span>m <span class="op">+</span><span class="dt">GHC.TypeLits</span></span>
<span id="cb30-6"><a href="#cb30-6"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb30-7"><a href="#cb30-7"></a><span class="dt">GHC.TypeLits</span><span class="op">|</span> <span class="kw">data</span> <span class="dt">List</span> (<span class="ot">a ::</span> <span class="op">*</span>) (<span class="ot">n ::</span> <span class="dt">Nat</span>)</span>
<span id="cb30-8"><a href="#cb30-8"></a><span class="dt">GHC.TypeLits</span><span class="op">|</span>   <span class="ot">=</span> (n <span class="op">~</span> <span class="dv">0</span>) <span class="ot">=&gt;</span> <span class="dt">Nil</span></span>
<span id="cb30-9"><a href="#cb30-9"></a><span class="dt">GHC.TypeLits</span><span class="op">|</span>   <span class="op">|</span> a <span class="op">:~</span> <span class="dt">List</span> a (n <span class="op">-</span> <span class="dv">1</span>)</span>
<span id="cb30-10"><a href="#cb30-10"></a><span class="dt">GHC.TypeLits</span><span class="op">|</span> <span class="kw">infixr</span> <span class="dv">5</span> <span class="op">:~</span></span>
<span id="cb30-11"><a href="#cb30-11"></a><span class="dt">GHC.TypeLits</span><span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb30-12"><a href="#cb30-12"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="ch">'a'</span> <span class="op">:~</span> <span class="dt">Nil</span></span>
<span id="cb30-13"><a href="#cb30-13"></a><span class="ch">'a'</span> <span class="op">:~</span> <span class="dt">Nil</span><span class="ot"> ::</span> <span class="dt">List</span> <span class="dt">Char</span> <span class="dv">1</span></span>
<span id="cb30-14"><a href="#cb30-14"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="ch">'b'</span> <span class="op">:~</span> <span class="ch">'a'</span> <span class="op">:~</span> <span class="dt">Nil</span></span>
<span id="cb30-15"><a href="#cb30-15"></a><span class="ch">'b'</span> <span class="op">:~</span> <span class="ch">'a'</span> <span class="op">:~</span> <span class="dt">Nil</span><span class="ot"> ::</span> <span class="dt">List</span> <span class="dt">Char</span> <span class="dv">2</span></span></code></pre></div>
<ul>
<li>Type-safety of this list can be used to write a safe <code>head</code> function which does not compile for an empty list:</li>
</ul>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb31-2"><a href="#cb31-2"></a><span class="dt">GHC.TypeLits</span><span class="op">|</span><span class="ot"> safeHead ::</span> <span class="dt">List</span> a (n <span class="op">+</span> <span class="dv">1</span>) <span class="ot">-&gt;</span> a</span>
<span id="cb31-3"><a href="#cb31-3"></a><span class="dt">GHC.TypeLits</span><span class="op">|</span> safeHead (x <span class="op">:~</span> _) <span class="ot">=</span> x</span>
<span id="cb31-4"><a href="#cb31-4"></a><span class="dt">GHC.TypeLits</span><span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb31-5"><a href="#cb31-5"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> safeHead (<span class="ch">'a'</span> <span class="op">:~</span> <span class="ch">'b'</span> <span class="op">:~</span> <span class="dt">Nil</span>)</span>
<span id="cb31-6"><a href="#cb31-6"></a><span class="ch">'a'</span></span>
<span id="cb31-7"><a href="#cb31-7"></a><span class="dt">GHC.TypeLits</span><span class="op">&gt;</span> safeHead <span class="dt">Nil</span></span>
<span id="cb31-8"><a href="#cb31-8"></a></span>
<span id="cb31-9"><a href="#cb31-9"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">21</span><span class="op">:</span><span class="dv">10</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span></span>
<span id="cb31-10"><a href="#cb31-10"></a>    • <span class="dt">Couldn't</span> match <span class="kw">type</span> ‘1’ with ‘0’</span>
<span id="cb31-11"><a href="#cb31-11"></a>      <span class="dt">Expected</span> <span class="kw">type</span><span class="op">:</span> <span class="dt">List</span> a (<span class="dv">0</span> <span class="op">+</span> <span class="dv">1</span>)</span>
<span id="cb31-12"><a href="#cb31-12"></a>        <span class="dt">Actual</span> <span class="kw">type</span><span class="op">:</span> <span class="dt">List</span> a <span class="dv">0</span></span>
<span id="cb31-13"><a href="#cb31-13"></a>    • <span class="dt">In</span> the first argument <span class="kw">of</span> ‘safeHead’, namely ‘<span class="dt">Nil</span>’</span>
<span id="cb31-14"><a href="#cb31-14"></a>      <span class="dt">In</span> the expression<span class="op">:</span> safeHead <span class="dt">Nil</span></span>
<span id="cb31-15"><a href="#cb31-15"></a>      <span class="dt">In</span> an equation for ‘it’<span class="op">:</span> it <span class="ot">=</span> safeHead <span class="dt">Nil</span></span></code></pre></div>
<h3 id="heterogeneous-lists">Heterogeneous Lists<a href="#heterogeneous-lists" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<p>We can use GADTs to build heterogeneous lists which can store values of different types and are type-safe to use.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<p>First, the required extensions and imports:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1"></a><span class="ot">{-# LANGUAGE KindSignatures #-}</span></span>
<span id="cb32-2"><a href="#cb32-2"></a><span class="ot">{-# LANGUAGE DataKinds #-}</span></span>
<span id="cb32-3"><a href="#cb32-3"></a><span class="ot">{-# LANGUAGE TypeOperators #-}</span></span>
<span id="cb32-4"><a href="#cb32-4"></a><span class="ot">{-# LANGUAGE GADTs #-}</span></span>
<span id="cb32-5"><a href="#cb32-5"></a><span class="ot">{-# LANGUAGE FlexibleInstances #-}</span></span>
<span id="cb32-6"><a href="#cb32-6"></a><span class="ot">{-# LANGUAGE FlexibleContexts #-}</span></span>
<span id="cb32-7"><a href="#cb32-7"></a><span class="ot">{-# LANGUAGE TypeApplications #-}</span></span>
<span id="cb32-8"><a href="#cb32-8"></a><span class="ot">{-# LANGUAGE ScopedTypeVariables #-}</span></span>
<span id="cb32-9"><a href="#cb32-9"></a></span>
<span id="cb32-10"><a href="#cb32-10"></a><span class="kw">module</span> <span class="dt">HList</span> <span class="kw">where</span></span>
<span id="cb32-11"><a href="#cb32-11"></a></span>
<span id="cb32-12"><a href="#cb32-12"></a><span class="kw">import</span> <span class="dt">Data.Typeable</span></span></code></pre></div>
<p><code>HList</code> is defined as a GADT:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1"></a><span class="kw">data</span> <span class="dt">HList</span> (<span class="ot">ts ::</span> [<span class="op">*</span>]) <span class="kw">where</span></span>
<span id="cb33-2"><a href="#cb33-2"></a>  <span class="dt">HNil</span><span class="ot"> ::</span> <span class="dt">HList</span> '[]</span>
<span id="cb33-3"><a href="#cb33-3"></a><span class="ot">  (:#) ::</span> t <span class="ot">-&gt;</span> <span class="dt">HList</span> ts <span class="ot">-&gt;</span> <span class="dt">HList</span> (t '<span class="op">:</span> ts)</span>
<span id="cb33-4"><a href="#cb33-4"></a><span class="kw">infixr</span> <span class="dv">5</span> <span class="op">:#</span></span></code></pre></div>
<p>Example usage:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="#cb34-1"></a><span class="op">*</span><span class="dt">HList</span><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="dt">HNil</span></span>
<span id="cb34-2"><a href="#cb34-2"></a><span class="dt">HNil</span><span class="ot"> ::</span> <span class="dt">HList</span> '[]</span>
<span id="cb34-3"><a href="#cb34-3"></a><span class="op">*</span><span class="dt">HList</span><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="ch">'a'</span> <span class="op">:#</span> <span class="dt">HNil</span></span>
<span id="cb34-4"><a href="#cb34-4"></a><span class="ch">'a'</span> <span class="op">:#</span> <span class="dt">HNil</span><span class="ot"> ::</span> <span class="dt">HList</span> '[<span class="dt">Char</span>]</span>
<span id="cb34-5"><a href="#cb34-5"></a><span class="op">*</span><span class="dt">HList</span><span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> <span class="dt">True</span> <span class="op">:#</span> <span class="ch">'a'</span> <span class="op">:#</span> <span class="dt">HNil</span></span>
<span id="cb34-6"><a href="#cb34-6"></a><span class="dt">True</span> <span class="op">:#</span> <span class="ch">'a'</span> <span class="op">:#</span> <span class="dt">HNil</span><span class="ot"> ::</span> <span class="dt">HList</span> '[<span class="dt">Bool</span>, <span class="dt">Char</span>]</span></code></pre></div>
<p>We can write operations on <code>HList</code>:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="#cb35-1"></a><span class="ot">hLength ::</span> <span class="dt">HList</span> ts <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb35-2"><a href="#cb35-2"></a>hLength <span class="dt">HNil</span> <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb35-3"><a href="#cb35-3"></a>hLength (x <span class="op">:#</span> xs) <span class="ot">=</span> <span class="dv">1</span> <span class="op">+</span> hLength xs</span>
<span id="cb35-4"><a href="#cb35-4"></a></span>
<span id="cb35-5"><a href="#cb35-5"></a><span class="ot">hHead ::</span> <span class="dt">HList</span> (t '<span class="op">:</span> ts) <span class="ot">-&gt;</span> t</span>
<span id="cb35-6"><a href="#cb35-6"></a>hHead (t <span class="op">:#</span> _) <span class="ot">=</span> t</span></code></pre></div>
<p>Example usage:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="#cb36-1"></a><span class="op">*</span><span class="dt">HList</span><span class="op">&gt;</span> hLength <span class="op">$</span> <span class="dt">True</span> <span class="op">:#</span> <span class="ch">'a'</span> <span class="op">:#</span> <span class="dt">HNil</span></span>
<span id="cb36-2"><a href="#cb36-2"></a><span class="dv">2</span></span>
<span id="cb36-3"><a href="#cb36-3"></a><span class="op">*</span><span class="dt">HList</span><span class="op">&gt;</span> hHead <span class="op">$</span> <span class="dt">True</span> <span class="op">:#</span> <span class="ch">'a'</span> <span class="op">:#</span> <span class="dt">HNil</span></span>
<span id="cb36-4"><a href="#cb36-4"></a><span class="dt">True</span></span>
<span id="cb36-5"><a href="#cb36-5"></a><span class="op">*</span><span class="dt">HList</span><span class="op">&gt;</span> hHead <span class="dt">HNil</span></span>
<span id="cb36-6"><a href="#cb36-6"></a></span>
<span id="cb36-7"><a href="#cb36-7"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">7</span><span class="op">:</span><span class="dv">7</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span></span>
<span id="cb36-8"><a href="#cb36-8"></a>    • <span class="dt">Couldn't</span> match <span class="kw">type</span> ‘'[]’ with ‘t <span class="op">:</span> ts0’</span>
<span id="cb36-9"><a href="#cb36-9"></a>      <span class="dt">Expected</span> <span class="kw">type</span><span class="op">:</span> <span class="dt">HList</span> (t <span class="op">:</span> ts0)</span>
<span id="cb36-10"><a href="#cb36-10"></a>        <span class="dt">Actual</span> <span class="kw">type</span><span class="op">:</span> <span class="dt">HList</span> '[]</span>
<span id="cb36-11"><a href="#cb36-11"></a>    • <span class="dt">In</span> the first argument <span class="kw">of</span> ‘hHead’, namely ‘<span class="dt">HNil</span>’</span>
<span id="cb36-12"><a href="#cb36-12"></a>      <span class="dt">In</span> the expression<span class="op">:</span> hHead <span class="dt">HNil</span></span>
<span id="cb36-13"><a href="#cb36-13"></a>      <span class="dt">In</span> an equation for ‘it’<span class="op">:</span> it <span class="ot">=</span> hHead <span class="dt">HNil</span></span>
<span id="cb36-14"><a href="#cb36-14"></a>    • <span class="dt">Relevant</span> bindings include<span class="ot"> it ::</span> t (bound at <span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">7</span><span class="op">:</span><span class="dv">1</span>)</span></code></pre></div>
<p>We need to define instances of typeclasses like <code>Eq</code>, <code>Ord</code> etc. for <code>HList</code> because GHC cannot derive them automatically yet:</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb37-1"><a href="#cb37-1"></a><span class="kw">instance</span> <span class="dt">Eq</span> (<span class="dt">HList</span> '[]) <span class="kw">where</span></span>
<span id="cb37-2"><a href="#cb37-2"></a>  <span class="dt">HNil</span> <span class="op">==</span> <span class="dt">HNil</span> <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb37-3"><a href="#cb37-3"></a><span class="kw">instance</span> (<span class="dt">Eq</span> t, <span class="dt">Eq</span> (<span class="dt">HList</span> ts))</span>
<span id="cb37-4"><a href="#cb37-4"></a>    <span class="ot">=&gt;</span> <span class="dt">Eq</span> (<span class="dt">HList</span> (t '<span class="op">:</span> ts)) <span class="kw">where</span></span>
<span id="cb37-5"><a href="#cb37-5"></a>  (x <span class="op">:#</span> xs) <span class="op">==</span> (y <span class="op">:#</span> ys) <span class="ot">=</span></span>
<span id="cb37-6"><a href="#cb37-6"></a>    x <span class="op">==</span> y <span class="op">&amp;&amp;</span> xs <span class="op">==</span> ys</span>
<span id="cb37-7"><a href="#cb37-7"></a></span>
<span id="cb37-8"><a href="#cb37-8"></a><span class="kw">instance</span> <span class="dt">Ord</span> (<span class="dt">HList</span> '[]) <span class="kw">where</span></span>
<span id="cb37-9"><a href="#cb37-9"></a>  <span class="dt">HNil</span> <span class="ot">`compare`</span> <span class="dt">HNil</span> <span class="ot">=</span> <span class="dt">EQ</span></span>
<span id="cb37-10"><a href="#cb37-10"></a><span class="kw">instance</span> (<span class="dt">Ord</span> t, <span class="dt">Ord</span> (<span class="dt">HList</span> ts))</span>
<span id="cb37-11"><a href="#cb37-11"></a>    <span class="ot">=&gt;</span> <span class="dt">Ord</span> (<span class="dt">HList</span> (t '<span class="op">:</span> ts)) <span class="kw">where</span></span>
<span id="cb37-12"><a href="#cb37-12"></a>  (x <span class="op">:#</span> xs) <span class="ot">`compare`</span> (y <span class="op">:#</span> ys) <span class="ot">=</span></span>
<span id="cb37-13"><a href="#cb37-13"></a>    x <span class="ot">`compare`</span> y <span class="op">&lt;&gt;</span> xs <span class="ot">`compare`</span> ys</span>
<span id="cb37-14"><a href="#cb37-14"></a></span>
<span id="cb37-15"><a href="#cb37-15"></a><span class="kw">instance</span> <span class="dt">Show</span> (<span class="dt">HList</span> '[]) <span class="kw">where</span></span>
<span id="cb37-16"><a href="#cb37-16"></a>  <span class="fu">show</span> <span class="dt">HNil</span> <span class="ot">=</span> <span class="st">&quot;[]&quot;</span></span>
<span id="cb37-17"><a href="#cb37-17"></a><span class="kw">instance</span> (<span class="dt">Typeable</span> t, <span class="dt">Show</span> t, <span class="dt">Show</span> (<span class="dt">HList</span> ts))</span>
<span id="cb37-18"><a href="#cb37-18"></a>    <span class="ot">=&gt;</span> <span class="dt">Show</span> (<span class="dt">HList</span> (t '<span class="op">:</span> ts)) <span class="kw">where</span></span>
<span id="cb37-19"><a href="#cb37-19"></a>  <span class="fu">show</span> (x <span class="op">:#</span> xs) <span class="ot">=</span></span>
<span id="cb37-20"><a href="#cb37-20"></a>    <span class="fu">show</span> x </span>
<span id="cb37-21"><a href="#cb37-21"></a>    <span class="op">++</span> <span class="st">&quot;@&quot;</span> <span class="op">++</span> <span class="fu">show</span> (typeRep (<span class="dt">Proxy</span> <span class="op">@</span>t))</span>
<span id="cb37-22"><a href="#cb37-22"></a>    <span class="op">++</span> <span class="st">&quot; :# &quot;</span> <span class="op">++</span> <span class="fu">show</span> xs</span></code></pre></div>
<p>The instances are defined recursively: one for the base case and one for the inductive case.</p>
<p>Example usage:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb38-1"><a href="#cb38-1"></a><span class="op">*</span><span class="dt">HList</span><span class="op">&gt;</span> <span class="dt">True</span> <span class="op">:#</span> <span class="ch">'a'</span> <span class="op">:#</span> <span class="dt">HNil</span> <span class="op">==</span> <span class="dt">True</span> <span class="op">:#</span> <span class="ch">'a'</span> <span class="op">:#</span> <span class="dt">HNil</span></span>
<span id="cb38-2"><a href="#cb38-2"></a><span class="dt">True</span></span>
<span id="cb38-3"><a href="#cb38-3"></a><span class="op">*</span><span class="dt">HList</span><span class="op">&gt;</span> <span class="dt">True</span> <span class="op">:#</span> <span class="ch">'a'</span> <span class="op">:#</span> <span class="dt">HNil</span> <span class="op">==</span> <span class="dt">True</span> <span class="op">:#</span> <span class="ch">'b'</span> <span class="op">:#</span> <span class="dt">HNil</span></span>
<span id="cb38-4"><a href="#cb38-4"></a><span class="dt">False</span></span>
<span id="cb38-5"><a href="#cb38-5"></a><span class="op">*</span><span class="dt">HList</span><span class="op">&gt;</span> <span class="dt">True</span> <span class="op">:#</span> <span class="ch">'a'</span> <span class="op">:#</span> <span class="dt">HNil</span> <span class="op">==</span> <span class="dt">True</span> <span class="op">:#</span> <span class="dt">HNil</span></span>
<span id="cb38-6"><a href="#cb38-6"></a></span>
<span id="cb38-7"><a href="#cb38-7"></a><span class="op">&lt;</span>interactive<span class="op">&gt;:</span><span class="dv">17</span><span class="op">:</span><span class="dv">24</span><span class="op">:</span> <span class="fu">error</span><span class="op">:</span></span>
<span id="cb38-8"><a href="#cb38-8"></a>    • <span class="dt">Couldn't</span> match <span class="kw">type</span> ‘'[]’ with ‘'[<span class="dt">Char</span>]’</span>
<span id="cb38-9"><a href="#cb38-9"></a>      <span class="dt">Expected</span> <span class="kw">type</span><span class="op">:</span> <span class="dt">HList</span> '[<span class="dt">Bool</span>, <span class="dt">Char</span>]</span>
<span id="cb38-10"><a href="#cb38-10"></a>        <span class="dt">Actual</span> <span class="kw">type</span><span class="op">:</span> <span class="dt">HList</span> '[<span class="dt">Bool</span>]</span>
<span id="cb38-11"><a href="#cb38-11"></a>    • <span class="dt">In</span> the second argument <span class="kw">of</span> ‘(<span class="op">==</span>)’, namely ‘<span class="dt">True</span> <span class="op">:#</span> <span class="dt">HNil</span>’</span>
<span id="cb38-12"><a href="#cb38-12"></a>      <span class="dt">In</span> the expression<span class="op">:</span> <span class="dt">True</span> <span class="op">:#</span> <span class="ch">'a'</span> <span class="op">:#</span> <span class="dt">HNil</span> <span class="op">==</span> <span class="dt">True</span> <span class="op">:#</span> <span class="dt">HNil</span></span>
<span id="cb38-13"><a href="#cb38-13"></a>      <span class="dt">In</span> an equation for ‘it’<span class="op">:</span> it <span class="ot">=</span> <span class="dt">True</span> <span class="op">:#</span> <span class="ch">'a'</span> <span class="op">:#</span> <span class="dt">HNil</span> <span class="op">==</span> <span class="dt">True</span> <span class="op">:#</span> <span class="dt">HNil</span></span>
<span id="cb38-14"><a href="#cb38-14"></a><span class="op">*</span><span class="dt">HList</span><span class="op">&gt;</span> <span class="fu">show</span> <span class="op">$</span> <span class="dt">True</span> <span class="op">:#</span> <span class="ch">'a'</span> <span class="op">:#</span> <span class="dt">HNil</span></span>
<span id="cb38-15"><a href="#cb38-15"></a><span class="st">&quot;True@Bool :# 'a'@Char :# []&quot;</span></span></code></pre></div>
<h3 id="creating-new-constraints">Creating New Constraints<a href="#creating-new-constraints" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<ul>
<li>Type families can be used to create new Constraints:</li>
</ul>
<div class="sourceCode" id="cb39"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb39-1"><a href="#cb39-1"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XKindSignatures</span></span>
<span id="cb39-2"><a href="#cb39-2"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XDataKinds</span></span>
<span id="cb39-3"><a href="#cb39-3"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XTypeOperators</span></span>
<span id="cb39-4"><a href="#cb39-4"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XTypeFamilies</span></span>
<span id="cb39-5"><a href="#cb39-5"></a><span class="op">&gt;</span> <span class="op">:</span>m <span class="op">+</span><span class="dt">Data.Constraint</span></span>
<span id="cb39-6"><a href="#cb39-6"></a><span class="dt">Data.Constraint</span><span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb39-7"><a href="#cb39-7"></a><span class="dt">Data.Constraint</span><span class="op">|</span> <span class="kw">type</span> <span class="kw">family</span> <span class="dt">AllEq</span> (<span class="ot">ts ::</span> [<span class="op">*</span>])<span class="ot"> ::</span> <span class="dt">Constraint</span> <span class="kw">where</span></span>
<span id="cb39-8"><a href="#cb39-8"></a><span class="dt">Data.Constraint</span><span class="op">|</span>   <span class="dt">AllEq</span> '[] <span class="ot">=</span> ()</span>
<span id="cb39-9"><a href="#cb39-9"></a><span class="dt">Data.Constraint</span><span class="op">|</span>   <span class="dt">AllEq</span> (t '<span class="op">:</span> ts) <span class="ot">=</span> (<span class="dt">Eq</span> t, <span class="dt">AllEq</span> ts)</span>
<span id="cb39-10"><a href="#cb39-10"></a><span class="dt">Data.Constraint</span><span class="op">|</span> <span class="op">:</span>}</span>
<span id="cb39-11"><a href="#cb39-11"></a><span class="dt">Data.Constraint</span><span class="op">&gt;</span> <span class="op">:</span>kind<span class="op">!</span> <span class="dt">AllEq</span> '[<span class="dt">Bool</span>, <span class="dt">Char</span>]</span>
<span id="cb39-12"><a href="#cb39-12"></a><span class="dt">AllEq</span> '[<span class="dt">Bool</span>, <span class="dt">Char</span>]<span class="ot"> ::</span> <span class="dt">Constraint</span></span>
<span id="cb39-13"><a href="#cb39-13"></a><span class="ot">=</span> (<span class="dt">Eq</span> <span class="dt">Bool</span>, (<span class="dt">Eq</span> <span class="dt">Char</span>,<span class="ot"> () ::</span> <span class="dt">Constraint</span>))</span></code></pre></div>
<ul>
<li><code>AllEq</code> is a type-level function from a list of types to a constraint.</li>
<li>With the <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-ConstraintKinds" target="_blank" rel="noopener"><code>-XConstraintKinds</code></a> extension, <code>AllEq</code> can be made polymorphic over all constraints instead of just <code>Eq</code>:</li>
</ul>
<div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb40-1"><a href="#cb40-1"></a><span class="op">&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XConstraintKinds</span></span>
<span id="cb40-2"><a href="#cb40-2"></a><span class="dt">Data.Constraint</span><span class="op">&gt;</span> <span class="op">:</span>{</span>
<span id="cb40-3"><a href="#cb40-3"></a><span class="dt">Data.Constraint</span><span class="op">|</span> <span class="kw">type</span> <span class="kw">family</span> <span class="dt">All</span> (<span class="ot">c ::</span> <span class="op">*</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span>)</span>
<span id="cb40-4"><a href="#cb40-4"></a><span class="dt">Data.Constraint</span><span class="op">|</span>                 (<span class="ot">ts ::</span> [<span class="op">*</span>])<span class="ot"> ::</span> <span class="dt">Constraint</span> <span class="kw">where</span></span>
<span id="cb40-5"><a href="#cb40-5"></a><span class="dt">Data.Constraint</span><span class="op">|</span>   <span class="dt">All</span> c '[] <span class="ot">=</span> ()</span>
<span id="cb40-6"><a href="#cb40-6"></a><span class="dt">Data.Constraint</span><span class="op">|</span>   <span class="dt">All</span> c (t '<span class="op">:</span> ts) <span class="ot">=</span> (c t, <span class="dt">All</span> c ts)</span>
<span id="cb40-7"><a href="#cb40-7"></a><span class="dt">Data.Constraint</span><span class="op">|</span> <span class="op">:</span>}</span></code></pre></div>
<ul>
<li>With <code>All</code>, instances for <code>HList</code> can be written non-recursively:</li>
</ul>
<div class="sourceCode" id="cb41"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb41-1"><a href="#cb41-1"></a><span class="kw">instance</span> <span class="dt">All</span> <span class="dt">Eq</span> ts <span class="ot">=&gt;</span> <span class="dt">Eq</span> (<span class="dt">HList</span> ts) <span class="kw">where</span></span>
<span id="cb41-2"><a href="#cb41-2"></a>  <span class="dt">HNil</span> <span class="op">==</span> <span class="dt">HNil</span> <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb41-3"><a href="#cb41-3"></a>  (a <span class="op">:#</span> as) <span class="op">==</span> (b <span class="op">:#</span> bs) <span class="ot">=</span> a <span class="op">==</span> b <span class="op">&amp;&amp;</span> as <span class="op">==</span> bs</span></code></pre></div>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a href="https://abhinavsarkar.net/code/hlist.html">The complete code for <code>HList</code></a>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section><p>If you liked this post, please <a href="https://abhinavsarkar.net/posts/twt-notes-1/#comment-container">leave a comment</a>.</p><img src="https://anna.abhinavsarkar.net/piwik.php?idsite=1&amp;rec=1" style="border:0; display: none;" />]]></summary>
</entry>
<entry>
    <title>Fast Sudoku Solver in Haskell #3: Picking the Right Data Structures</title>
    <link rel="alternate" href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-3/" />
    <id>https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-3/</id>
    <published>2018-08-13T00:00:00Z</published>
    <updated>2018-08-13T00:00:00Z</updated>
    
    <author>
        <name>Abhinav Sarkar</name>
        <email>abhinav@abhinavsarkar.net</email>
        <uri>https://abhinavsarkar.net/about/</uri>
    </author>
    
    
    <category term="haskell" />
    
    <category term="sudoku" />
    
    <category term="programming" />
    
    <category term="puzzle" />
    
    <category term="nilenso" />
    
    <summary type="html"><![CDATA[<p>In the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/">previous part</a> in this series of posts, we optimized the simple Sudoku solver by implementing a new strategy to prune cells, and were able to achieve a speedup of almost 200x. Afterwards, we profiled the solution and found that there were bottlenecks in the program, leading to a slowdown. In this post, we are going to follow the profiler and use the right <em>Data Structures</em> to improve the solution further and make it <strong>faster</strong>.</p>
<!--more-->
<p>This is the third post in a series of posts:</p>
<ol type="1">
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/">Fast Sudoku Solver in Haskell #1: A Simple Solution</a></li>
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/">Fast Sudoku Solver in Haskell #2: A 200x Faster Solution</a></li>
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-3/">Fast Sudoku Solver in Haskell #3: Picking the Right Data Structures</a></li>
</ol>
<p>Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/96y0xa/fast_sudoku_solver_in_haskell_3_picking_the_right/" target="_blank" rel="noopener">r/haskell</a>.</p>
<nav id="toc" class="right-toc"><h3>Contents</h3><ol><li><a href="#quick-recap">Quick Recap</a></li><li><a href="#profile-twice-code-once">Profile Twice, Code Once</a></li><li><a href="#a-set-for-all-occasions">A Set for All Occasions</a></li><li><a href="#bit-by-bit-we-get-faster">Bit by Bit, We Get Faster</a></li><li><a href="#back-to-the-profiler">Back to the Profiler</a></li><li><a href="#vectors-of-speed">Vectors of Speed</a></li><li><a href="#revenge-of-the">Revenge of the <code>(==)</code></a></li><li><a href="#one-function-to-prune-them-all">One Function to Prune Them All</a></li><li><a href="#rise-of-the-mutables">Rise of the Mutables</a></li><li><a href="#comparison-of-implementations">Comparison of Implementations</a></li><li><a href="#conclusion">Conclusion</a></li></ol></nav>
<h2 id="quick-recap" data-track-content data-content-name="quick-recap" data-content-piece="fast-sudoku-solver-in-haskell-3">Quick Recap<a href="#quick-recap" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p><a href="https://en.wikipedia.org/wiki/Sudoku" target="_blank" rel="noopener">Sudoku</a> is a number placement puzzle. It consists of a 9x9 grid which is to be filled with digits from 1 to 9 such that each row, each column and each of the nine 3x3 sub-grids contain all the digits. Some of the cells of the grid come pre-filled and the player has to fill the rest.</p>
<p>In the previous post, we improved the performance of the simple Sudoku solver by implementing a new strategy to prune cells. This <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/#a-little-forward-a-little-backward">new strategy</a> found the digits which occurred uniquely, in pairs, or in triplets and fixed the cells to those digits. It led to a speedup of about 200x over our original naive solution. This is our current run<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> time for solving all the 49151 <a href="https://abhinavsarkar.net/files/sudoku17.txt.bz2">17-clue puzzles</a>:</p>
<pre class="plain"><code>$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
      258.97 real       257.34 user         1.52 sys</code></pre>
<p>Let’s try to improve this time.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<h2 id="profile-twice-code-once" data-track-content data-content-name="profile-twice-code-once" data-content-piece="fast-sudoku-solver-in-haskell-3">Profile Twice, Code Once<a href="#profile-twice-code-once" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Instead of trying to guess how to improve the performance of our solution, let’s be methodical about it. We start with profiling the code to find the bottlenecks. Let’s compile and run the code with profiling flags:</p>
<pre class="plain"><code>$ stack build --profile
$ head -1000 sudoku17.txt | stack exec -- sudoku +RTS -p &gt; /dev/null</code></pre>
<p>This generates a <code>sudoku.prof</code> file with the profiling output. Here are the top seven <em>Cost Centres</em><a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> from the file (cleaned for brevity):</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Centre</th>
<th style="text-align: left;">Src</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities</code></td>
<td style="text-align: left;">Sudoku.hs:(49,1)-(62,26)</td>
<td style="text-align: right;">18.9</td>
<td style="text-align: right;">11.4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCellsByFixed.pruneCell</code></td>
<td style="text-align: left;">Sudoku.hs:(75,5)-(76,36)</td>
<td style="text-align: right;">17.7</td>
<td style="text-align: right;">30.8</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities.\.\</code></td>
<td style="text-align: left;">Sudoku.hs:55:38-70</td>
<td style="text-align: right;">11.7</td>
<td style="text-align: right;">20.3</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>fixM.\</code></td>
<td style="text-align: left;">Sudoku.hs:13:27-65</td>
<td style="text-align: right;">10.7</td>
<td style="text-align: right;">0.0</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>==</code></td>
<td style="text-align: left;">Sudoku.hs:15:56-57</td>
<td style="text-align: right;">5.6</td>
<td style="text-align: right;">0.0</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneGrid'</code></td>
<td style="text-align: left;">Sudoku.hs:(103,1)-(106,64)</td>
<td style="text-align: right;">5.0</td>
<td style="text-align: right;">6.7</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pruneCellsByFixed</code></td>
<td style="text-align: left;">Sudoku.hs:(71,1)-(76,36)</td>
<td style="text-align: right;">4.5</td>
<td style="text-align: right;">5.0</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>exclusivePossibilities.\</code></td>
<td style="text-align: left;">Sudoku.hs:58:36-68</td>
<td style="text-align: right;">3.4</td>
<td style="text-align: right;">2.5</td>
</tr>
</tbody>
</table>
</div>
<p><em>Cost Centre</em> points to a function, either named or anonymous. <em>Src</em> gives the line and column numbers of the source code of the function. <em>%time</em> and <em>%alloc</em> are the percentages of time spent and memory allocated in the function, respectively.</p>
<p>We see that <code>exclusivePossibilities</code> and the nested functions inside it take up almost 34% time of the entire run time. Second biggest bottleneck is the <code>pruneCell</code> function inside the <code>pruneCellsByFixed</code> function.</p>
<p>We are going to look at <code>exclusivePossibilities</code> later. For now, it is easy to guess the possible reason for <code>pruneCell</code> taking so much time. Here’s the code for reference:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="ot">pruneCellsByFixed ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Cell</span>]</span>
<span id="cb3-2"><a href="#cb3-2"></a>pruneCellsByFixed cells <span class="ot">=</span> <span class="fu">traverse</span> pruneCell cells</span>
<span id="cb3-3"><a href="#cb3-3"></a>  <span class="kw">where</span></span>
<span id="cb3-4"><a href="#cb3-4"></a>    fixeds <span class="ot">=</span> [x <span class="op">|</span> <span class="dt">Fixed</span> x <span class="ot">&lt;-</span> cells]</span>
<span id="cb3-5"><a href="#cb3-5"></a></span>
<span id="cb3-6"><a href="#cb3-6"></a>    pruneCell (<span class="dt">Possible</span> xs) <span class="ot">=</span> makeCell (xs <span class="dt">Data.List</span><span class="op">.</span>\\ fixeds)</span>
<span id="cb3-7"><a href="#cb3-7"></a>    pruneCell x             <span class="ot">=</span> <span class="dt">Just</span> x</span></code></pre></div>
<p><code>pruneCell</code> uses <code>Data.List.\\</code> to find the difference of the cell’s possible digits and the fixed digits in the cell’s block. In Haskell, lists are implemented as <a href="https://en.wikipedia.org/wiki/Linked_list#Singly_linked_list" target="_blank" rel="noopener">singly linked lists</a>. So, finding the difference or intersection of two lists is O(n<sup>2</sup>), that is, quadratic <a href="https://en.wikipedia.org/wiki/Asymptotic_complexity" target="_blank" rel="noopener">asymptotic complexity</a>. Let’s tackle this bottleneck first.</p>
<h2 id="a-set-for-all-occasions" data-track-content data-content-name="a-set-for-all-occasions" data-content-piece="fast-sudoku-solver-in-haskell-3">A Set for All Occasions<a href="#a-set-for-all-occasions" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>What is a efficient data structure for finding differences and intersections? Why, a <a href="https://en.wikipedia.org/wiki/Set_(abstract_data_type)" target="_blank" rel="noopener"><em>Set</em></a> of course! A Set stores unique values and provides fast operations for testing membership of its elements. If we use a Set to represent the possible values of cells instead of a List, the program should run faster. Since the possible values are already unique (<code>1</code>–<code>9</code>), it should not break anything.</p>
<p>Haskell comes with a bunch of Set implementations:</p>
<ul>
<li><a href="https://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-Set.html" target="_blank" rel="noopener"><code>Data.Set</code></a> which is a generic data structure implemented as <a href="https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree" target="_blank" rel="noopener">self-balancing binary search tree</a>.</li>
<li><a href="https://hackage.haskell.org/package/unordered-containers-0.2.9.0/docs/Data-HashSet.html" target="_blank" rel="noopener"><code>Data.HashSet</code></a> which is a generic data structure implemented as <a href="https://en.wikipedia.org/wiki/Hash_array_mapped_trie" target="_blank" rel="noopener">hash array mapped trie</a>.</li>
<li><a href="https://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-IntSet.html" target="_blank" rel="noopener"><code>Data.IntSet</code></a> which is a specialized data structure for integer values, implemented as <a href="https://en.wikipedia.org/wiki/Radix_tree" target="_blank" rel="noopener">radix tree</a>.</li>
</ul>
<p>However, a much faster implementation is possible for our particular use-case. We can use a <a href="https://en.wikipedia.org/wiki/Bitset" target="_blank" rel="noopener"><em>BitSet</em></a>.</p>
<p>A BitSet uses <a href="https://en.wikipedia.org/wiki/Bit" target="_blank" rel="noopener">bits</a> to represent unique members of a Set. We map values to particular bits using some function. If the bit corresponding to a particular value is set to 1 then the value is present in the Set, else it is not. So, we need as many bits in a BitSet as the number of values in our domain, which makes is difficult to use for generic problems. But, for our Sudoku solver, we need to store only the digits <code>1</code>–<code>9</code> in the Set, which make BitSet very suitable for us. Also, the Set operations on BitSet are implemented using bit-level instructions in hardware, making them much faster than those on the other data structure listed above.</p>
<p>In Haskell, we can use the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Word.html" target="_blank" rel="noopener"><code>Data.Word</code></a> module to represent a BitSet. Specifically, we can use the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Word.html#t:Word16" target="_blank" rel="noopener"><code>Data.Word.Word16</code></a> type which has sixteen bits because we need only nine bits to represent the nine digits. The bit-level operations on <code>Word16</code> are provided by the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Bits.html" target="_blank" rel="noopener"><code>Data.Bits</code></a> module.</p>
<h2 id="bit-by-bit-we-get-faster" data-track-content data-content-name="bit-by-bit-we-get-faster" data-content-piece="fast-sudoku-solver-in-haskell-3">Bit by Bit, We Get Faster<a href="#bit-by-bit-we-get-faster" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>First, we replace List with <code>Word16</code> in the <code>Cell</code> type and add a helper function:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">data</span> <span class="dt">Cell</span> <span class="ot">=</span> <span class="dt">Fixed</span> <span class="dt">Data.Word.Word16</span></span>
<span id="cb4-2"><a href="#cb4-2"></a>          <span class="op">|</span> <span class="dt">Possible</span> <span class="dt">Data.Word.Word16</span></span>
<span id="cb4-3"><a href="#cb4-3"></a>          <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb4-4"><a href="#cb4-4"></a></span>
<span id="cb4-5"><a href="#cb4-5"></a><span class="ot">setBits ::</span> <span class="dt">Data.Word.Word16</span> <span class="ot">-&gt;</span> [<span class="dt">Data.Word.Word16</span>] <span class="ot">-&gt;</span> <span class="dt">Data.Word.Word16</span></span>
<span id="cb4-6"><a href="#cb4-6"></a>setBits <span class="ot">=</span> Data.List.foldl' (<span class="op">Data.Bits..|.</span>)</span></code></pre></div>
<p>Then we replace <code>Int</code> related operations with bit related ones in the read and show functions:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="ot">readGrid ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></span>
<span id="cb5-2"><a href="#cb5-2"></a>readGrid s</span>
<span id="cb5-3"><a href="#cb5-3"></a>  <span class="op">|</span> <span class="fu">length</span> s <span class="op">==</span> <span class="dv">81</span> <span class="ot">=</span></span>
<span id="cb5-4"><a href="#cb5-4"></a>      <span class="fu">traverse</span> (<span class="fu">traverse</span> readCell) <span class="op">.</span> Data.List.Split.chunksOf <span class="dv">9</span> <span class="op">$</span> s</span>
<span id="cb5-5"><a href="#cb5-5"></a>  <span class="op">|</span> <span class="fu">otherwise</span>      <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb5-6"><a href="#cb5-6"></a>  <span class="kw">where</span></span>
<span id="cb5-7"><a href="#cb5-7"></a>    allBitsSet <span class="ot">=</span> <span class="dv">1022</span></span>
<span id="cb5-8"><a href="#cb5-8"></a></span>
<span id="cb5-9"><a href="#cb5-9"></a>    readCell <span class="ch">'.'</span> <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span> <span class="dt">Possible</span> allBitsSet</span>
<span id="cb5-10"><a href="#cb5-10"></a>    readCell c</span>
<span id="cb5-11"><a href="#cb5-11"></a>      <span class="op">|</span> Data.Char.isDigit c <span class="op">&amp;&amp;</span> c <span class="op">&gt;</span> <span class="ch">'0'</span> <span class="ot">=</span></span>
<span id="cb5-12"><a href="#cb5-12"></a>          <span class="dt">Just</span> <span class="op">.</span> <span class="dt">Fixed</span> <span class="op">.</span> Data.Bits.bit <span class="op">.</span> Data.Char.digitToInt <span class="op">$</span> c</span>
<span id="cb5-13"><a href="#cb5-13"></a>      <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb5-14"><a href="#cb5-14"></a></span>
<span id="cb5-15"><a href="#cb5-15"></a><span class="ot">showGrid ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb5-16"><a href="#cb5-16"></a>showGrid <span class="ot">=</span> <span class="fu">unlines</span> <span class="op">.</span> <span class="fu">map</span> (<span class="fu">unwords</span> <span class="op">.</span> <span class="fu">map</span> showCell)</span>
<span id="cb5-17"><a href="#cb5-17"></a>  <span class="kw">where</span></span>
<span id="cb5-18"><a href="#cb5-18"></a>    showCell (<span class="dt">Fixed</span> x) <span class="ot">=</span> <span class="fu">show</span> <span class="op">.</span> Data.Bits.countTrailingZeros <span class="op">$</span> x</span>
<span id="cb5-19"><a href="#cb5-19"></a>    showCell _         <span class="ot">=</span> <span class="st">&quot;.&quot;</span></span>
<span id="cb5-20"><a href="#cb5-20"></a></span>
<span id="cb5-21"><a href="#cb5-21"></a><span class="ot">showGridWithPossibilities ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb5-22"><a href="#cb5-22"></a>showGridWithPossibilities <span class="ot">=</span> <span class="fu">unlines</span> <span class="op">.</span> <span class="fu">map</span> (<span class="fu">unwords</span> <span class="op">.</span> <span class="fu">map</span> showCell)</span>
<span id="cb5-23"><a href="#cb5-23"></a>  <span class="kw">where</span></span>
<span id="cb5-24"><a href="#cb5-24"></a>    showCell (<span class="dt">Fixed</span> x) <span class="ot">=</span> (<span class="fu">show</span> <span class="op">.</span> Data.Bits.countTrailingZeros <span class="op">$</span> x) <span class="op">++</span> <span class="st">&quot;          &quot;</span></span>
<span id="cb5-25"><a href="#cb5-25"></a>    showCell (<span class="dt">Possible</span> xs) <span class="ot">=</span></span>
<span id="cb5-26"><a href="#cb5-26"></a>      <span class="st">&quot;[&quot;</span> <span class="op">++</span></span>
<span id="cb5-27"><a href="#cb5-27"></a>      <span class="fu">map</span> (\i <span class="ot">-&gt;</span> <span class="kw">if</span> Data.Bits.testBit xs i</span>
<span id="cb5-28"><a href="#cb5-28"></a>                 <span class="kw">then</span> Data.Char.intToDigit i</span>
<span id="cb5-29"><a href="#cb5-29"></a>                 <span class="kw">else</span> <span class="ch">' '</span>)</span>
<span id="cb5-30"><a href="#cb5-30"></a>          [<span class="dv">1</span><span class="op">..</span><span class="dv">9</span>]</span>
<span id="cb5-31"><a href="#cb5-31"></a>      <span class="op">++</span> <span class="st">&quot;]&quot;</span></span></code></pre></div>
<p>We set the same bits as the digits to indicate the presence of the digits in the possibilities. For example, for digit <code>1</code>, we set the bit 1 so that the resulting <code>Word16</code> is <code>0000 0000 0000 0010</code> or 2. This also means, for fixed cells, the value is <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Bits.html#v:countTrailingZeros" target="_blank" rel="noopener">count of the zeros from right</a>.</p>
<p>The change in the <code>exclusivePossibilities</code> function is pretty minimal:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb6-1"><a href="#cb6-1"></a><span class="st">-exclusivePossibilities :: [Cell] -&gt; [[Int]]</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="va">+exclusivePossibilities :: [Cell] -&gt; [Data.Word.Word16]</span></span>
<span id="cb6-3"><a href="#cb6-3"></a> exclusivePossibilities row =</span>
<span id="cb6-4"><a href="#cb6-4"></a>   row</span>
<span id="cb6-5"><a href="#cb6-5"></a>   &amp; zip [1..9]</span>
<span id="cb6-6"><a href="#cb6-6"></a>   &amp; filter (isPossible . snd)</span>
<span id="cb6-7"><a href="#cb6-7"></a>   &amp; Data.List.foldl'</span>
<span id="cb6-8"><a href="#cb6-8"></a>       (\acc ~(i, Possible xs) -&gt;</span>
<span id="cb6-9"><a href="#cb6-9"></a><span class="st">-        Data.List.foldl'</span></span>
<span id="cb6-10"><a href="#cb6-10"></a><span class="st">-          (\acc' x -&gt; Map.insertWith prepend x [i] acc')</span></span>
<span id="cb6-11"><a href="#cb6-11"></a><span class="st">-          acc</span></span>
<span id="cb6-12"><a href="#cb6-12"></a><span class="st">-          xs)</span></span>
<span id="cb6-13"><a href="#cb6-13"></a><span class="va">+        Data.List.foldl'</span></span>
<span id="cb6-14"><a href="#cb6-14"></a><span class="va">+          (\acc' x -&gt; if Data.Bits.testBit xs x</span></span>
<span id="cb6-15"><a href="#cb6-15"></a><span class="va">+                      then Map.insertWith prepend x [i] acc'</span></span>
<span id="cb6-16"><a href="#cb6-16"></a><span class="va">+                      else acc')</span></span>
<span id="cb6-17"><a href="#cb6-17"></a><span class="va">+          acc</span></span>
<span id="cb6-18"><a href="#cb6-18"></a><span class="va">+          [1..9])</span></span>
<span id="cb6-19"><a href="#cb6-19"></a>       Map.empty</span>
<span id="cb6-20"><a href="#cb6-20"></a>   &amp; Map.filter ((&lt; 4) . length)</span>
<span id="cb6-21"><a href="#cb6-21"></a>   &amp; Map.foldlWithKey' (\acc x is -&gt; Map.insertWith prepend is [x] acc) Map.empty</span>
<span id="cb6-22"><a href="#cb6-22"></a>   &amp; Map.filterWithKey (\is xs -&gt; length is == length xs)</span>
<span id="cb6-23"><a href="#cb6-23"></a>   &amp; Map.elems</span>
<span id="cb6-24"><a href="#cb6-24"></a><span class="va">+  &amp; map (Data.List.foldl' Data.Bits.setBit Data.Bits.zeroBits)</span></span>
<span id="cb6-25"><a href="#cb6-25"></a>   where</span>
<span id="cb6-26"><a href="#cb6-26"></a>     prepend ~[y] ys = y:ys</span></code></pre></div>
<p>In the nested folding step, instead of folding over the possible values of the cells, now we fold over the digits from <code>1</code> to <code>9</code> and insert the entry in the map if the bit corresponding to the digit is set in the possibilities. And as the last step, we convert the exclusive possibilities to <code>Word16</code> by folding them, starting with zero. As example in the <em>REPL</em> should be instructive:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> poss <span class="ot">=</span> Data.List.foldl' Data.Bits.setBit Data.Bits.zeroBits</span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> row <span class="ot">=</span> [<span class="dt">Possible</span> <span class="op">$</span> poss [<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">9</span>], <span class="dt">Fixed</span> <span class="op">$</span> poss [<span class="dv">1</span>], <span class="dt">Fixed</span> <span class="op">$</span> poss [<span class="dv">5</span>], <span class="dt">Possible</span> <span class="op">$</span> poss [<span class="dv">6</span>,<span class="dv">9</span>], <span class="dt">Fixed</span> <span class="op">$</span> poss [<span class="dv">7</span>], <span class="dt">Possible</span> <span class="op">$</span> poss [<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">9</span>], <span class="dt">Possible</span> <span class="op">$</span> poss [<span class="dv">6</span>,<span class="dv">9</span>], <span class="dt">Possible</span> <span class="op">$</span> poss [<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">9</span>], <span class="dt">Possible</span> <span class="op">$</span> poss [<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGridWithPossibilities [row]</span>
<span id="cb7-4"><a href="#cb7-4"></a>[   <span class="dv">4</span> <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">1</span>           <span class="dv">5</span>           [     <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">7</span>           [ <span class="dv">23</span>  <span class="dv">6</span> <span class="dv">89</span>] [     <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span> <span class="dv">89</span>] [ <span class="dv">23</span>  <span class="dv">6</span> <span class="dv">89</span>]</span>
<span id="cb7-5"><a href="#cb7-5"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> exclusivePossibilities row</span>
<span id="cb7-6"><a href="#cb7-6"></a>[<span class="dv">16</span>,<span class="dv">268</span>]</span>
<span id="cb7-7"><a href="#cb7-7"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> [poss [<span class="dv">4</span>], poss [<span class="dv">8</span>,<span class="dv">3</span>,<span class="dv">2</span>]]</span>
<span id="cb7-8"><a href="#cb7-8"></a>[<span class="dv">16</span>,<span class="dv">268</span>]</span></code></pre></div>
<p>This is the same example row as the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/#a-little-forward-a-little-backward">last time</a>. And it returns same results, excepts as a list of <code>Word16</code> now.</p>
<p>Now, we change <code>makeCell</code> to use bit operations instead of list ones:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a><span class="ot">makeCell ::</span> <span class="dt">Data.Word.Word16</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cell</span></span>
<span id="cb8-2"><a href="#cb8-2"></a>makeCell ys</span>
<span id="cb8-3"><a href="#cb8-3"></a>  <span class="op">|</span> ys <span class="op">==</span> Data.Bits.zeroBits   <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb8-4"><a href="#cb8-4"></a>  <span class="op">|</span> Data.Bits.popCount ys <span class="op">==</span> <span class="dv">1</span> <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span> <span class="dt">Fixed</span> ys</span>
<span id="cb8-5"><a href="#cb8-5"></a>  <span class="op">|</span> <span class="fu">otherwise</span>                  <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span> <span class="dt">Possible</span> ys</span></code></pre></div>
<p>And we change cell pruning functions too:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb9-1"><a href="#cb9-1"></a> pruneCellsByFixed :: [Cell] -&gt; Maybe [Cell]</span>
<span id="cb9-2"><a href="#cb9-2"></a> pruneCellsByFixed cells = traverse pruneCell cells</span>
<span id="cb9-3"><a href="#cb9-3"></a>   where</span>
<span id="cb9-4"><a href="#cb9-4"></a><span class="st">-    fixeds = [x | Fixed x &lt;- cells]</span></span>
<span id="cb9-5"><a href="#cb9-5"></a><span class="va">+    fixeds = setBits Data.Bits.zeroBits [x | Fixed x &lt;- cells]</span></span>
<span id="cb9-6"><a href="#cb9-6"></a></span>
<span id="cb9-7"><a href="#cb9-7"></a><span class="st">-    pruneCell (Possible xs) = makeCell (xs Data.List.\\ fixeds)</span></span>
<span id="cb9-8"><a href="#cb9-8"></a><span class="va">+    pruneCell (Possible xs) =</span></span>
<span id="cb9-9"><a href="#cb9-9"></a><span class="va">+      makeCell (xs Data.Bits..&amp;. Data.Bits.complement fixeds)</span></span>
<span id="cb9-10"><a href="#cb9-10"></a>     pruneCell x             = Just x</span>
<span id="cb9-11"><a href="#cb9-11"></a></span>
<span id="cb9-12"><a href="#cb9-12"></a> pruneCellsByExclusives :: [Cell] -&gt; Maybe [Cell]</span>
<span id="cb9-13"><a href="#cb9-13"></a> pruneCellsByExclusives cells = case exclusives of</span>
<span id="cb9-14"><a href="#cb9-14"></a>   [] -&gt; Just cells</span>
<span id="cb9-15"><a href="#cb9-15"></a>   _  -&gt; traverse pruneCell cells</span>
<span id="cb9-16"><a href="#cb9-16"></a>   where</span>
<span id="cb9-17"><a href="#cb9-17"></a>     exclusives    = exclusivePossibilities cells</span>
<span id="cb9-18"><a href="#cb9-18"></a><span class="st">-    allExclusives = concat exclusives</span></span>
<span id="cb9-19"><a href="#cb9-19"></a><span class="va">+    allExclusives = setBits Data.Bits.zeroBits exclusives</span></span>
<span id="cb9-20"><a href="#cb9-20"></a></span>
<span id="cb9-21"><a href="#cb9-21"></a>     pruneCell cell@(Fixed _) = Just cell</span>
<span id="cb9-22"><a href="#cb9-22"></a>     pruneCell cell@(Possible xs)</span>
<span id="cb9-23"><a href="#cb9-23"></a>       | intersection `elem` exclusives = makeCell intersection</span>
<span id="cb9-24"><a href="#cb9-24"></a>       | otherwise                      = Just cell</span>
<span id="cb9-25"><a href="#cb9-25"></a>       where</span>
<span id="cb9-26"><a href="#cb9-26"></a><span class="st">-        intersection = xs `Data.List.intersect` allExclusives</span></span>
<span id="cb9-27"><a href="#cb9-27"></a><span class="va">+        intersection = xs Data.Bits..&amp;. allExclusives</span></span></code></pre></div>
<p>Notice how the list difference and intersection functions are replaced by <code>Data.Bits</code> functions. Specifically, list difference is replace by bitwise-and of the bitwise-complement, and list intersection is replaced by bitwise-and.</p>
<p>We make a one-line change in the <code>isGridInvalid</code> function to find empty possible cells using bit ops:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb10-1"><a href="#cb10-1"></a> isGridInvalid :: Grid -&gt; Bool</span>
<span id="cb10-2"><a href="#cb10-2"></a> isGridInvalid grid =</span>
<span id="cb10-3"><a href="#cb10-3"></a>   any isInvalidRow grid</span>
<span id="cb10-4"><a href="#cb10-4"></a>   || any isInvalidRow (Data.List.transpose grid)</span>
<span id="cb10-5"><a href="#cb10-5"></a>   || any isInvalidRow (subGridsToRows grid)</span>
<span id="cb10-6"><a href="#cb10-6"></a>   where</span>
<span id="cb10-7"><a href="#cb10-7"></a>     isInvalidRow row =</span>
<span id="cb10-8"><a href="#cb10-8"></a>       let fixeds         = [x | Fixed x &lt;- row]</span>
<span id="cb10-9"><a href="#cb10-9"></a><span class="st">-          emptyPossibles = [x | Possible x &lt;- row, null x]</span></span>
<span id="cb10-10"><a href="#cb10-10"></a><span class="va">+          emptyPossibles = [() | Possible x &lt;- row, x == Data.Bits.zeroBits]</span></span>
<span id="cb10-11"><a href="#cb10-11"></a>       in hasDups fixeds || not (null emptyPossibles)</span>
<span id="cb10-12"><a href="#cb10-12"></a></span>
<span id="cb10-13"><a href="#cb10-13"></a>     hasDups l = hasDups' l []</span>
<span id="cb10-14"><a href="#cb10-14"></a></span>
<span id="cb10-15"><a href="#cb10-15"></a>     hasDups' [] _ = False</span>
<span id="cb10-16"><a href="#cb10-16"></a>     hasDups' (y:ys) xs</span>
<span id="cb10-17"><a href="#cb10-17"></a>       | y `elem` xs = True</span>
<span id="cb10-18"><a href="#cb10-18"></a>       | otherwise   = hasDups' ys (y:xs)</span></code></pre></div>
<p>And finally, we change the <code>nextGrids</code> functions to use bit operations:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1"></a><span class="ot">nextGrids ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> (<span class="dt">Grid</span>, <span class="dt">Grid</span>)</span>
<span id="cb11-2"><a href="#cb11-2"></a>nextGrids grid <span class="ot">=</span></span>
<span id="cb11-3"><a href="#cb11-3"></a>  <span class="kw">let</span> (i, first<span class="op">@</span>(<span class="dt">Fixed</span> _), rest) <span class="ot">=</span></span>
<span id="cb11-4"><a href="#cb11-4"></a>        fixCell</span>
<span id="cb11-5"><a href="#cb11-5"></a>        <span class="op">.</span> Data.List.minimumBy (<span class="fu">compare</span> <span class="ot">`Data.Function.on`</span> (possibilityCount <span class="op">.</span> <span class="fu">snd</span>))</span>
<span id="cb11-6"><a href="#cb11-6"></a>        <span class="op">.</span> <span class="fu">filter</span> (isPossible <span class="op">.</span> <span class="fu">snd</span>)</span>
<span id="cb11-7"><a href="#cb11-7"></a>        <span class="op">.</span> <span class="fu">zip</span> [<span class="dv">0</span><span class="op">..</span>]</span>
<span id="cb11-8"><a href="#cb11-8"></a>        <span class="op">.</span> <span class="fu">concat</span></span>
<span id="cb11-9"><a href="#cb11-9"></a>        <span class="op">$</span> grid</span>
<span id="cb11-10"><a href="#cb11-10"></a>  <span class="kw">in</span> (replace2D i first grid, replace2D i rest grid)</span>
<span id="cb11-11"><a href="#cb11-11"></a>  <span class="kw">where</span></span>
<span id="cb11-12"><a href="#cb11-12"></a>    possibilityCount (<span class="dt">Possible</span> xs) <span class="ot">=</span> Data.Bits.popCount xs</span>
<span id="cb11-13"><a href="#cb11-13"></a>    possibilityCount (<span class="dt">Fixed</span> _)     <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb11-14"><a href="#cb11-14"></a></span>
<span id="cb11-15"><a href="#cb11-15"></a>    fixCell <span class="op">~</span>(i, <span class="dt">Possible</span> xs) <span class="ot">=</span></span>
<span id="cb11-16"><a href="#cb11-16"></a>      <span class="kw">let</span> x <span class="ot">=</span> Data.Bits.countTrailingZeros xs</span>
<span id="cb11-17"><a href="#cb11-17"></a>      <span class="kw">in</span> <span class="kw">case</span> makeCell (Data.Bits.clearBit xs x) <span class="kw">of</span></span>
<span id="cb11-18"><a href="#cb11-18"></a>        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">error</span> <span class="st">&quot;Impossible case&quot;</span></span>
<span id="cb11-19"><a href="#cb11-19"></a>        <span class="dt">Just</span> cell <span class="ot">-&gt;</span> (i, <span class="dt">Fixed</span> (Data.Bits.bit x), cell)</span>
<span id="cb11-20"><a href="#cb11-20"></a></span>
<span id="cb11-21"><a href="#cb11-21"></a><span class="ot">    replace2D ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> [[a]] <span class="ot">-&gt;</span> [[a]]</span>
<span id="cb11-22"><a href="#cb11-22"></a>    replace2D i v <span class="ot">=</span></span>
<span id="cb11-23"><a href="#cb11-23"></a>      <span class="kw">let</span> (x, y) <span class="ot">=</span> (i <span class="ot">`quot`</span> <span class="dv">9</span>, i <span class="ot">`mod`</span> <span class="dv">9</span>) <span class="kw">in</span> replace x (replace y (<span class="fu">const</span> v))</span>
<span id="cb11-24"><a href="#cb11-24"></a>    replace p f xs <span class="ot">=</span> [<span class="kw">if</span> i <span class="op">==</span> p <span class="kw">then</span> f x <span class="kw">else</span> x <span class="op">|</span> (x, i) <span class="ot">&lt;-</span> <span class="fu">zip</span> xs [<span class="dv">0</span><span class="op">..</span>]]</span></code></pre></div>
<p><code>possibilityCount</code> now uses <code>Data.Bits.popCount</code> to count the number of bits set to 1. <code>fixCell</code> now chooses the first set bit from right as the digit to fix. Rest of the code stays the same. Let’s build and run it:</p>
<pre class="plain"><code>$ stack build
$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
       69.44 real        69.12 user         0.37 sys</code></pre>
<p>Wow! That is almost 3.7x faster than the previous solution. It’s a massive win! But let’s not be content yet. To the profiler again!<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></p>
<h2 id="back-to-the-profiler" data-track-content data-content-name="back-to-the-profiler" data-content-piece="fast-sudoku-solver-in-haskell-3">Back to the Profiler<a href="#back-to-the-profiler" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Running the profiler again gives us these top six culprits:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Centre</th>
<th style="text-align: left;">Src</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities</code></td>
<td style="text-align: left;">Sudoku.hs:(57,1)-(74,26)</td>
<td style="text-align: right;">25.2</td>
<td style="text-align: right;">16.6</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>exclusivePossibilities.\.\</code></td>
<td style="text-align: left;">Sudoku.hs:64:23-96</td>
<td style="text-align: right;">19.0</td>
<td style="text-align: right;">32.8</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>fixM.\</code></td>
<td style="text-align: left;">Sudoku.hs:15:27-65</td>
<td style="text-align: right;">12.5</td>
<td style="text-align: right;">0.1</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCellsByFixed</code></td>
<td style="text-align: left;">Sudoku.hs:(83,1)-(88,36)</td>
<td style="text-align: right;">5.9</td>
<td style="text-align: right;">7.1</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pruneGrid'</code></td>
<td style="text-align: left;">Sudoku.hs:(115,1)-(118,64)</td>
<td style="text-align: right;">5.0</td>
<td style="text-align: right;">8.6</td>
</tr>
</tbody>
</table>
</div>
<p>Hurray! <code>pruneCellsByFixed.pruneCell</code> has disappeared from the list of top bottlenecks. Though <code>exclusivePossibilities</code> still remains here as expected.</p>
<p><code>exclusivePossibilities</code> is a big function. The profiler does not really tell us which parts of it are the slow ones. That’s because by default, the profiler only considers functions as <em>Cost Centres</em>. We need to give it hints for it to be able to find bottlenecks inside functions. For that, we need to insert <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html#inserting-cost-centres-by-hand" target="_blank" rel="noopener"><em>Cost Centre</em> annotations</a> in the code:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1"></a><span class="ot">exclusivePossibilities ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> [<span class="dt">Data.Word.Word16</span>]</span>
<span id="cb13-2"><a href="#cb13-2"></a>exclusivePossibilities row <span class="ot">=</span></span>
<span id="cb13-3"><a href="#cb13-3"></a>  row</span>
<span id="cb13-4"><a href="#cb13-4"></a>  <span class="op">&amp;</span> (<span class="ot">{-# SCC &quot;EP.zip&quot; #-}</span> <span class="fu">zip</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">9</span>])</span>
<span id="cb13-5"><a href="#cb13-5"></a>  <span class="op">&amp;</span> (<span class="ot">{-# SCC &quot;EP.filter&quot; #-}</span> <span class="fu">filter</span> (isPossible <span class="op">.</span> <span class="fu">snd</span>))</span>
<span id="cb13-6"><a href="#cb13-6"></a>  <span class="op">&amp;</span> (<span class="ot">{-# SCC &quot;EP.foldl&quot; #-}</span> Data.List.foldl'</span>
<span id="cb13-7"><a href="#cb13-7"></a>      (\acc <span class="op">~</span>(i, <span class="dt">Possible</span> xs) <span class="ot">-&gt;</span></span>
<span id="cb13-8"><a href="#cb13-8"></a>        Data.List.foldl'</span>
<span id="cb13-9"><a href="#cb13-9"></a>          (\acc' n <span class="ot">-&gt;</span> <span class="kw">if</span> Data.Bits.testBit xs n</span>
<span id="cb13-10"><a href="#cb13-10"></a>                      <span class="kw">then</span> Map.insertWith prepend n [i] acc'</span>
<span id="cb13-11"><a href="#cb13-11"></a>                      <span class="kw">else</span> acc')</span>
<span id="cb13-12"><a href="#cb13-12"></a>          acc</span>
<span id="cb13-13"><a href="#cb13-13"></a>          [<span class="dv">1</span><span class="op">..</span><span class="dv">9</span>])</span>
<span id="cb13-14"><a href="#cb13-14"></a>      Map.empty)</span>
<span id="cb13-15"><a href="#cb13-15"></a>  <span class="op">&amp;</span> (<span class="ot">{-# SCC &quot;EP.Map.filter1&quot; #-}</span> Map.filter ((<span class="op">&lt;</span> <span class="dv">4</span>) <span class="op">.</span> <span class="fu">length</span>))</span>
<span id="cb13-16"><a href="#cb13-16"></a>  <span class="op">&amp;</span> (<span class="ot">{-# SCC &quot;EP.Map.foldl&quot; #-}</span></span>
<span id="cb13-17"><a href="#cb13-17"></a>       Map.foldlWithKey'</span>
<span id="cb13-18"><a href="#cb13-18"></a>         (\acc x is <span class="ot">-&gt;</span> Map.insertWith prepend is [x] acc)</span>
<span id="cb13-19"><a href="#cb13-19"></a>         Map.empty)</span>
<span id="cb13-20"><a href="#cb13-20"></a>  <span class="op">&amp;</span> (<span class="ot">{-# SCC &quot;EP.Map.filter2&quot; #-}</span></span>
<span id="cb13-21"><a href="#cb13-21"></a>       Map.filterWithKey (\is xs <span class="ot">-&gt;</span> <span class="fu">length</span> is <span class="op">==</span> <span class="fu">length</span> xs))</span>
<span id="cb13-22"><a href="#cb13-22"></a>  <span class="op">&amp;</span> (<span class="ot">{-# SCC &quot;EP.Map.elems&quot; #-}</span> Map.elems)</span>
<span id="cb13-23"><a href="#cb13-23"></a>  <span class="op">&amp;</span> (<span class="ot">{-# SCC &quot;EP.map&quot; #-}</span></span>
<span id="cb13-24"><a href="#cb13-24"></a>       <span class="fu">map</span> (Data.List.foldl' Data.Bits.setBit Data.Bits.zeroBits))</span>
<span id="cb13-25"><a href="#cb13-25"></a>  <span class="kw">where</span></span>
<span id="cb13-26"><a href="#cb13-26"></a>    prepend <span class="op">~</span>[y] ys <span class="ot">=</span> y<span class="op">:</span>ys</span></code></pre></div>
<p>Here, <code>{-# SCC "EP.zip" #-}</code> is a <em>Cost Centre</em> annotation. <code>"EP.zip"</code> is the name we choose to give to this <em>Cost Centre</em>.</p>
<p>After profiling the code again, we get a different list of bottlenecks:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Centre</th>
<th style="text-align: left;">Src</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities.\.\</code></td>
<td style="text-align: left;">Sudoku.hs:(64,23)-(66,31)</td>
<td style="text-align: right;">19.5</td>
<td style="text-align: right;">31.4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>fixM.\</code></td>
<td style="text-align: left;">Sudoku.hs:15:27-65</td>
<td style="text-align: right;">13.1</td>
<td style="text-align: right;">0.1</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pruneCellsByFixed</code></td>
<td style="text-align: left;">Sudoku.hs:(85,1)-(90,36)</td>
<td style="text-align: right;">5.4</td>
<td style="text-align: right;">6.8</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneGrid'</code></td>
<td style="text-align: left;">Sudoku.hs:(117,1)-(120,64)</td>
<td style="text-align: right;">4.8</td>
<td style="text-align: right;">8.3</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>EP.zip</code></td>
<td style="text-align: left;">Sudoku.hs:59:27-36</td>
<td style="text-align: right;">4.3</td>
<td style="text-align: right;">10.7</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>EP.Map.filter1</code></td>
<td style="text-align: left;">Sudoku.hs:70:35-61</td>
<td style="text-align: right;">4.2</td>
<td style="text-align: right;">0.5</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>chunksOf</code></td>
<td style="text-align: left;">Data/List/Split/Internals.hs:(514,1)-(517,49)</td>
<td style="text-align: right;">4.1</td>
<td style="text-align: right;">7.4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>exclusivePossibilities.\</code></td>
<td style="text-align: left;">Sudoku.hs:71:64-96</td>
<td style="text-align: right;">4.0</td>
<td style="text-align: right;">3.4</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>EP.filter</code></td>
<td style="text-align: left;">Sudoku.hs:60:30-54</td>
<td style="text-align: right;">2.9</td>
<td style="text-align: right;">3.4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>EP.foldl</code></td>
<td style="text-align: left;">Sudoku.hs:(61,29)-(69,15)</td>
<td style="text-align: right;">2.8</td>
<td style="text-align: right;">1.8</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities</code></td>
<td style="text-align: left;">Sudoku.hs:(57,1)-(76,26)</td>
<td style="text-align: right;">2.7</td>
<td style="text-align: right;">1.9</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>chunksOf.splitter</code></td>
<td style="text-align: left;">Data/List/Split/Internals.hs:(516,3)-(517,49)</td>
<td style="text-align: right;">2.5</td>
<td style="text-align: right;">2.7</td>
</tr>
</tbody>
</table>
</div>
<p>So almost one-fifth of the time is actually going in this nested one-line anonymous function inside <code>exclusivePossibilities</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1"></a>(\acc' n <span class="ot">-&gt;</span></span>
<span id="cb14-2"><a href="#cb14-2"></a>    <span class="kw">if</span> Data.Bits.testBit xs n <span class="kw">then</span> Map.insertWith prepend n [i] acc' <span class="kw">else</span> acc')</span></code></pre></div>
<p>But we are going to ignore it for now.</p>
<p>If we look closely, we also find that around 17% of the run time now goes into list traversal and manipulation. This is in the functions <code>pruneCellsByFixed</code>, <code>pruneGrid'</code>, <code>chunksOf</code> and <code>chunksOf.splitter</code>, where the first two are majorly list traversal and transposition, and the last two are list splitting. Maybe it is time to get rid of lists altogether?</p>
<h2 id="vectors-of-speed" data-track-content data-content-name="vectors-of-speed" data-content-piece="fast-sudoku-solver-in-haskell-3">Vectors of Speed<a href="#vectors-of-speed" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p><a href="https://hackage.haskell.org/package/vector-0.12.0.1" target="_blank" rel="noopener">Vector</a> is a Haskell library for working with arrays. It implements very performant operations for integer-indexed array data. Unlike the lists in Haskell which are implemented as <a href="https://en.wikipedia.org/wiki/Linked_list#Singly_linked_list" target="_blank" rel="noopener">singly linked lists</a>, vectors are stored in a contiguous set of memory locations. This makes random access to the elements a constant time operation. The memory overhead per additional item in vectors is also much smaller. Lists allocate memory for each item in the heap and have pointers to the memory locations in nodes, leading to a lot of wasted memory in holding pointers. On the other hand, operations on lists are lazy, whereas, operations on vectors are strict, and this may need to useless computation depending on the use-case<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>.</p>
<p>In our current code, we represent the grid as a list of lists of cells. All the pruning operations require us to traverse the grid list or the row lists. We also need to transform the grid back-and-forth for being able to use the same pruning operations for rows, columns and sub-grids. The pruning of cells and the choosing of pivot cells also requires us to replace cells in the grid with new ones, leading to a lot of list traversals.</p>
<p>To prevent all this linear-time list traversals, we can replace the nested list of lists with a single vector. Then all we need to do it to go over the right parts of this vector, looking up and replacing cells as needed. Since both lookups and updates on vectors are constant time, this should lead to a speedup.</p>
<p>Let’s start by changing the grid to a vector of cells.:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1"></a><span class="kw">data</span> <span class="dt">Cell</span> <span class="ot">=</span> <span class="dt">Fixed</span> <span class="dt">Data.Word.Word16</span></span>
<span id="cb15-2"><a href="#cb15-2"></a>          <span class="op">|</span> <span class="dt">Possible</span> <span class="dt">Data.Word.Word16</span></span>
<span id="cb15-3"><a href="#cb15-3"></a>          <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb15-4"><a href="#cb15-4"></a></span>
<span id="cb15-5"><a href="#cb15-5"></a><span class="kw">type</span> <span class="dt">Grid</span> <span class="ot">=</span> <span class="dt">Data.Vector.Vector</span> <span class="dt">Cell</span></span></code></pre></div>
<p>Since we plan to traverse different parts of the same vector, let’s define these different parts first:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1"></a><span class="kw">type</span> <span class="dt">CellIxs</span> <span class="ot">=</span> [<span class="dt">Int</span>]</span>
<span id="cb16-2"><a href="#cb16-2"></a></span>
<span id="cb16-3"><a href="#cb16-3"></a><span class="ot">fromXY ::</span> (<span class="dt">Int</span>, <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb16-4"><a href="#cb16-4"></a>fromXY (x, y) <span class="ot">=</span> x <span class="op">*</span> <span class="dv">9</span> <span class="op">+</span> y</span>
<span id="cb16-5"><a href="#cb16-5"></a></span>
<span id="cb16-6"><a href="#cb16-6"></a>allRowIxs, allColIxs,<span class="ot"> allSubGridIxs ::</span> [<span class="dt">CellIxs</span>]</span>
<span id="cb16-7"><a href="#cb16-7"></a>allRowIxs <span class="ot">=</span> [getRow i <span class="op">|</span> i <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="op">..</span><span class="dv">8</span>]]</span>
<span id="cb16-8"><a href="#cb16-8"></a>  <span class="kw">where</span> getRow n <span class="ot">=</span> [ fromXY (n, i) <span class="op">|</span> i <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="op">..</span><span class="dv">8</span>] ]</span>
<span id="cb16-9"><a href="#cb16-9"></a></span>
<span id="cb16-10"><a href="#cb16-10"></a>allColIxs <span class="ot">=</span> [getCol i <span class="op">|</span> i <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="op">..</span><span class="dv">8</span>]]</span>
<span id="cb16-11"><a href="#cb16-11"></a>  <span class="kw">where</span> getCol n <span class="ot">=</span> [ fromXY (i, n) <span class="op">|</span> i <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="op">..</span><span class="dv">8</span>] ]</span>
<span id="cb16-12"><a href="#cb16-12"></a></span>
<span id="cb16-13"><a href="#cb16-13"></a>allSubGridIxs <span class="ot">=</span> [getSubGrid i <span class="op">|</span> i <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="op">..</span><span class="dv">8</span>]]</span>
<span id="cb16-14"><a href="#cb16-14"></a>  <span class="kw">where</span> getSubGrid n <span class="ot">=</span> <span class="kw">let</span> (r, c) <span class="ot">=</span> (n <span class="ot">`quot`</span> <span class="dv">3</span>, n <span class="ot">`mod`</span> <span class="dv">3</span>)</span>
<span id="cb16-15"><a href="#cb16-15"></a>          <span class="kw">in</span> [ fromXY (<span class="dv">3</span> <span class="op">*</span> r <span class="op">+</span> i, <span class="dv">3</span> <span class="op">*</span> c <span class="op">+</span> j) <span class="op">|</span> i <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="op">..</span><span class="dv">2</span>], j <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="op">..</span><span class="dv">2</span>] ]</span></code></pre></div>
<p>We define a type for cell indices as a list of integers. Then we create three lists of cell indices: all row indices, all column indices, and all sub-grid indices. Let’s check these out in the <em>REPL</em>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> Control.Monad.mapM_ <span class="fu">print</span> allRowIxs</span>
<span id="cb17-2"><a href="#cb17-2"></a>[<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>]</span>
<span id="cb17-3"><a href="#cb17-3"></a>[<span class="dv">9</span>,<span class="dv">10</span>,<span class="dv">11</span>,<span class="dv">12</span>,<span class="dv">13</span>,<span class="dv">14</span>,<span class="dv">15</span>,<span class="dv">16</span>,<span class="dv">17</span>]</span>
<span id="cb17-4"><a href="#cb17-4"></a>[<span class="dv">18</span>,<span class="dv">19</span>,<span class="dv">20</span>,<span class="dv">21</span>,<span class="dv">22</span>,<span class="dv">23</span>,<span class="dv">24</span>,<span class="dv">25</span>,<span class="dv">26</span>]</span>
<span id="cb17-5"><a href="#cb17-5"></a>[<span class="dv">27</span>,<span class="dv">28</span>,<span class="dv">29</span>,<span class="dv">30</span>,<span class="dv">31</span>,<span class="dv">32</span>,<span class="dv">33</span>,<span class="dv">34</span>,<span class="dv">35</span>]</span>
<span id="cb17-6"><a href="#cb17-6"></a>[<span class="dv">36</span>,<span class="dv">37</span>,<span class="dv">38</span>,<span class="dv">39</span>,<span class="dv">40</span>,<span class="dv">41</span>,<span class="dv">42</span>,<span class="dv">43</span>,<span class="dv">44</span>]</span>
<span id="cb17-7"><a href="#cb17-7"></a>[<span class="dv">45</span>,<span class="dv">46</span>,<span class="dv">47</span>,<span class="dv">48</span>,<span class="dv">49</span>,<span class="dv">50</span>,<span class="dv">51</span>,<span class="dv">52</span>,<span class="dv">53</span>]</span>
<span id="cb17-8"><a href="#cb17-8"></a>[<span class="dv">54</span>,<span class="dv">55</span>,<span class="dv">56</span>,<span class="dv">57</span>,<span class="dv">58</span>,<span class="dv">59</span>,<span class="dv">60</span>,<span class="dv">61</span>,<span class="dv">62</span>]</span>
<span id="cb17-9"><a href="#cb17-9"></a>[<span class="dv">63</span>,<span class="dv">64</span>,<span class="dv">65</span>,<span class="dv">66</span>,<span class="dv">67</span>,<span class="dv">68</span>,<span class="dv">69</span>,<span class="dv">70</span>,<span class="dv">71</span>]</span>
<span id="cb17-10"><a href="#cb17-10"></a>[<span class="dv">72</span>,<span class="dv">73</span>,<span class="dv">74</span>,<span class="dv">75</span>,<span class="dv">76</span>,<span class="dv">77</span>,<span class="dv">78</span>,<span class="dv">79</span>,<span class="dv">80</span>]</span>
<span id="cb17-11"><a href="#cb17-11"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> Control.Monad.mapM_ <span class="fu">print</span> allColIxs</span>
<span id="cb17-12"><a href="#cb17-12"></a>[<span class="dv">0</span>,<span class="dv">9</span>,<span class="dv">18</span>,<span class="dv">27</span>,<span class="dv">36</span>,<span class="dv">45</span>,<span class="dv">54</span>,<span class="dv">63</span>,<span class="dv">72</span>]</span>
<span id="cb17-13"><a href="#cb17-13"></a>[<span class="dv">1</span>,<span class="dv">10</span>,<span class="dv">19</span>,<span class="dv">28</span>,<span class="dv">37</span>,<span class="dv">46</span>,<span class="dv">55</span>,<span class="dv">64</span>,<span class="dv">73</span>]</span>
<span id="cb17-14"><a href="#cb17-14"></a>[<span class="dv">2</span>,<span class="dv">11</span>,<span class="dv">20</span>,<span class="dv">29</span>,<span class="dv">38</span>,<span class="dv">47</span>,<span class="dv">56</span>,<span class="dv">65</span>,<span class="dv">74</span>]</span>
<span id="cb17-15"><a href="#cb17-15"></a>[<span class="dv">3</span>,<span class="dv">12</span>,<span class="dv">21</span>,<span class="dv">30</span>,<span class="dv">39</span>,<span class="dv">48</span>,<span class="dv">57</span>,<span class="dv">66</span>,<span class="dv">75</span>]</span>
<span id="cb17-16"><a href="#cb17-16"></a>[<span class="dv">4</span>,<span class="dv">13</span>,<span class="dv">22</span>,<span class="dv">31</span>,<span class="dv">40</span>,<span class="dv">49</span>,<span class="dv">58</span>,<span class="dv">67</span>,<span class="dv">76</span>]</span>
<span id="cb17-17"><a href="#cb17-17"></a>[<span class="dv">5</span>,<span class="dv">14</span>,<span class="dv">23</span>,<span class="dv">32</span>,<span class="dv">41</span>,<span class="dv">50</span>,<span class="dv">59</span>,<span class="dv">68</span>,<span class="dv">77</span>]</span>
<span id="cb17-18"><a href="#cb17-18"></a>[<span class="dv">6</span>,<span class="dv">15</span>,<span class="dv">24</span>,<span class="dv">33</span>,<span class="dv">42</span>,<span class="dv">51</span>,<span class="dv">60</span>,<span class="dv">69</span>,<span class="dv">78</span>]</span>
<span id="cb17-19"><a href="#cb17-19"></a>[<span class="dv">7</span>,<span class="dv">16</span>,<span class="dv">25</span>,<span class="dv">34</span>,<span class="dv">43</span>,<span class="dv">52</span>,<span class="dv">61</span>,<span class="dv">70</span>,<span class="dv">79</span>]</span>
<span id="cb17-20"><a href="#cb17-20"></a>[<span class="dv">8</span>,<span class="dv">17</span>,<span class="dv">26</span>,<span class="dv">35</span>,<span class="dv">44</span>,<span class="dv">53</span>,<span class="dv">62</span>,<span class="dv">71</span>,<span class="dv">80</span>]</span>
<span id="cb17-21"><a href="#cb17-21"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> Control.Monad.mapM_ <span class="fu">print</span> allSubGridIxs</span>
<span id="cb17-22"><a href="#cb17-22"></a>[<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">9</span>,<span class="dv">10</span>,<span class="dv">11</span>,<span class="dv">18</span>,<span class="dv">19</span>,<span class="dv">20</span>]</span>
<span id="cb17-23"><a href="#cb17-23"></a>[<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">12</span>,<span class="dv">13</span>,<span class="dv">14</span>,<span class="dv">21</span>,<span class="dv">22</span>,<span class="dv">23</span>]</span>
<span id="cb17-24"><a href="#cb17-24"></a>[<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">15</span>,<span class="dv">16</span>,<span class="dv">17</span>,<span class="dv">24</span>,<span class="dv">25</span>,<span class="dv">26</span>]</span>
<span id="cb17-25"><a href="#cb17-25"></a>[<span class="dv">27</span>,<span class="dv">28</span>,<span class="dv">29</span>,<span class="dv">36</span>,<span class="dv">37</span>,<span class="dv">38</span>,<span class="dv">45</span>,<span class="dv">46</span>,<span class="dv">47</span>]</span>
<span id="cb17-26"><a href="#cb17-26"></a>[<span class="dv">30</span>,<span class="dv">31</span>,<span class="dv">32</span>,<span class="dv">39</span>,<span class="dv">40</span>,<span class="dv">41</span>,<span class="dv">48</span>,<span class="dv">49</span>,<span class="dv">50</span>]</span>
<span id="cb17-27"><a href="#cb17-27"></a>[<span class="dv">33</span>,<span class="dv">34</span>,<span class="dv">35</span>,<span class="dv">42</span>,<span class="dv">43</span>,<span class="dv">44</span>,<span class="dv">51</span>,<span class="dv">52</span>,<span class="dv">53</span>]</span>
<span id="cb17-28"><a href="#cb17-28"></a>[<span class="dv">54</span>,<span class="dv">55</span>,<span class="dv">56</span>,<span class="dv">63</span>,<span class="dv">64</span>,<span class="dv">65</span>,<span class="dv">72</span>,<span class="dv">73</span>,<span class="dv">74</span>]</span>
<span id="cb17-29"><a href="#cb17-29"></a>[<span class="dv">57</span>,<span class="dv">58</span>,<span class="dv">59</span>,<span class="dv">66</span>,<span class="dv">67</span>,<span class="dv">68</span>,<span class="dv">75</span>,<span class="dv">76</span>,<span class="dv">77</span>]</span>
<span id="cb17-30"><a href="#cb17-30"></a>[<span class="dv">60</span>,<span class="dv">61</span>,<span class="dv">62</span>,<span class="dv">69</span>,<span class="dv">70</span>,<span class="dv">71</span>,<span class="dv">78</span>,<span class="dv">79</span>,<span class="dv">80</span>]</span></code></pre></div>
<p>We can verify manually that these indices are correct.</p>
<p>Read and show functions are easy to change for vector:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb18-1"><a href="#cb18-1"></a> readGrid :: String -&gt; Maybe Grid</span>
<span id="cb18-2"><a href="#cb18-2"></a> readGrid s</span>
<span id="cb18-3"><a href="#cb18-3"></a><span class="st">-  | length s == 81 = traverse (traverse readCell) . Data.List.Split.chunksOf 9 $ s</span></span>
<span id="cb18-4"><a href="#cb18-4"></a><span class="va">+  | length s == 81 = Data.Vector.fromList &lt;$&gt; traverse readCell s</span></span>
<span id="cb18-5"><a href="#cb18-5"></a>   | otherwise      = Nothing</span>
<span id="cb18-6"><a href="#cb18-6"></a>   where</span>
<span id="cb18-7"><a href="#cb18-7"></a>     allBitsSet = 1022</span>
<span id="cb18-8"><a href="#cb18-8"></a></span>
<span id="cb18-9"><a href="#cb18-9"></a>     readCell '.' = Just $ Possible allBitsSet</span>
<span id="cb18-10"><a href="#cb18-10"></a>     readCell c</span>
<span id="cb18-11"><a href="#cb18-11"></a>       | Data.Char.isDigit c &amp;&amp; c &gt; '0' =</span>
<span id="cb18-12"><a href="#cb18-12"></a>           Just . Fixed . Data.Bits.bit . Data.Char.digitToInt $ c</span>
<span id="cb18-13"><a href="#cb18-13"></a>       | otherwise = Nothing</span>
<span id="cb18-14"><a href="#cb18-14"></a></span>
<span id="cb18-15"><a href="#cb18-15"></a> showGrid :: Grid -&gt; String</span>
<span id="cb18-16"><a href="#cb18-16"></a><span class="st">-showGrid = unlines . map (unwords . map showCell)</span></span>
<span id="cb18-17"><a href="#cb18-17"></a><span class="va">+showGrid grid =</span></span>
<span id="cb18-18"><a href="#cb18-18"></a><span class="va">+  unlines . map (unwords . map (showCell . (grid !))) $ allRowIxs</span></span>
<span id="cb18-19"><a href="#cb18-19"></a>   where</span>
<span id="cb18-20"><a href="#cb18-20"></a>     showCell (Fixed x) = show . Data.Bits.countTrailingZeros $ x</span>
<span id="cb18-21"><a href="#cb18-21"></a>     showCell _         = &quot;.&quot;</span>
<span id="cb18-22"><a href="#cb18-22"></a></span>
<span id="cb18-23"><a href="#cb18-23"></a> showGridWithPossibilities :: Grid -&gt; String</span>
<span id="cb18-24"><a href="#cb18-24"></a><span class="st">-showGridWithPossibilities = unlines . map (unwords . map showCell)</span></span>
<span id="cb18-25"><a href="#cb18-25"></a><span class="va">+showGridWithPossibilities grid =</span></span>
<span id="cb18-26"><a href="#cb18-26"></a><span class="va">+  unlines . map (unwords . map (showCell . (grid !))) $ allRowIxs</span></span>
<span id="cb18-27"><a href="#cb18-27"></a>   where</span>
<span id="cb18-28"><a href="#cb18-28"></a>     showCell (Fixed x) = (show . Data.Bits.countTrailingZeros $ x) ++ &quot;          &quot;</span>
<span id="cb18-29"><a href="#cb18-29"></a>     showCell (Possible xs) =</span>
<span id="cb18-30"><a href="#cb18-30"></a>       &quot;[&quot; ++</span>
<span id="cb18-31"><a href="#cb18-31"></a>       map (\i -&gt; if Data.Bits.testBit xs i</span>
<span id="cb18-32"><a href="#cb18-32"></a>                  then Data.Char.intToDigit i</span>
<span id="cb18-33"><a href="#cb18-33"></a>                  else ' ')</span>
<span id="cb18-34"><a href="#cb18-34"></a>           [1..9]</span>
<span id="cb18-35"><a href="#cb18-35"></a>       ++ &quot;]&quot;</span></code></pre></div>
<p><code>readGrid</code> simply changes to work on a single vector of cells instead of a list of lists. Show functions have a pretty minor change to do lookups from a vector using the row indices and the <a href="https://hackage.haskell.org/package/vector-0.12.0.1/docs/Data-Vector.html#v:-33-" target="_blank" rel="noopener"><code>(!)</code></a> function. The <code>(!)</code> function is the vector indexing function which is similar to the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Prelude.html#v:-33--33-" target="_blank" rel="noopener"><code>(!!)</code></a> function, except it executes in constant time.</p>
<p>The pruning related functions are rewritten for working with vectors:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1"></a><span class="ot">replaceCell ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Grid</span></span>
<span id="cb19-2"><a href="#cb19-2"></a>replaceCell i c g <span class="ot">=</span> g <span class="op">Data.Vector.//</span> [(i, c)]</span>
<span id="cb19-3"><a href="#cb19-3"></a></span>
<span id="cb19-4"><a href="#cb19-4"></a><span class="ot">pruneCellsByFixed ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">CellIxs</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></span>
<span id="cb19-5"><a href="#cb19-5"></a>pruneCellsByFixed grid cellIxs <span class="ot">=</span></span>
<span id="cb19-6"><a href="#cb19-6"></a>  Control.Monad.foldM pruneCell grid <span class="op">.</span> <span class="fu">map</span> (\i <span class="ot">-&gt;</span> (i, grid <span class="op">!</span> i)) <span class="op">$</span> cellIxs</span>
<span id="cb19-7"><a href="#cb19-7"></a>  <span class="kw">where</span></span>
<span id="cb19-8"><a href="#cb19-8"></a>    fixeds <span class="ot">=</span> setBits Data.Bits.zeroBits [x <span class="op">|</span> <span class="dt">Fixed</span> x <span class="ot">&lt;-</span> <span class="fu">map</span> (grid <span class="op">!</span>) cellIxs]</span>
<span id="cb19-9"><a href="#cb19-9"></a></span>
<span id="cb19-10"><a href="#cb19-10"></a>    pruneCell g (_, <span class="dt">Fixed</span> _) <span class="ot">=</span> <span class="dt">Just</span> g</span>
<span id="cb19-11"><a href="#cb19-11"></a>    pruneCell g (i, <span class="dt">Possible</span> xs)</span>
<span id="cb19-12"><a href="#cb19-12"></a>      <span class="op">|</span> xs' <span class="op">==</span> xs <span class="ot">=</span> <span class="dt">Just</span> g</span>
<span id="cb19-13"><a href="#cb19-13"></a>      <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="fu">flip</span> (replaceCell i) g <span class="op">&lt;$&gt;</span> makeCell xs'</span>
<span id="cb19-14"><a href="#cb19-14"></a>      <span class="kw">where</span></span>
<span id="cb19-15"><a href="#cb19-15"></a>        xs' <span class="ot">=</span> xs <span class="op">Data.Bits..&amp;.</span> Data.Bits.complement fixeds</span>
<span id="cb19-16"><a href="#cb19-16"></a></span>
<span id="cb19-17"><a href="#cb19-17"></a><span class="ot">pruneCellsByExclusives ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">CellIxs</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></span>
<span id="cb19-18"><a href="#cb19-18"></a>pruneCellsByExclusives grid cellIxs <span class="ot">=</span> <span class="kw">case</span> exclusives <span class="kw">of</span></span>
<span id="cb19-19"><a href="#cb19-19"></a>  [] <span class="ot">-&gt;</span> <span class="dt">Just</span> grid</span>
<span id="cb19-20"><a href="#cb19-20"></a>  _  <span class="ot">-&gt;</span> Control.Monad.foldM pruneCell grid <span class="op">.</span> <span class="fu">zip</span> cellIxs <span class="op">$</span> cells</span>
<span id="cb19-21"><a href="#cb19-21"></a>  <span class="kw">where</span></span>
<span id="cb19-22"><a href="#cb19-22"></a>    cells         <span class="ot">=</span> <span class="fu">map</span> (grid <span class="op">!</span>) cellIxs</span>
<span id="cb19-23"><a href="#cb19-23"></a>    exclusives    <span class="ot">=</span> exclusivePossibilities cells</span>
<span id="cb19-24"><a href="#cb19-24"></a>    allExclusives <span class="ot">=</span> setBits Data.Bits.zeroBits exclusives</span>
<span id="cb19-25"><a href="#cb19-25"></a></span>
<span id="cb19-26"><a href="#cb19-26"></a>    pruneCell g (_, <span class="dt">Fixed</span> _) <span class="ot">=</span> <span class="dt">Just</span> g</span>
<span id="cb19-27"><a href="#cb19-27"></a>    pruneCell g (i, <span class="dt">Possible</span> xs)</span>
<span id="cb19-28"><a href="#cb19-28"></a>      <span class="op">|</span> intersection <span class="op">==</span> xs             <span class="ot">=</span> <span class="dt">Just</span> g</span>
<span id="cb19-29"><a href="#cb19-29"></a>      <span class="op">|</span> intersection <span class="ot">`elem`</span> exclusives <span class="ot">=</span></span>
<span id="cb19-30"><a href="#cb19-30"></a>          <span class="fu">flip</span> (replaceCell i) g <span class="op">&lt;$&gt;</span> makeCell intersection</span>
<span id="cb19-31"><a href="#cb19-31"></a>      <span class="op">|</span> <span class="fu">otherwise</span>                      <span class="ot">=</span> <span class="dt">Just</span> g</span>
<span id="cb19-32"><a href="#cb19-32"></a>      <span class="kw">where</span></span>
<span id="cb19-33"><a href="#cb19-33"></a>        intersection <span class="ot">=</span> xs <span class="op">Data.Bits..&amp;.</span> allExclusives</span>
<span id="cb19-34"><a href="#cb19-34"></a></span>
<span id="cb19-35"><a href="#cb19-35"></a><span class="ot">pruneCells ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">CellIxs</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></span>
<span id="cb19-36"><a href="#cb19-36"></a>pruneCells grid cellIxs <span class="ot">=</span></span>
<span id="cb19-37"><a href="#cb19-37"></a>  fixM (<span class="fu">flip</span> pruneCellsByFixed cellIxs) grid</span>
<span id="cb19-38"><a href="#cb19-38"></a>  <span class="op">&gt;&gt;=</span> fixM (<span class="fu">flip</span> pruneCellsByExclusives cellIxs)</span></code></pre></div>
<p>All the three functions now take the grid and the cell indices instead of a list of cells, and use the cell indices to lookup the cells from the grid. Also, instead of using the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Traversable.html#v:traverse" target="_blank" rel="noopener"><code>traverse</code></a> function as earlier, now we use the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Control-Monad.html#v:foldM" target="_blank" rel="noopener"><code>Control.Monad.foldM</code></a> function to fold over the cell-index-and-cell tuples in the context of the <code>Maybe</code> monad, making changes to the grid directly.</p>
<p>We use the <code>replaceCell</code> function to replace cells at an index in the grid. It is a simple wrapper over the vector update function <code>Data.Vector.//</code>. Rest of the code is same in essence, except a few changes to accommodate the changed function parameters.</p>
<p><code>pruneGrid'</code> function does not need to do transpositions and back-transpositions anymore as now we use the cell indices to go over the right parts of the grid vector directly:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1"></a><span class="ot">pruneGrid' ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></span>
<span id="cb20-2"><a href="#cb20-2"></a>pruneGrid' grid <span class="ot">=</span></span>
<span id="cb20-3"><a href="#cb20-3"></a>  Control.Monad.foldM pruneCells grid allRowIxs</span>
<span id="cb20-4"><a href="#cb20-4"></a>  <span class="op">&gt;&gt;=</span> <span class="fu">flip</span> (Control.Monad.foldM pruneCells) allColIxs</span>
<span id="cb20-5"><a href="#cb20-5"></a>  <span class="op">&gt;&gt;=</span> <span class="fu">flip</span> (Control.Monad.foldM pruneCells) allSubGridIxs</span></code></pre></div>
<p>Notice that the <code>traverse</code> function here is also replaced by the <code>Control.Monad.foldM</code> function.</p>
<p>Similarly, the grid predicate functions change a little to go over a vector instead of a list of lists:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb21-1"><a href="#cb21-1"></a> isGridFilled :: Grid -&gt; Bool</span>
<span id="cb21-2"><a href="#cb21-2"></a><span class="st">-isGridFilled grid = null [ () | Possible _ &lt;- concat grid ]</span></span>
<span id="cb21-3"><a href="#cb21-3"></a><span class="va">+isGridFilled = not . Data.Vector.any isPossible</span></span>
<span id="cb21-4"><a href="#cb21-4"></a></span>
<span id="cb21-5"><a href="#cb21-5"></a> isGridInvalid :: Grid -&gt; Bool</span>
<span id="cb21-6"><a href="#cb21-6"></a> isGridInvalid grid =</span>
<span id="cb21-7"><a href="#cb21-7"></a><span class="st">-  any isInvalidRow grid</span></span>
<span id="cb21-8"><a href="#cb21-8"></a><span class="st">-  || any isInvalidRow (Data.List.transpose grid)</span></span>
<span id="cb21-9"><a href="#cb21-9"></a><span class="st">-  || any isInvalidRow (subGridsToRows grid)</span></span>
<span id="cb21-10"><a href="#cb21-10"></a><span class="va">+  any isInvalidRow (map (map (grid !)) allRowIxs)</span></span>
<span id="cb21-11"><a href="#cb21-11"></a><span class="va">+  || any isInvalidRow (map (map (grid !)) allColIxs)</span></span>
<span id="cb21-12"><a href="#cb21-12"></a><span class="va">+  || any isInvalidRow (map (map (grid !)) allSubGridIxs)</span></span></code></pre></div>
<p>And finally, we change the <code>nextGrids</code> function to replace the list related operations with the vector related ones:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb22-1"><a href="#cb22-1"></a> nextGrids :: Grid -&gt; (Grid, Grid)</span>
<span id="cb22-2"><a href="#cb22-2"></a> nextGrids grid =</span>
<span id="cb22-3"><a href="#cb22-3"></a>   let (i, first@(Fixed _), rest) =</span>
<span id="cb22-4"><a href="#cb22-4"></a>         fixCell</span>
<span id="cb22-5"><a href="#cb22-5"></a><span class="st">-        . Data.List.minimumBy</span></span>
<span id="cb22-6"><a href="#cb22-6"></a><span class="va">+        . Data.Vector.minimumBy</span></span>
<span id="cb22-7"><a href="#cb22-7"></a>             (compare `Data.Function.on` (possibilityCount . snd))</span>
<span id="cb22-8"><a href="#cb22-8"></a><span class="st">-        . filter (isPossible . snd)</span></span>
<span id="cb22-9"><a href="#cb22-9"></a><span class="st">-        . zip [0..]</span></span>
<span id="cb22-10"><a href="#cb22-10"></a><span class="st">-        . concat</span></span>
<span id="cb22-11"><a href="#cb22-11"></a><span class="va">+        . Data.Vector.imapMaybe</span></span>
<span id="cb22-12"><a href="#cb22-12"></a><span class="va">+            (\j cell -&gt; if isPossible cell then Just (j, cell) else Nothing)</span></span>
<span id="cb22-13"><a href="#cb22-13"></a>         $ grid</span>
<span id="cb22-14"><a href="#cb22-14"></a><span class="st">-  in (replace2D i first grid, replace2D i rest grid)</span></span>
<span id="cb22-15"><a href="#cb22-15"></a><span class="va">+  in (replaceCell i first grid, replaceCell i rest grid)</span></span></code></pre></div>
<p>We also switch the <code>replace2D</code> function which went over the entire list of lists of cells to replace a cell, with the vector-based <code>replaceCell</code> function.</p>
<p>All the required changes are done. Let’s do a run:</p>
<pre class="plain"><code>$ stack build
$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
       88.53 real        88.16 user         0.41 sys</code></pre>
<p>Oops! Instead of getting a speedup, our vector-based code is actually 1.3x slower than the list-based code. How did this happen? Time to bust out the profiler again!</p>
<h2 id="revenge-of-the" data-track-content data-content-name="revenge-of-the" data-content-piece="fast-sudoku-solver-in-haskell-3">Revenge of the <code>(==)</code><a href="#revenge-of-the" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Profiling the current code gives us the following hotspots:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Centre</th>
<th style="text-align: left;">Src</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>&gt;&gt;=</code></td>
<td style="text-align: left;">Data/Vector/Fusion/Util.hs:36:3-18</td>
<td style="text-align: right;">52.2</td>
<td style="text-align: right;">51.0</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>basicUnsafeIndexM</code></td>
<td style="text-align: left;">Data/Vector.hs:278:3-62</td>
<td style="text-align: right;">22.2</td>
<td style="text-align: right;">20.4</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities</code></td>
<td style="text-align: left;">Sudoku.hs:(75,1)-(93,26)</td>
<td style="text-align: right;">6.8</td>
<td style="text-align: right;">8.3</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>exclusivePossibilities.\.\</code></td>
<td style="text-align: left;">Sudoku.hs:83:23-96</td>
<td style="text-align: right;">3.8</td>
<td style="text-align: right;">8.8</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pruneCellsByFixed.fixeds</code></td>
<td style="text-align: left;">Sudoku.hs:105:5-77</td>
<td style="text-align: right;">2.0</td>
<td style="text-align: right;">1.7</td>
</tr>
</tbody>
</table>
</div>
<p>We see a sudden appearance of <code>(&gt;&gt;=)</code> from the <code>Data.Vector.Fusion.Util</code> module at the top of the list, taking more than half of the run time. For more clues, we dive into the detailed profiler report and find this bit:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Centre</th>
<th style="text-align: left;">Src</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>pruneGrid</code></td>
<td style="text-align: left;">Sudoku.hs:143:1-27</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">0.0</td>
</tr>
<tr class="even">
<td style="text-align: left;">  <code>fixM</code></td>
<td style="text-align: left;">Sudoku.hs:16:1-65</td>
<td style="text-align: right;">0.1</td>
<td style="text-align: right;">0.0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">    <code>fixM.\</code></td>
<td style="text-align: left;">Sudoku.hs:16:27-65</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: right;">0.1</td>
</tr>
<tr class="even">
<td style="text-align: left;">      <code>==</code></td>
<td style="text-align: left;">Data/Vector.hs:287:3-50</td>
<td style="text-align: right;">1.0</td>
<td style="text-align: right;">1.4</td>
</tr>
<tr class="odd">
<td style="text-align: left;">        <code>&gt;&gt;=</code></td>
<td style="text-align: left;">Data/Vector/Fusion/Util.hs:36:3-18</td>
<td style="text-align: right;">51.9</td>
<td style="text-align: right;">50.7</td>
</tr>
<tr class="even">
<td style="text-align: left;">          <code>basicUnsafeIndexM</code></td>
<td style="text-align: left;">Data/Vector.hs:278:3-62</td>
<td style="text-align: right;">19.3</td>
<td style="text-align: right;">20.3</td>
</tr>
</tbody>
</table>
</div>
<p>Here, the indentation indicated nesting of operations. We see that both the <code>(&gt;&gt;=)</code> and <code>basicUnsafeIndexM</code> functions — which together take around three-quarter of the run time — are being called from the <code>(==)</code> function in the <code>fixM</code> function<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>. It seems like we are checking for equality too many times. Here’s the usage of the <code>fixM</code> for reference:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1"></a><span class="ot">pruneCells ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">CellIxs</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></span>
<span id="cb24-2"><a href="#cb24-2"></a>pruneCells grid cellIxs <span class="ot">=</span></span>
<span id="cb24-3"><a href="#cb24-3"></a>  fixM (<span class="fu">flip</span> pruneCellsByFixed cellIxs) grid</span>
<span id="cb24-4"><a href="#cb24-4"></a>  <span class="op">&gt;&gt;=</span> fixM (<span class="fu">flip</span> pruneCellsByExclusives cellIxs)</span>
<span id="cb24-5"><a href="#cb24-5"></a></span>
<span id="cb24-6"><a href="#cb24-6"></a><span class="ot">pruneGrid ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></span>
<span id="cb24-7"><a href="#cb24-7"></a>pruneGrid <span class="ot">=</span> fixM pruneGrid'</span></code></pre></div>
<p>In <code>pruneGrid</code>, we run <code>pruneGrid'</code> till the resultant grid settles, that is, the grid computed in a particular iteration is <strong>equal to</strong> the grid in the previous iteration. Interestingly, we do the same thing in <code>pruneCells</code> too. We equate <strong>the whole grid</strong> to check for settling of each block of cells. This is the reason of the slowdown.</p>
<h2 id="one-function-to-prune-them-all" data-track-content data-content-name="one-function-to-prune-them-all" data-content-piece="fast-sudoku-solver-in-haskell-3">One Function to Prune Them All<a href="#one-function-to-prune-them-all" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Why did we add <code>fixM</code> in the <code>pruneCells</code> function at all? Quoting from the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/#fn6">previous post</a>,</p>
<blockquote>
<p>We need to run <code>pruneCellsByFixed</code> and <code>pruneCellsByExclusives</code> repeatedly using <code>fixM</code> because an unsettled row can lead to wrong solutions.</p>
<p>Imagine a row which just got a <code>9</code> fixed because of <code>pruneCellsByFixed</code>. If we don’t run the function again, the row may be left with one non-fixed cell with a <code>9</code>. When we run this row through <code>pruneCellsByExclusives</code>, it’ll consider the <code>9</code> in the non-fixed cell as a <em>Single</em> and fix it. This will lead to two <code>9</code>s in the same row, causing the solution to fail.</p>
</blockquote>
<p>So the reason we added <code>fixM</code> is that, we run the two pruning strategies one-after-another. That way, they see the cells in the same block in different states. If we were to merge the two pruning functions into a single one such that they work in lockstep, we would not need to run <code>fixM</code> at all!</p>
<p>With this idea, we rewrite <code>pruneCells</code> as a single function:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1"></a><span class="ot">pruneCells ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">CellIxs</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></span>
<span id="cb25-2"><a href="#cb25-2"></a>pruneCells grid cellIxs <span class="ot">=</span> Control.Monad.foldM pruneCell grid cellIxs</span>
<span id="cb25-3"><a href="#cb25-3"></a>  <span class="kw">where</span></span>
<span id="cb25-4"><a href="#cb25-4"></a>    cells         <span class="ot">=</span> <span class="fu">map</span> (grid <span class="op">!</span>) cellIxs</span>
<span id="cb25-5"><a href="#cb25-5"></a>    exclusives    <span class="ot">=</span> exclusivePossibilities cells</span>
<span id="cb25-6"><a href="#cb25-6"></a>    allExclusives <span class="ot">=</span> setBits Data.Bits.zeroBits exclusives</span>
<span id="cb25-7"><a href="#cb25-7"></a>    fixeds        <span class="ot">=</span> setBits Data.Bits.zeroBits [x <span class="op">|</span> <span class="dt">Fixed</span> x <span class="ot">&lt;-</span> cells]</span>
<span id="cb25-8"><a href="#cb25-8"></a></span>
<span id="cb25-9"><a href="#cb25-9"></a>    pruneCell g i <span class="ot">=</span></span>
<span id="cb25-10"><a href="#cb25-10"></a>      pruneCellByFixed g (i, g <span class="op">!</span> i) <span class="op">&gt;&gt;=</span> \g' <span class="ot">-&gt;</span> pruneCellByExclusives g' (i, g' <span class="op">!</span> i)</span>
<span id="cb25-11"><a href="#cb25-11"></a></span>
<span id="cb25-12"><a href="#cb25-12"></a>    pruneCellByFixed g (_, <span class="dt">Fixed</span> _) <span class="ot">=</span> <span class="dt">Just</span> g</span>
<span id="cb25-13"><a href="#cb25-13"></a>    pruneCellByFixed g (i, <span class="dt">Possible</span> xs)</span>
<span id="cb25-14"><a href="#cb25-14"></a>      <span class="op">|</span> xs' <span class="op">==</span> xs <span class="ot">=</span> <span class="dt">Just</span> g</span>
<span id="cb25-15"><a href="#cb25-15"></a>      <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="fu">flip</span> (replaceCell i) g <span class="op">&lt;$&gt;</span> makeCell xs'</span>
<span id="cb25-16"><a href="#cb25-16"></a>      <span class="kw">where</span></span>
<span id="cb25-17"><a href="#cb25-17"></a>        xs' <span class="ot">=</span> xs <span class="op">Data.Bits..&amp;.</span> Data.Bits.complement fixeds</span>
<span id="cb25-18"><a href="#cb25-18"></a></span>
<span id="cb25-19"><a href="#cb25-19"></a>    pruneCellByExclusives g (_, <span class="dt">Fixed</span> _) <span class="ot">=</span> <span class="dt">Just</span> g</span>
<span id="cb25-20"><a href="#cb25-20"></a>    pruneCellByExclusives g (i, <span class="dt">Possible</span> xs)</span>
<span id="cb25-21"><a href="#cb25-21"></a>      <span class="op">|</span> <span class="fu">null</span> exclusives                <span class="ot">=</span> <span class="dt">Just</span> g</span>
<span id="cb25-22"><a href="#cb25-22"></a>      <span class="op">|</span> intersection <span class="op">==</span> xs             <span class="ot">=</span> <span class="dt">Just</span> g</span>
<span id="cb25-23"><a href="#cb25-23"></a>      <span class="op">|</span> intersection <span class="ot">`elem`</span> exclusives <span class="ot">=</span></span>
<span id="cb25-24"><a href="#cb25-24"></a>          <span class="fu">flip</span> (replaceCell i) g <span class="op">&lt;$&gt;</span> makeCell intersection</span>
<span id="cb25-25"><a href="#cb25-25"></a>      <span class="op">|</span> <span class="fu">otherwise</span>                      <span class="ot">=</span> <span class="dt">Just</span> g</span>
<span id="cb25-26"><a href="#cb25-26"></a>      <span class="kw">where</span></span>
<span id="cb25-27"><a href="#cb25-27"></a>        intersection <span class="ot">=</span> xs <span class="op">Data.Bits..&amp;.</span> allExclusives</span></code></pre></div>
<p>We have merged the two pruning functions almost blindly. The important part here is the nested <code>pruneCell</code> function which uses monadic bind <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Control-Monad.html#v:-62--62--61-" target="_blank" rel="noopener"><code>(&gt;&gt;=)</code></a> to ensure that cells fixed in the first step are seen by the next step. Merging the two functions ensures that both strategies will see same <em>Exclusives</em> and <em>Fixeds</em>, thereby running in lockstep.</p>
<p>Let’s try it out:</p>
<pre class="plain"><code>$ stack build
$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
      57.67 real        57.12 user         0.46 sys</code></pre>
<p>Ah, now it’s faster than the list-based implementation by 1.2x<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>. Let’s see what the profiler says:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Centre</th>
<th style="text-align: left;">Src</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities.\.\</code></td>
<td style="text-align: left;">Sudoku.hs:82:23-96</td>
<td style="text-align: right;">15.7</td>
<td style="text-align: right;">33.3</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCells</code></td>
<td style="text-align: left;">Sudoku.hs:(101,1)-(126,53)</td>
<td style="text-align: right;">9.6</td>
<td style="text-align: right;">6.8</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pruneCells.pruneCell</code></td>
<td style="text-align: left;">Sudoku.hs:(108,5)-(109,83)</td>
<td style="text-align: right;">9.5</td>
<td style="text-align: right;">2.1</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>basicUnsafeIndexM</code></td>
<td style="text-align: left;">Data/Vector.hs:278:3-62</td>
<td style="text-align: right;">9.4</td>
<td style="text-align: right;">0.5</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pruneCells.pruneCell.\</code></td>
<td style="text-align: left;">Sudoku.hs:109:48-83</td>
<td style="text-align: right;">7.6</td>
<td style="text-align: right;">2.1</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCells.cells</code></td>
<td style="text-align: left;">Sudoku.hs:103:5-40</td>
<td style="text-align: right;">7.1</td>
<td style="text-align: right;">10.9</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities.\</code></td>
<td style="text-align: left;">Sudoku.hs:87:64-96</td>
<td style="text-align: right;">3.5</td>
<td style="text-align: right;">3.8</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>EP.Map.filter1</code></td>
<td style="text-align: left;">Sudoku.hs:86:35-61</td>
<td style="text-align: right;">3.0</td>
<td style="text-align: right;">0.6</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>&gt;&gt;=</code></td>
<td style="text-align: left;">Data/Vector/Fusion/Util.hs:36:3-18</td>
<td style="text-align: right;">2.8</td>
<td style="text-align: right;">2.0</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>replaceCell</code></td>
<td style="text-align: left;">Sudoku.hs:59:1-45</td>
<td style="text-align: right;">2.5</td>
<td style="text-align: right;">1.1</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>EP.filter</code></td>
<td style="text-align: left;">Sudoku.hs:78:30-54</td>
<td style="text-align: right;">2.4</td>
<td style="text-align: right;">3.3</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>primitive</code></td>
<td style="text-align: left;">Control/Monad/Primitive.hs:195:3-16</td>
<td style="text-align: right;">2.3</td>
<td style="text-align: right;">6.5</td>
</tr>
</tbody>
</table>
</div>
<p>The double nested anonymous function mentioned before is still the biggest culprit but <code>fixM</code> has disappeared from the list. Let’s tackle <code>exclusivePossibilities</code> now.</p>
<h2 id="rise-of-the-mutables" data-track-content data-content-name="rise-of-the-mutables" data-content-piece="fast-sudoku-solver-in-haskell-3">Rise of the Mutables<a href="#rise-of-the-mutables" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Here’s <code>exclusivePossibilities</code> again for reference:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1"></a><span class="ot">exclusivePossibilities ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> [<span class="dt">Data.Word.Word16</span>]</span>
<span id="cb27-2"><a href="#cb27-2"></a>exclusivePossibilities row <span class="ot">=</span></span>
<span id="cb27-3"><a href="#cb27-3"></a>  row</span>
<span id="cb27-4"><a href="#cb27-4"></a>  <span class="op">&amp;</span> <span class="fu">zip</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">9</span>]</span>
<span id="cb27-5"><a href="#cb27-5"></a>  <span class="op">&amp;</span> <span class="fu">filter</span> (isPossible <span class="op">.</span> <span class="fu">snd</span>)</span>
<span id="cb27-6"><a href="#cb27-6"></a>  <span class="op">&amp;</span> Data.List.foldl'</span>
<span id="cb27-7"><a href="#cb27-7"></a>      (\acc <span class="op">~</span>(i, <span class="dt">Possible</span> xs) <span class="ot">-&gt;</span></span>
<span id="cb27-8"><a href="#cb27-8"></a>        Data.List.foldl'</span>
<span id="cb27-9"><a href="#cb27-9"></a>          (\acc' n <span class="ot">-&gt;</span> <span class="kw">if</span> Data.Bits.testBit xs n </span>
<span id="cb27-10"><a href="#cb27-10"></a>                      <span class="kw">then</span> Map.insertWith prepend n [i] acc' </span>
<span id="cb27-11"><a href="#cb27-11"></a>                      <span class="kw">else</span> acc')</span>
<span id="cb27-12"><a href="#cb27-12"></a>          acc</span>
<span id="cb27-13"><a href="#cb27-13"></a>          [<span class="dv">1</span><span class="op">..</span><span class="dv">9</span>])</span>
<span id="cb27-14"><a href="#cb27-14"></a>      Map.empty</span>
<span id="cb27-15"><a href="#cb27-15"></a>  <span class="op">&amp;</span> Map.filter ((<span class="op">&lt;</span> <span class="dv">4</span>) <span class="op">.</span> <span class="fu">length</span>)</span>
<span id="cb27-16"><a href="#cb27-16"></a>  <span class="op">&amp;</span> Map.foldlWithKey'(\acc x is <span class="ot">-&gt;</span> Map.insertWith prepend is [x] acc) Map.empty</span>
<span id="cb27-17"><a href="#cb27-17"></a>  <span class="op">&amp;</span> Map.filterWithKey (\is xs <span class="ot">-&gt;</span> <span class="fu">length</span> is <span class="op">==</span> <span class="fu">length</span> xs)</span>
<span id="cb27-18"><a href="#cb27-18"></a>  <span class="op">&amp;</span> Map.elems</span>
<span id="cb27-19"><a href="#cb27-19"></a>  <span class="op">&amp;</span> <span class="fu">map</span> (Data.List.foldl' Data.Bits.setBit Data.Bits.zeroBits)</span>
<span id="cb27-20"><a href="#cb27-20"></a>  <span class="kw">where</span></span>
<span id="cb27-21"><a href="#cb27-21"></a>    prepend <span class="op">~</span>[y] ys <span class="ot">=</span> y<span class="op">:</span>ys</span></code></pre></div>
<p>Let’s zoom into lines 6–14. Here, we do a fold with a nested fold over the non-fixed cells of the given block to accumulate the mapping from the digits to the indices of the cells they occur in. We use a <a href="https://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-Map-Strict.html" target="_blank" rel="noopener"><code>Data.Map.Strict</code></a> map as the accumulator. If a digit is not present in the map as a key then we add a singleton list containing the corresponding cell index as the value. If the digit is already present in the map then we prepend the cell index to the list of indices for the digit. So we end up “mutating” the map repeatedly.</p>
<p>Of course, it’s not actual mutation because the map data structure we are using is immutable. Each change to the map instance creates a new copy with the addition, which we thread through the fold operation, and we get the final copy at the end. This may be the reason of the slowness in this section of the code.</p>
<p>What if, instead of using an immutable data structure for this, we used a mutable one? But how can we do that when we know that Haskell is a pure language? Purity means that all code must be <a href="https://en.wikipedia.org/wiki/Referential_transparency" target="_blank" rel="noopener">referentially transparent</a>, and mutability certainly isn’t. It turns out, there is an escape hatch to mutability in Haskell. Quoting the relevant section from the book <a href="http://book.realworldhaskell.org/read/advanced-library-design-building-a-bloom-filter.html#id680273" target="_blank" rel="noopener">Real World Haskell</a>:</p>
<blockquote>
<p>Haskell provides a special monad, named <code>ST</code>, which lets us work safely with mutable state. Compared to the <code>State</code> monad, it has some powerful added capabilities.</p>
<ul>
<li>We can <em>thaw</em> an immutable array to give a mutable array; modify the mutable array in place; and freeze a new immutable array when we are done.</li>
<li>We have the ability to use <em>mutable references</em>. This lets us implement data structures that we can modify after construction, as in an imperative language. This ability is vital for some imperative data structures and algorithms, for which similarly efficient purely functional alternatives have not yet been discovered.</li>
</ul>
</blockquote>
<p>So if we use a mutable map in the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Control-Monad-ST.html" target="_blank" rel="noopener"><code>ST</code> monad</a>, we may be able to get rid of this bottleneck. But, we can actually do better! Since the keys of our map are digits <code>1</code>–<code>9</code>, we can use a <a href="https://hackage.haskell.org/package/vector-0.12.0.1/docs/Data-Vector-Mutable.html" target="_blank" rel="noopener">mutable vector</a> to store the indices. In fact, we can go one step even further and store the indices as a BitSet as <code>Word16</code> because they also range from 1 to 9, and are unique for a block. This lets us use an <a href="https://hackage.haskell.org/package/vector-0.12.0.1/docs/Data-Vector-Unboxed-Mutable.html" target="_blank" rel="noopener">unboxed mutable vector</a>. What is <em>unboxing</em> you ask? Quoting from the <a href="https://downloads.haskell.org/~ghc/8.4.3/docs/html/users_guide/glasgow_exts.html#unboxed-types" target="_blank" rel="noopener">GHC docs</a>:</p>
<blockquote>
<p>Most types in GHC are boxed, which means that values of that type are represented by a pointer to a heap object. The representation of a Haskell <code>Int</code>, for example, is a two-word heap object. An unboxed type, however, is represented by the value itself, no pointers or heap allocation are involved.</p>
</blockquote>
<p>When combined with vector, unboxing of values means the whole vector is stored as single byte array, avoiding pointer redirections completely. This is more memory efficient and allows better usage of caches<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a>. Let’s rewrite <code>exclusivePossibilities</code> using <code>ST</code> and unboxed mutable vectors.</p>
<p>First we write the core of this operation, the function <code>cellIndicesList</code> which take a list of cells and returns the digit to cell indices mapping. The mapping is returned as a list. The zeroth value in this list is the indices of the cells which have <code>1</code> as a possible digit, and so on. The indices themselves are packed as BitSets. If the bit 1 is set then the first cell has a particular digit. Let’s say it returns <code>[0,688,54,134,0,654,652,526,670]</code>. In 10-bit binary it is:</p>
<pre class="plain"><code>[0000000000, 1010110000, 0000110110, 0010000110, 0000000000, 1010001110, 1010001100, 1000001110, 1010011110]</code></pre>
<p>We can arrange it in a table for further clarity:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: right;">Digits</th>
<th style="text-align: right;">Cell 9</th>
<th style="text-align: right;">Cell 8</th>
<th style="text-align: right;">Cell 7</th>
<th style="text-align: right;">Cell 6</th>
<th style="text-align: right;">Cell 5</th>
<th style="text-align: right;">Cell 4</th>
<th style="text-align: right;">Cell 3</th>
<th style="text-align: right;">Cell 2</th>
<th style="text-align: right;">Cell 1</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: right;">6</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td style="text-align: right;">7</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: right;">8</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td style="text-align: right;">9</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
</tr>
</tbody>
</table>
</div>
<p>If the value of the intersection of a particular digit and a particular cell index in the table is set to 1, then the digit is a possibility in the cell, else it is not. Here’s the code:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1"></a><span class="ot">cellIndicesList ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> [<span class="dt">Data.Word.Word16</span>]</span>
<span id="cb29-2"><a href="#cb29-2"></a>cellIndicesList cells <span class="ot">=</span></span>
<span id="cb29-3"><a href="#cb29-3"></a>  Data.Vector.Unboxed.toList <span class="op">$</span> Control.Monad.ST.runST <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb29-4"><a href="#cb29-4"></a>    vec <span class="ot">&lt;-</span> Data.Vector.Unboxed.Mutable.replicate <span class="dv">9</span> Data.Bits.zeroBits</span>
<span id="cb29-5"><a href="#cb29-5"></a>    ref <span class="ot">&lt;-</span> Data.STRef.newSTRef (<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>)</span>
<span id="cb29-6"><a href="#cb29-6"></a>    Control.Monad.forM_ cells <span class="op">$</span> \cell <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb29-7"><a href="#cb29-7"></a>      i <span class="ot">&lt;-</span> Data.STRef.readSTRef ref</span>
<span id="cb29-8"><a href="#cb29-8"></a>      <span class="kw">case</span> cell <span class="kw">of</span></span>
<span id="cb29-9"><a href="#cb29-9"></a>        <span class="dt">Fixed</span> _ <span class="ot">-&gt;</span> <span class="fu">return</span> ()</span>
<span id="cb29-10"><a href="#cb29-10"></a>        <span class="dt">Possible</span> xs <span class="ot">-&gt;</span> Control.Monad.forM_ [<span class="dv">0</span><span class="op">..</span><span class="dv">8</span>] <span class="op">$</span> \d <span class="ot">-&gt;</span></span>
<span id="cb29-11"><a href="#cb29-11"></a>          Control.Monad.when (Data.Bits.testBit xs (d<span class="op">+</span><span class="dv">1</span>)) <span class="op">$</span></span>
<span id="cb29-12"><a href="#cb29-12"></a>            Data.Vector.Unboxed.Mutable.unsafeModify vec (<span class="ot">`Data.Bits.setBit`</span> i) d</span>
<span id="cb29-13"><a href="#cb29-13"></a>      Data.STRef.writeSTRef ref (i<span class="op">+</span><span class="dv">1</span>)</span>
<span id="cb29-14"><a href="#cb29-14"></a>    Data.Vector.Unboxed.unsafeFreeze vec</span></code></pre></div>
<p>The whole mutable code runs inside the <code>runST</code> function. <code>runST</code> take an operation in <code>ST</code> monad and executes it, making sure that the mutable references created inside it cannot escape the scope of <code>runST</code>. This is done using a type-system trickery called <a href="https://web.archive.org/web/20180813050307/https://prime.haskell.org/wiki/Rank2Types" target="_blank" rel="noopener">Rank-2 types</a>.</p>
<p>Inside the <code>ST</code> operation, we start with creating a mutable vector of <code>Word16</code>s of size 9 with all its values initially set to zero. We also initialize a mutable reference to keep track of the cell index we are on. Then we run two nested for loops, going over each cell and each digit <code>1</code>–<code>9</code>, setting the right bit of the right index of the mutable vector. During this, we mutate the vector directly using the <code>Data.Vector.Unboxed.Mutable.unsafeModify</code> function. At the end of the <code>ST</code> operation, we freeze the mutable vector to return an immutable version of it. Outside <code>runST</code>, we convert the immutable vector to a list. Notice how this code is quite similar to how we’d write it in <a href="https://en.wikipedia.org/wiki/Imperative_programming" target="_blank" rel="noopener">imperative programming</a> languages like C or Java<a href="#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a>.</p>
<p>It is easy to use this function now to rewrite <code>exclusivePossibilities</code>:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb30-1"><a href="#cb30-1"></a> exclusivePossibilities :: [Cell] -&gt; [Data.Word.Word16]</span>
<span id="cb30-2"><a href="#cb30-2"></a> exclusivePossibilities row =</span>
<span id="cb30-3"><a href="#cb30-3"></a>   row</span>
<span id="cb30-4"><a href="#cb30-4"></a><span class="st">-  &amp; zip [1..9]</span></span>
<span id="cb30-5"><a href="#cb30-5"></a><span class="st">-  &amp; filter (isPossible . snd)</span></span>
<span id="cb30-6"><a href="#cb30-6"></a><span class="st">-  &amp; Data.List.foldl'</span></span>
<span id="cb30-7"><a href="#cb30-7"></a><span class="st">-      (\acc ~(i, Possible xs) -&gt;</span></span>
<span id="cb30-8"><a href="#cb30-8"></a><span class="st">-        Data.List.foldl'</span></span>
<span id="cb30-9"><a href="#cb30-9"></a><span class="st">-          (\acc' n -&gt; if Data.Bits.testBit xs n </span></span>
<span id="cb30-10"><a href="#cb30-10"></a><span class="st">-                      then Map.insertWith prepend n [i] acc' </span></span>
<span id="cb30-11"><a href="#cb30-11"></a><span class="st">-                      else acc')</span></span>
<span id="cb30-12"><a href="#cb30-12"></a><span class="st">-          acc</span></span>
<span id="cb30-13"><a href="#cb30-13"></a><span class="st">-          [1..9])</span></span>
<span id="cb30-14"><a href="#cb30-14"></a><span class="st">-      Map.empty</span></span>
<span id="cb30-15"><a href="#cb30-15"></a><span class="va">+  &amp; cellIndicesList</span></span>
<span id="cb30-16"><a href="#cb30-16"></a><span class="va">+  &amp; zip [1..9]</span></span>
<span id="cb30-17"><a href="#cb30-17"></a><span class="st">-  &amp; Map.filter ((&lt; 4) . length)</span></span>
<span id="cb30-18"><a href="#cb30-18"></a><span class="st">-  &amp; Map.foldlWithKey' (\acc x is -&gt; Map.insertWith prepend is [x] acc) Map.empty</span></span>
<span id="cb30-19"><a href="#cb30-19"></a><span class="st">-  &amp; Map.filterWithKey (\is xs -&gt; length is == length xs)</span></span>
<span id="cb30-20"><a href="#cb30-20"></a><span class="va">+  &amp; filter (\(_, is) -&gt; let p = Data.Bits.popCount is in p &gt; 0 &amp;&amp; p &lt; 4)</span></span>
<span id="cb30-21"><a href="#cb30-21"></a><span class="va">+  &amp; Data.List.foldl' (\acc (x, is) -&gt; Map.insertWith prepend is [x] acc) Map.empty</span></span>
<span id="cb30-22"><a href="#cb30-22"></a><span class="va">+  &amp; Map.filterWithKey (\is xs -&gt; Data.Bits.popCount is == length xs)</span></span>
<span id="cb30-23"><a href="#cb30-23"></a>   &amp; Map.elems</span>
<span id="cb30-24"><a href="#cb30-24"></a>   &amp; map (Data.List.foldl' Data.Bits.setBit Data.Bits.zeroBits)</span>
<span id="cb30-25"><a href="#cb30-25"></a>   where</span>
<span id="cb30-26"><a href="#cb30-26"></a>     prepend ~[y] ys = y:ys</span></code></pre></div>
<p>We replace the nested two-fold operation with <code>cellIndicesList</code>. Then we replace some map related function with the corresponding list ones because <code>cellIndicesList</code> returns a list. We also replace the <code>length</code> function call on cell indices with <code>Data.Bits.popCount</code> function call as the indices are represented as <code>Word16</code> now.</p>
<p>That is it. Let’s build and run it now:</p>
<pre class="plain"><code>$ stack build
$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
      35.04 real        34.84 user         0.24 sys</code></pre>
<p>That’s a 1.6x speedup over the map-and-fold based version. Let’s check what the profiler has to say:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Centre</th>
<th style="text-align: left;">Src</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>cellIndicesList.\.\</code></td>
<td style="text-align: left;">Sudoku.hs:(88,11)-(89,81)</td>
<td style="text-align: right;">10.7</td>
<td style="text-align: right;">6.0</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>primitive</code></td>
<td style="text-align: left;">Control/Monad/Primitive.hs:195:3-16</td>
<td style="text-align: right;">7.9</td>
<td style="text-align: right;">6.9</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pruneCells</code></td>
<td style="text-align: left;">Sudoku.hs:(113,1)-(138,53)</td>
<td style="text-align: right;">7.5</td>
<td style="text-align: right;">6.4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>cellIndicesList</code></td>
<td style="text-align: left;">Sudoku.hs:(79,1)-(91,40)</td>
<td style="text-align: right;">7.4</td>
<td style="text-align: right;">10.1</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>basicUnsafeIndexM</code></td>
<td style="text-align: left;">Data/Vector.hs:278:3-62</td>
<td style="text-align: right;">7.3</td>
<td style="text-align: right;">0.5</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCells.pruneCell</code></td>
<td style="text-align: left;">Sudoku.hs:(120,5)-(121,83)</td>
<td style="text-align: right;">6.8</td>
<td style="text-align: right;">2.0</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities</code></td>
<td style="text-align: left;">Sudoku.hs:(94,1)-(104,26)</td>
<td style="text-align: right;">6.5</td>
<td style="text-align: right;">9.7</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCells.pruneCell.\</code></td>
<td style="text-align: left;">Sudoku.hs:121:48-83</td>
<td style="text-align: right;">6.1</td>
<td style="text-align: right;">2.0</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>cellIndicesList.\</code></td>
<td style="text-align: left;">Sudoku.hs:(83,42)-(90,37)</td>
<td style="text-align: right;">5.5</td>
<td style="text-align: right;">3.5</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCells.cells</code></td>
<td style="text-align: left;">Sudoku.hs:115:5-40</td>
<td style="text-align: right;">5.0</td>
<td style="text-align: right;">10.4</td>
</tr>
</tbody>
</table>
</div>
<p>The run time is spread quite evenly over all the functions now and there are no hotspots anymore. We stop optimizating at this point<a href="#fn10" class="footnote-ref" id="fnref10" role="doc-noteref"><sup>10</sup></a>. Let’s see how far we have come up.</p>
<h2 id="comparison-of-implementations" data-track-content data-content-name="comparison-of-implementations" data-content-piece="fast-sudoku-solver-in-haskell-3">Comparison of Implementations<a href="#comparison-of-implementations" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Below is a table showing the speedups we got with each new implementation:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Implementation</th>
<th style="text-align: right;">Run Time (s)</th>
<th style="text-align: right;">Incremental Speedup</th>
<th style="text-align: right;">Cumulative Speedup</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Simple</td>
<td style="text-align: right;">47450</td>
<td style="text-align: right;">1x</td>
<td style="text-align: right;">1x</td>
</tr>
<tr class="even">
<td style="text-align: left;">Exclusive Pruning</td>
<td style="text-align: right;">258.97</td>
<td style="text-align: right;">183.23x</td>
<td style="text-align: right;">183x</td>
</tr>
<tr class="odd">
<td style="text-align: left;">BitSet</td>
<td style="text-align: right;">69.44</td>
<td style="text-align: right;">3.73x</td>
<td style="text-align: right;">683x</td>
</tr>
<tr class="even">
<td style="text-align: left;">Vector</td>
<td style="text-align: right;">57.67</td>
<td style="text-align: right;">1.20x</td>
<td style="text-align: right;">823x</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Mutable Vector</td>
<td style="text-align: right;">35.04</td>
<td style="text-align: right;">1.65x</td>
<td style="text-align: right;">1354x</td>
</tr>
</tbody>
</table>
</div>
<p>The first improvement over the simple solution got us the most major speedup of 183x. After that, we followed the profiler, fixing bottlenecks by using the right data structures. We got quite significant speedup over the naive list-based solution, leading to drop in the run time from 259 seconds to 35 seconds. In total, we have done more than a thousand times improvement in the run time since the first solution!</p>
<h2 id="conclusion" data-track-content data-content-name="conclusion" data-content-piece="fast-sudoku-solver-in-haskell-3">Conclusion<a href="#conclusion" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>In this post, we improved upon our list-based Sudoku solution from the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/">last time</a>. We profiled the code at each step, found the bottlenecks and fixed them by choosing the right data structure for the case. We ended up using BitSets and Vectors — both immutable and mutable varieties — for the different parts of the code. Finally, we sped up our program by 7.4 times. Can we go even faster? How about using all those other CPU cores which have been lying idle? Come back for the next post in this series where we’ll explore the parallel programming facilities in Haskell. The code till now is available <a href="https://code.abhinavsarkar.net/abhin4v/hasdoku/src/commit/4a9a1531d5780e7abc7d5ab2a26dccbf34382031" target="_blank" rel="noopener">here</a>. Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/96y0xa/fast_sudoku_solver_in_haskell_3_picking_the_right/" target="_blank" rel="noopener">r/haskell</a> or <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-3/#comment-container">leave a comment</a>.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>All the runs were done on my MacBook Pro from 2014 with 2.2 GHz Intel Core i7 CPU and 16 GB memory.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>A lot of the code in this post references the code from the previous posts, including showing diffs. So, please read the previous posts if you have not already done so.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>Notice the British English spelling of the word “Centre”. GHC was originally developed in <a href="https://en.wikipedia.org/wiki/University_of_Glasgow" target="_blank" rel="noopener">University of Glasgow</a> in Scotland.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>The code for the BitSet based implementa­tion can be found <a href="https://code.abhinavsarkar.net/abhin4v/hasdoku/src/commit/5a3044e09cd86dd6154bc50760095c4b38c48c6a" target="_blank" rel="noopener">here</a>.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p><a href="https://web.archive.org/web/20171031080004/https://www.schoolofhaskell.com/user/commercial/content/vector" target="_blank" rel="noopener">This article</a> on School of Haskell goes into details about performance of vectors vs. lists. There are also <a href="https://web.archive.org/web/20180802043644/https://github.com/haskell-perf/sequences/blob/master/README.md" target="_blank" rel="noopener">these</a> benchmarks for sequence data structures in Haskell: lists, vectors, seqs, etc.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6" role="doc-endnote"><p>We see Haskell’s laziness at work here. In the code for the <code>fixM</code> function, the <code>(==)</code> function is nested inside the <code>(&gt;&gt;=)</code> function, but because of laziness, they are actually evaluated in the reverse order. The evaluation of parameters for the <code>(==)</code> function causes the <code>(&gt;&gt;=)</code> function to be evaluated.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7" role="doc-endnote"><p>The code for the vector based implementa­tion can be found <a href="https://code.abhinavsarkar.net/abhin4v/hasdoku/src/commit/a320a7874c6fa0c39665151cc8e073532cc750a1" target="_blank" rel="noopener">here</a>.<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8" role="doc-endnote"><p>Unboxed vectors have some <a href="https://hackage.haskell.org/package/vector-0.12.0.1/docs/Data-Vector-Unboxed.html#t:Unbox" target="_blank" rel="noopener">restrictions</a> on the kind of values that can be put into them but <code>Word16</code> already follows those restrictions so we are good.<a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9" role="doc-endnote"><p>Haskell can be a pretty good imperative programming language using the <code>ST</code> monad. <a href="https://web.archive.org/web/20180628054717/https://vaibhavsagar.com/blog/2017/05/29/imperative-haskell/" target="_blank" rel="noopener">This article</a> shows how to implement some algorithms which require mutable data structures in Haskell.<a href="#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn10" role="doc-endnote"><p>The code for the mutable vector based implementation can be found <a href="https://code.abhinavsarkar.net/abhin4v/hasdoku/src/commit/4a9a1531d5780e7abc7d5ab2a26dccbf34382031" target="_blank" rel="noopener">here</a>.<a href="#fnref10" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section><p>If you liked this post, please <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-3/#comment-container">leave a comment</a>.</p><img src="https://anna.abhinavsarkar.net/piwik.php?idsite=1&amp;rec=1" style="border:0; display: none;" />]]></summary>
</entry>
<entry>
    <title>Fast Sudoku Solver in Haskell #2: A 200x Faster Solution</title>
    <link rel="alternate" href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/" />
    <id>https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/</id>
    <published>2018-07-11T00:00:00Z</published>
    <updated>2018-07-11T00:00:00Z</updated>
    
    <author>
        <name>Abhinav Sarkar</name>
        <email>abhinav@abhinavsarkar.net</email>
        <uri>https://abhinavsarkar.net/about/</uri>
    </author>
    
    
    <category term="haskell" />
    
    <category term="sudoku" />
    
    <category term="programming" />
    
    <category term="puzzle" />
    
    <category term="nilenso" />
    
    <summary type="html"><![CDATA[<p>In the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/">first part</a> of this series of posts, we wrote a simple <a href="https://en.wikipedia.org/wiki/Sudoku" target="_blank" rel="noopener">Sudoku</a> solver in <a href="https://www.haskell.org/" target="_blank" rel="noopener">Haskell</a>. It used a <a href="https://en.wikipedia.org/wiki/Constraint_satisfaction_problem" target="_blank" rel="noopener">constraint satisfaction</a> algorithm with <a href="https://en.wikipedia.org/wiki/Depth-first_search" target="_blank" rel="noopener">backtracking</a>. The solution worked well but was very slow. In this post, we are going to improve it and make it <strong>fast</strong>.</p>
<!--more-->
<p>This is the second post in a series of posts:</p>
<ol type="1">
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/">Fast Sudoku Solver in Haskell #1: A Simple Solution</a></li>
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/">Fast Sudoku Solver in Haskell #2: A 200x Faster Solution</a></li>
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-3/">Fast Sudoku Solver in Haskell #3: Picking the Right Data Structures</a></li>
</ol>
<p>Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/8xyfad/fast_sudoku_solver_in_haskell_2_a_200x_faster/" target="_blank" rel="noopener">r/haskell</a>.</p>
<nav id="toc" class="right-toc"><h3>Contents</h3><ol><li><a href="#quick-recap">Quick Recap</a></li><li><a href="#constraints-and-corollaries">Constraints and Corollaries</a></li><li><a href="#singles-twins-and-triplets">Singles, Twins and Triplets</a></li><li><a href="#a-little-forward-a-little-backward">A Little Forward, a Little Backward</a></li><li><a href="#pruning-the-cells-exclusively">Pruning the Cells, Exclusively</a></li><li><a href="#faster-than-a-speeding-bullet">Faster than a Speeding Bullet!</a><ol><li><a href="#update">Update</a></li></ol></li><li><a href="#conclusion">Conclusion</a></li></ol></nav>
<h2 id="quick-recap" data-track-content data-content-name="quick-recap" data-content-piece="fast-sudoku-solver-in-haskell-2">Quick Recap<a href="#quick-recap" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p><a href="https://en.wikipedia.org/wiki/Sudoku" target="_blank" rel="noopener">Sudoku</a> is a number placement puzzle. It consists of a 9x9 grid which is to be filled with digits from 1 to 9 such that each row, each column and each of the nine 3x3 sub-grids contain all the digits. Some of the cells of the grid come pre-filled and the player has to fill the rest.</p>
<p>In the previous post, we implemented a simple Sudoku solver without paying much attention to its performance characteristics. We ran<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> some of <a href="https://abhinavsarkar.net/files/sudoku17.txt.bz2">17-clue puzzles</a><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> through our program to see how fast it was:</p>
<pre class="plain"><code>$ head -n100 sudoku17.txt | time stack exec sudoku
... output omitted ...
      116.70 real       198.09 user        94.46 sys</code></pre>
<p>So, it took about 117 seconds to solve one hundred puzzles. At this speed, it would take about 16 hours to solve all the 49151 puzzles contained in the file. This is way too slow. We need to find ways to make it faster. Let’s go back to the drawing board.</p>
<h2 id="constraints-and-corollaries" data-track-content data-content-name="constraints-and-corollaries" data-content-piece="fast-sudoku-solver-in-haskell-2">Constraints and Corollaries<a href="#constraints-and-corollaries" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>In a Sudoku puzzle, we have a partially filled 9x9 grid which we have to fill completely while following the constraints of the game.</p>
<pre class="plain low-line-height"><code>+-------+-------+-------+
| . . . | . . . | . 1 . |
| 4 . . | . . . | . . . |
| . 2 . | . . . | . . . |
+-------+-------+-------+
| . . . | . 5 . | 4 . 7 |
| . . 8 | . . . | 3 . . |
| . . 1 | . 9 . | . . . |
+-------+-------+-------+
| 3 . . | 4 . . | 2 . . |
| . 5 . | 1 . . | . . . |
| . . . | 8 . 6 | . . . |
+-------+-------+-------+
    A sample puzzle

+-------+-------+-------+
| 6 9 3 | 7 8 4 | 5 1 2 |
| 4 8 7 | 5 1 2 | 9 3 6 |
| 1 2 5 | 9 6 3 | 8 7 4 |
+-------+-------+-------+
| 9 3 2 | 6 5 1 | 4 8 7 |
| 5 6 8 | 2 4 7 | 3 9 1 |
| 7 4 1 | 3 9 8 | 6 2 5 |
+-------+-------+-------+
| 3 1 9 | 4 7 5 | 2 6 8 |
| 8 5 6 | 1 2 9 | 7 4 3 |
| 2 7 4 | 8 3 6 | 1 5 9 |
+-------+-------+-------+
    and its solution</code></pre>
<p>Earlier, we followed a simple pruning algorithm which removed all the solved (or <em>fixed</em>) digits from neighbours of the fixed cells. We repeated the pruning till the fixed and non-fixed values in the grid stopped changing (or the grid <em>settled</em>). Here’s an example of a grid before pruning:</p>
<pre class="small plain low-line-height overflow"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] | [123456789] 1           [123456789] |
| 4           [123456789] [123456789] | [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] |
| [123456789] 2           [123456789] | [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [123456789] [123456789] [123456789] | [123456789] 5           [123456789] | 4           [123456789] 7           |
| [123456789] [123456789] 8           | [123456789] [123456789] [123456789] | 3           [123456789] [123456789] |
| [123456789] [123456789] 1           | [123456789] 9           [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [123456789] [123456789] | 4           [123456789] [123456789] | 2           [123456789] [123456789] |
| [123456789] 5           [123456789] | 1           [123456789] [123456789] | [123456789] [123456789] [123456789] |
| [123456789] [123456789] [123456789] | 8           [123456789] 6           | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p>And here’s the same grid when it settles after repeated pruning:</p>
<pre class="small plain low-line-height overflow"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [    56789] [  3  6789] [  3 567 9] | [ 23 567 9] [ 234 6 8 ] [ 2345 789] | [    56789] 1           [ 23456 89] |
| 4           [1 3  6789] [  3 567 9] | [ 23 567 9] [123  6 8 ] [123 5 789] | [    56789] [ 23 56789] [ 23 56 89] |
| [1   56789] 2           [  3 567 9] | [  3 567 9] [1 34 6 8 ] [1 345 789] | [    56789] [  3456789] [  3456 89] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [ 2   6  9] [  3  6  9] [ 23  6  9] | [ 23  6   ] 5           [123    8 ] | 4           [ 2   6 89] 7           |
| [ 2  567 9] [   4 67 9] 8           | [ 2   67  ] [12 4 6   ] [12 4  7  ] | 3           [ 2  56  9] [12  56  9] |
| [ 2  567  ] [  34 67  ] 1           | [ 23  67  ] 9           [ 234  78 ] | [    56 8 ] [ 2  56 8 ] [ 2  56 8 ] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [1    6 89] [     6  9] | 4           7           [    5   9] | 2           [    56 89] [1   56 89] |
| [ 2   6789] 5           [ 2 4 67 9] | 1           [ 23      ] [ 23     9] | [     6789] [  34 6789] [  34 6 89] |
| [12    7 9] [1  4  7 9] [ 2 4  7 9] | 8           [ 23      ] 6           | [1   5 7 9] [  345 7 9] [1 345   9] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p>We see how the possibilities conflicting with the fixed values are removed. We also see how some of the non-fixed cells turn into fixed ones as all their other possible values get eliminated.</p>
<p>This simple strategy follows directly from the constraints of Sudoku. But, are there more complex strategies which are implied indirectly?</p>
<h2 id="singles-twins-and-triplets" data-track-content data-content-name="singles-twins-and-triplets" data-content-piece="fast-sudoku-solver-in-haskell-2">Singles, Twins and Triplets<a href="#singles-twins-and-triplets" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Let’s have a look at this sample row captured from a solution in progress:</p>
<pre class="small plain low-line-height overflow"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| 4           [ 2   6 89] 7           | 3           [ 2  56  9] [12  56  9] | [    56 8 ] [ 2  56 8 ] [ 2  56 8 ] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p>Notice how the sixth cell is the only one with <code>1</code> as a possibility in it. It is obvious that we should fix the sixth cell to <code>1</code> as we cannot place <code>1</code> in any other cell in the row. Let’s call this the <em>Singles</em><a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> scenario.</p>
<p>But, our current solution will not fix the sixth cell to <code>1</code> till one of these cases arise:</p>
<ol type="a">
<li>all other possibilities of the cell are pruned away, or,</li>
<li>the cell is chosen as pivot in the <code>nextGrids</code> function and <code>1</code> is chosen as the value to fix.</li>
</ol>
<p>This may take very long and lead to a longer solution time. Let’s assume that we recognize the Singles scenario while pruning cells and fix the cell to <code>1</code> right then. That would cut down the search tree by a lot and make the solution much faster.</p>
<p>It turns out, we can generalize this pattern. Let’s check out this sample row from middle of a solution:</p>
<pre class="small plain low-line-height overflow"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [1  4    9] 3           [1  4567 9] | [1  4   89] [1  4 6 89] [1  4 6 89] | [1  4   89] 2           [1  456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p>It is a bit difficult to notice with the naked eye but there’s something special here too. The digits <code>5</code> and <code>7</code> occur only in the third and the ninth cells. Though they are accompanied by other digits in those cells, they are not present in any other cells. This means, we can place <code>5</code> and <code>7</code> either in the third or the ninth cell and no other cells. This implies that we can prune the third and ninth cells to have only <code>5</code> and <code>7</code> like this:</p>
<pre class="small plain low-line-height overflow"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [1  4    9] 3           [    5 7  ] | [1  4   89] [1  4 6 89] [1  4 6 89] | [1  4   89] 2           [    5 7  ] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p>This is the <em>Twins</em> scenario. As we can imagine, this pattern extends to groups of three digits and beyond. When three digits can be found only in three cells in a block, it is the <em>Triplets</em> scenario, as in the example below:</p>
<pre class="small plain low-line-height overflow"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [   45 7  ] [   45 7  ] [    5 7  ] | 2           [  3 5  89] 6           | 1           [  34   89] [  34   89] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p>In this case, the triplet digits are <code>3</code>, <code>8</code> and <code>9</code>. And as before, we can prune the block by fixing these digits in their cells:</p>
<pre class="small plain low-line-height overflow"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [   45 7  ] [   45 7  ] [    5 7  ] | 2           [  3    89] 6           | 1           [  3    89] [  3    89] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p>Let’s call these three scenarios <em>Exclusives</em> in general.</p>
<p>We can extend this to <em>Quadruplets</em> scenario and further. But such scenarios occur rarely in a 9x9 Sudoku puzzle. Trying to find them may end up being more computationally expensive than the benefit we may get in solution time speedup by finding them.</p>
<p>Now that we have discovered these new strategies to prune cells, let’s implement them in Haskell.</p>
<h2 id="a-little-forward-a-little-backward" data-track-content data-content-name="a-little-forward-a-little-backward" data-content-piece="fast-sudoku-solver-in-haskell-2">A Little Forward, a Little Backward<a href="#a-little-forward-a-little-backward" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>We can implement the three new strategies to prune cells as one function for each. However, we can actually implement all these strategies in a single function. But, this function is a bit more complex than the previous pruning function. So first, let’s try to understand its working using tables. Let’s take this sample row:</p>
<pre class="small plain low-line-height overflow"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [   4 6  9] 1           5           | [     6  9] 7           [ 23  6 89] | [     6  9] [ 23  6 89] [ 23  6 89] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p>First, we make a table mapping the digits to the cells in which they occur, excluding the fixed cells:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Digit</th>
<th style="text-align: right;">Cells</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">2</td>
<td style="text-align: right;">6, 8, 9</td>
</tr>
<tr class="even">
<td style="text-align: left;">3</td>
<td style="text-align: right;">6, 8, 9</td>
</tr>
<tr class="odd">
<td style="text-align: left;">4</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td style="text-align: left;">6</td>
<td style="text-align: right;">1, 4, 6, 7, 8, 9</td>
</tr>
<tr class="odd">
<td style="text-align: left;">8</td>
<td style="text-align: right;">6, 8, 9</td>
</tr>
<tr class="even">
<td style="text-align: left;">9</td>
<td style="text-align: right;">1, 4, 6, 7, 8, 9</td>
</tr>
</tbody>
</table>
</div>
<p>Then, we flip this table and collect all the digits that occur in the same set of cells:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cells</th>
<th style="text-align: right;">Digits</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">1</td>
<td style="text-align: right;">4</td>
</tr>
<tr class="even">
<td style="text-align: left;">6, 8, 9</td>
<td style="text-align: right;">2, 3, 8</td>
</tr>
<tr class="odd">
<td style="text-align: left;">1, 4, 6, 7, 8, 9</td>
<td style="text-align: right;">6, 9</td>
</tr>
</tbody>
</table>
</div>
<p>And finally, we remove the rows of the table in which the count of the cells is not the same as the count of the digits:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cells</th>
<th style="text-align: right;">Digits</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">1</td>
<td style="text-align: right;">4</td>
</tr>
<tr class="even">
<td style="text-align: left;">6, 8, 9</td>
<td style="text-align: right;">2, 3, 8</td>
</tr>
</tbody>
</table>
</div>
<p>Voilà! We have found a Single <code>4</code> and a set of Triplets <code>2</code>, <code>3</code> and <code>8</code>. You can go over the puzzle row and verify that this indeed is the case.</p>
<p>Translating this logic to Haskell is quite easy now:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1"></a><span class="ot">isPossible ::</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb11-2"><a href="#cb11-2"></a>isPossible (<span class="dt">Possible</span> _) <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb11-3"><a href="#cb11-3"></a>isPossible _            <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb11-4"><a href="#cb11-4"></a></span>
<span id="cb11-5"><a href="#cb11-5"></a><span class="ot">exclusivePossibilities ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> [[<span class="dt">Int</span>]]</span>
<span id="cb11-6"><a href="#cb11-6"></a>exclusivePossibilities row <span class="ot">=</span></span>
<span id="cb11-7"><a href="#cb11-7"></a>  <span class="co">-- input</span></span>
<span id="cb11-8"><a href="#cb11-8"></a>  row</span>
<span id="cb11-9"><a href="#cb11-9"></a>  <span class="co">-- [Possible [4,6,9], Fixed 1, Fixed 5, Possible [6,9], Fixed 7, Possible [2,3,6,8,9],</span></span>
<span id="cb11-10"><a href="#cb11-10"></a>  <span class="co">-- Possible [6,9], Possible [2,3,6,8,9], Possible [2,3,6,8,9]]</span></span>
<span id="cb11-11"><a href="#cb11-11"></a></span>
<span id="cb11-12"><a href="#cb11-12"></a>  <span class="co">-- step 1</span></span>
<span id="cb11-13"><a href="#cb11-13"></a>  <span class="op">&amp;</span> <span class="fu">zip</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">9</span>]</span>
<span id="cb11-14"><a href="#cb11-14"></a>  <span class="co">-- [(1,Possible [4,6,9]),(2,Fixed 1),(3,Fixed 5),(4,Possible [6,9]),(5,Fixed 7),</span></span>
<span id="cb11-15"><a href="#cb11-15"></a>  <span class="co">-- (6,Possible [2,3,6,8,9]),(7,Possible [6,9]),(8,Possible [2,3,6,8,9]),</span></span>
<span id="cb11-16"><a href="#cb11-16"></a>  <span class="co">-- (9,Possible [2,3,6,8,9])]</span></span>
<span id="cb11-17"><a href="#cb11-17"></a></span>
<span id="cb11-18"><a href="#cb11-18"></a>  <span class="co">-- step 2</span></span>
<span id="cb11-19"><a href="#cb11-19"></a>  <span class="op">&amp;</span> <span class="fu">filter</span> (isPossible <span class="op">.</span> <span class="fu">snd</span>)</span>
<span id="cb11-20"><a href="#cb11-20"></a>  <span class="co">-- [(1,Possible [4,6,9]),(4,Possible [6,9]),(6,Possible [2,3,6,8,9]),</span></span>
<span id="cb11-21"><a href="#cb11-21"></a>  <span class="co">-- (7,Possible [6,9]), (8,Possible [2,3,6,8,9]),(9,Possible [2,3,6,8,9])]</span></span>
<span id="cb11-22"><a href="#cb11-22"></a></span>
<span id="cb11-23"><a href="#cb11-23"></a>  <span class="co">-- step 3</span></span>
<span id="cb11-24"><a href="#cb11-24"></a>  <span class="op">&amp;</span> Data.List.foldl'</span>
<span id="cb11-25"><a href="#cb11-25"></a>      (\acc <span class="op">~</span>(i, <span class="dt">Possible</span> xs) <span class="ot">-&gt;</span></span>
<span id="cb11-26"><a href="#cb11-26"></a>        Data.List.foldl' (\acc' x <span class="ot">-&gt;</span> Map.insertWith prepend x [i] acc') acc xs)</span>
<span id="cb11-27"><a href="#cb11-27"></a>      Map.empty</span>
<span id="cb11-28"><a href="#cb11-28"></a>  <span class="co">-- fromList [(2,[9,8,6]),(3,[9,8,6]),(4,[1]),(6,[9,8,7,6,4,1]),(8,[9,8,6]),</span></span>
<span id="cb11-29"><a href="#cb11-29"></a>  <span class="co">-- (9,[9,8,7,6,4,1])]</span></span>
<span id="cb11-30"><a href="#cb11-30"></a></span>
<span id="cb11-31"><a href="#cb11-31"></a>  <span class="co">-- step 4</span></span>
<span id="cb11-32"><a href="#cb11-32"></a>  <span class="op">&amp;</span> Map.filter ((<span class="op">&lt;</span> <span class="dv">4</span>) <span class="op">.</span> <span class="fu">length</span>)</span>
<span id="cb11-33"><a href="#cb11-33"></a>  <span class="co">-- fromList [(2,[9,8,6]),(3,[9,8,6]),(4,[1]),(8,[9,8,6])]</span></span>
<span id="cb11-34"><a href="#cb11-34"></a></span>
<span id="cb11-35"><a href="#cb11-35"></a>  <span class="co">-- step 5</span></span>
<span id="cb11-36"><a href="#cb11-36"></a>  <span class="op">&amp;</span> Map.foldlWithKey'(\acc x is <span class="ot">-&gt;</span> Map.insertWith prepend is [x] acc) Map.empty</span>
<span id="cb11-37"><a href="#cb11-37"></a>  <span class="co">-- fromList [([1],[4]),([9,8,6],[8,3,2])]</span></span>
<span id="cb11-38"><a href="#cb11-38"></a></span>
<span id="cb11-39"><a href="#cb11-39"></a>  <span class="co">-- step 6</span></span>
<span id="cb11-40"><a href="#cb11-40"></a>  <span class="op">&amp;</span> Map.filterWithKey (\is xs <span class="ot">-&gt;</span> <span class="fu">length</span> is <span class="op">==</span> <span class="fu">length</span> xs)</span>
<span id="cb11-41"><a href="#cb11-41"></a>  <span class="co">-- fromList [([1],[4]),([9,8,6],[8,3,2])]</span></span>
<span id="cb11-42"><a href="#cb11-42"></a></span>
<span id="cb11-43"><a href="#cb11-43"></a>  <span class="co">-- step 7</span></span>
<span id="cb11-44"><a href="#cb11-44"></a>  <span class="op">&amp;</span> Map.elems</span>
<span id="cb11-45"><a href="#cb11-45"></a>  <span class="co">-- [[4],[8,3,2]]</span></span>
<span id="cb11-46"><a href="#cb11-46"></a>  <span class="kw">where</span></span>
<span id="cb11-47"><a href="#cb11-47"></a>    prepend <span class="op">~</span>[y] ys <span class="ot">=</span> y<span class="op">:</span>ys</span></code></pre></div>
<p>We extract the <code>isPossible</code> function to the top level from the <code>nextGrids</code> function for reuse. Then we write the <code>exclusivePossibilities</code> function which finds the Exclusives in the input row. This function is written using the reverse application operator <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Function.html#v:-38-" target="_blank" rel="noopener"><code>(&amp;)</code></a><a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> instead of the usual <code>($)</code> operator so that we can read it from top to bottom. We also show the intermediate values for a sample input after every step in the function chain.</p>
<p>The nub of the function lies in step 3 (pun intended). We do a nested fold over all the non-fixed cells and all the possible digits in them to compute the map<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> which represents the first table. Thereafter, we filter the map to keep only the entries with length less than four (step 4). Then we flip it to create a new map which represents the second table (step 5). Finally, we filter the flipped map for the entries where the cell count is same as the digit count (step 6) to arrive at the final table. The step 7 just gets the values in the map which is the list of all the Exclusives in the input row.</p>
<h2 id="pruning-the-cells-exclusively" data-track-content data-content-name="pruning-the-cells-exclusively" data-content-piece="fast-sudoku-solver-in-haskell-2">Pruning the Cells, Exclusively<a href="#pruning-the-cells-exclusively" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>To start with, we extract some reusable code from the previous <code>pruneCells</code> function and rename it to <code>pruneCellsByFixed</code>:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1"></a><span class="ot">makeCell ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cell</span></span>
<span id="cb12-2"><a href="#cb12-2"></a>makeCell ys <span class="ot">=</span> <span class="kw">case</span> ys <span class="kw">of</span></span>
<span id="cb12-3"><a href="#cb12-3"></a>  []  <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb12-4"><a href="#cb12-4"></a>  [y] <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="op">$</span> <span class="dt">Fixed</span> y</span>
<span id="cb12-5"><a href="#cb12-5"></a>  _   <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="op">$</span> <span class="dt">Possible</span> ys</span>
<span id="cb12-6"><a href="#cb12-6"></a></span>
<span id="cb12-7"><a href="#cb12-7"></a><span class="ot">pruneCellsByFixed ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Cell</span>]</span>
<span id="cb12-8"><a href="#cb12-8"></a>pruneCellsByFixed cells <span class="ot">=</span> <span class="fu">traverse</span> pruneCell cells</span>
<span id="cb12-9"><a href="#cb12-9"></a>  <span class="kw">where</span></span>
<span id="cb12-10"><a href="#cb12-10"></a>    fixeds <span class="ot">=</span> [x <span class="op">|</span> <span class="dt">Fixed</span> x <span class="ot">&lt;-</span> cells]</span>
<span id="cb12-11"><a href="#cb12-11"></a></span>
<span id="cb12-12"><a href="#cb12-12"></a>    pruneCell (<span class="dt">Possible</span> xs) <span class="ot">=</span> makeCell (xs <span class="dt">Data.List</span><span class="op">.</span>\\ fixeds)</span>
<span id="cb12-13"><a href="#cb12-13"></a>    pruneCell x             <span class="ot">=</span> <span class="dt">Just</span> x</span></code></pre></div>
<p>Now we write the <code>pruneCellsByExclusives</code> function which uses the <code>exclusivePossibilities</code> function to prune the cells:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1"></a><span class="ot">pruneCellsByExclusives ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Cell</span>]</span>
<span id="cb13-2"><a href="#cb13-2"></a>pruneCellsByExclusives cells <span class="ot">=</span> <span class="kw">case</span> exclusives <span class="kw">of</span></span>
<span id="cb13-3"><a href="#cb13-3"></a>  [] <span class="ot">-&gt;</span> <span class="dt">Just</span> cells</span>
<span id="cb13-4"><a href="#cb13-4"></a>  _  <span class="ot">-&gt;</span> <span class="fu">traverse</span> pruneCell cells</span>
<span id="cb13-5"><a href="#cb13-5"></a>  <span class="kw">where</span></span>
<span id="cb13-6"><a href="#cb13-6"></a>    exclusives    <span class="ot">=</span> exclusivePossibilities cells</span>
<span id="cb13-7"><a href="#cb13-7"></a>    allExclusives <span class="ot">=</span> <span class="fu">concat</span> exclusives</span>
<span id="cb13-8"><a href="#cb13-8"></a></span>
<span id="cb13-9"><a href="#cb13-9"></a>    pruneCell cell<span class="op">@</span>(<span class="dt">Fixed</span> _) <span class="ot">=</span> <span class="dt">Just</span> cell</span>
<span id="cb13-10"><a href="#cb13-10"></a>    pruneCell cell<span class="op">@</span>(<span class="dt">Possible</span> xs)</span>
<span id="cb13-11"><a href="#cb13-11"></a>      <span class="op">|</span> intersection <span class="ot">`elem`</span> exclusives <span class="ot">=</span> makeCell intersection</span>
<span id="cb13-12"><a href="#cb13-12"></a>      <span class="op">|</span> <span class="fu">otherwise</span>                      <span class="ot">=</span> <span class="dt">Just</span> cell</span>
<span id="cb13-13"><a href="#cb13-13"></a>      <span class="kw">where</span></span>
<span id="cb13-14"><a href="#cb13-14"></a>        intersection <span class="ot">=</span> xs <span class="ot">`Data.List.intersect`</span> allExclusives</span></code></pre></div>
<p><code>pruneCellsByExclusives</code> works exactly as shown in the examples above. We first find the list of Exclusives in the given cells. If there are no Exclusives, there’s nothing to do and we just return the cells. If we find any Exclusives, we <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Traversable.html#v:traverse" target="_blank" rel="noopener"><code>traverse</code></a> the cells, pruning each cell to only the intersection of the possible digits in the cell and Exclusive digits. That’s it! We reuse the <code>makeCell</code> function to create a new cell with the intersection.</p>
<p>As the final step, we rewrite the <code>pruneCells</code> function by combining both the functions.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1"></a><span class="ot">fixM ::</span> (<span class="dt">Eq</span> t, <span class="dt">Monad</span> m) <span class="ot">=&gt;</span> (t <span class="ot">-&gt;</span> m t) <span class="ot">-&gt;</span> t <span class="ot">-&gt;</span> m t</span>
<span id="cb14-2"><a href="#cb14-2"></a>fixM f x <span class="ot">=</span> f x <span class="op">&gt;&gt;=</span> \x' <span class="ot">-&gt;</span> <span class="kw">if</span> x' <span class="op">==</span> x <span class="kw">then</span> <span class="fu">return</span> x <span class="kw">else</span> fixM f x'</span>
<span id="cb14-3"><a href="#cb14-3"></a></span>
<span id="cb14-4"><a href="#cb14-4"></a><span class="ot">pruneCells ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Cell</span>]</span>
<span id="cb14-5"><a href="#cb14-5"></a>pruneCells cells <span class="ot">=</span> fixM pruneCellsByFixed cells <span class="op">&gt;&gt;=</span> fixM pruneCellsByExclusives</span></code></pre></div>
<p>We have extracted <code>fixM</code> as a top level function from the <code>pruneGrid</code> function. Just like the <code>pruneGrid'</code> function, we need to use monadic bind (<a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/Control-Monad.html#v:-62--62--61-" target="_blank" rel="noopener"><code>&gt;&gt;=</code></a>) to chain the two pruning steps. We also use <code>fixM</code> to apply each step repeatedly till the pruned cells settle<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>.</p>
<p>No further code changes are required. It is time to check out the improvements.</p>
<h2 id="faster-than-a-speeding-bullet" data-track-content data-content-name="faster-than-a-speeding-bullet" data-content-piece="fast-sudoku-solver-in-haskell-2">Faster than a Speeding Bullet!<a href="#faster-than-a-speeding-bullet" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Let’s build the program and run the exact same number of puzzles as before:</p>
<pre class="plain"><code>$ head -n100 sudoku17.txt | time stack exec sudoku
... output omitted ...
      0.53 real         0.58 user         0.23 sys</code></pre>
<p>Woah! It is way faster than before. Let’s solve all the puzzles now:</p>
<pre class="plain"><code>$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
      282.98 real       407.25 user       109.27 sys</code></pre>
<p>So it is took about 283 seconds to solve all the 49151 puzzles. The speedup is about 200x<a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>. That’s about 5.8 milliseconds per puzzle.</p>
<p>Let’s do a quick profiling to see where the time is going:</p>
<pre class="plain"><code>$ stack build --profile
$ head -n1000 sudoku17.txt | stack exec -- sudoku +RTS -p &gt; /dev/null</code></pre>
<p>This generates a file named <code>sudoku.prof</code> with the profiling results. Here are the top five most time-taking functions (cleaned for brevity):</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Center</th>
<th style="text-align: left;">Source</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities</code></td>
<td style="text-align: left;">(49,1)-(62,26)</td>
<td style="text-align: right;">17.6</td>
<td style="text-align: right;">11.4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCellsByFixed.pruneCell</code></td>
<td style="text-align: left;">(75,5)-(76,36)</td>
<td style="text-align: right;">16.9</td>
<td style="text-align: right;">30.8</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities.\.\</code></td>
<td style="text-align: left;">55:38-70</td>
<td style="text-align: right;">12.2</td>
<td style="text-align: right;">20.3</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>fixM.\</code></td>
<td style="text-align: left;">13:27-65</td>
<td style="text-align: right;">10.0</td>
<td style="text-align: right;">0.0</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>==</code></td>
<td style="text-align: left;">15:56-57</td>
<td style="text-align: right;">7.2</td>
<td style="text-align: right;">0.0</td>
</tr>
</tbody>
</table>
</div>
<p>Looking at the report, my guess is that a lot of time is going into list operations. Lists are known to be inefficient in Haskell so maybe we should switch to some other data structures?</p>
<h3 id="update">Update<a href="#update" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<p>As per the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/#comment-97ca7640-8531-11e8-a1d5-1fd7d3dbc496">comment</a> below by Chris Casinghino, I ran both the versions of code without the <code>-threaded</code>, <code>-rtsopts</code> and <code>-with-rtsopts=-N</code> options. The time for previous post’s code:</p>
<pre class="plain"><code>$ head -n100 sudoku17.txt | time stack exec sudoku
... output omitted ...
       96.54 real        95.90 user         0.66 sys</code></pre>
<p>And the time for this post’s code:</p>
<pre class="plain"><code>$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
      258.97 real       257.34 user         1.52 sys</code></pre>
<p>So, both the versions run about 10% faster without the threading options. I suspect this has something to do with GHC’s parallel GC as described in <a href="https://web.archive.org/web/20170612225421/https://inner-haven.net/posts/2017-05-08-speed-up-haskell-programs-weird-trick.html" target="_blank" rel="noopener">this post</a>. So for now, I’ll keep threading disabled.</p>
<h2 id="conclusion" data-track-content data-content-name="conclusion" data-content-piece="fast-sudoku-solver-in-haskell-2">Conclusion<a href="#conclusion" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>In this post, we improved upon our simple Sudoku solution from the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/">last time</a>. We discovered and implemented a new strategy to prune cells, and we achieved a 200x speedup. But profiling shows that we still have many possibilities for improvements. We’ll work on that and more in the upcoming posts in this series. The code till now is available <a href="https://code.abhinavsarkar.net/abhin4v/hasdoku/src/commit/9d6eb18229f905c52cb4c98b569abb70757ba022" target="_blank" rel="noopener">here</a>. Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/8xyfad/fast_sudoku_solver_in_haskell_2_a_200x_faster/" target="_blank" rel="noopener">r/haskell</a> or <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/#comment-container">leave a comment</a>.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>All the runs were done on my MacBook Pro from 2014 with 2.2 GHz Intel Core i7 CPU and 16 GB memory.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>At least 17 cells must be pre-filled in a Sudoku puzzle for it to have a unique solution. So 17-clue puzzles are the most difficult of all puzzles. <a href="https://arxiv.org/pdf/1201.0749v2.pdf" target="_blank" rel="noopener">This paper</a> by McGuire, Tugemann and Civario gives the proof of the same.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>“Single” as in <a href="https://en.wikipedia.org/wiki/Single_child" target="_blank" rel="noopener">“Single child”</a><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>Reverse application operation is not used much in Haskell. But it is the preferred way of function chaining in some other functional programming languages like <a href="https://clojuredocs.org/clojure.core/-%3E" target="_blank" rel="noopener">Clojure</a>, <a href="https://msdn.microsoft.com/en-us/visualfsharpdocs/conceptual/operators.%5b-h%5d-%5d%5b't1,'u%5d-function-%5bfsharp%5d" target="_blank" rel="noopener">FSharp</a>, and <a href="https://hexdocs.pm/elixir/Kernel.html#%7C%3E/2" target="_blank" rel="noopener">Elixir</a>.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p>We use <a href="https://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-Map-Strict.html" target="_blank" rel="noopener">Data.Map.Strict</a> as the map imple­mentation.<a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6" role="doc-endnote"><p>We need to run <code>pruneCellsByFixed</code> and <code>pruneCellsByExclusives</code> repeatedly using <code>fixM</code> because an unsettled row can lead to wrong solutions.</p>
<p>Imagine a row which just got a <code>9</code> fixed because of <code>pruneCellsByFixed</code>. If we don’t run the function again, the row may be left with one non-fixed cell with a <code>9</code>. When we run this row through <code>pruneCellsByExclusives</code>, it’ll consider the <code>9</code> in the non-fixed cell as a Single and fix it. This will lead to two <code>9</code>s in the same row, causing the solution to fail.<a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7" role="doc-endnote"><p>Speedup calculation: 116.7 / 100 * 49151 / 282.98 = 202.7<a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section><p>If you liked this post, please <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/#comment-container">leave a comment</a>.</p><img src="https://anna.abhinavsarkar.net/piwik.php?idsite=1&amp;rec=1" style="border:0; display: none;" />]]></summary>
</entry>
<entry>
    <title>Fast Sudoku Solver in Haskell #1: A Simple Solution</title>
    <link rel="alternate" href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/" />
    <id>https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/</id>
    <published>2018-06-28T00:00:00Z</published>
    <updated>2018-06-28T00:00:00Z</updated>
    
    <author>
        <name>Abhinav Sarkar</name>
        <email>abhinav@abhinavsarkar.net</email>
        <uri>https://abhinavsarkar.net/about/</uri>
    </author>
    
    
    <category term="haskell" />
    
    <category term="sudoku" />
    
    <category term="programming" />
    
    <category term="puzzle" />
    
    <category term="nilenso" />
    
    <summary type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Sudoku" target="_blank" rel="noopener">Sudoku</a> is a number placement puzzle. It consists of a 9x9 grid which is to be filled with digits from 1 to 9. Some of the cells of the grid come pre-filled and the player has to fill the rest.</p>
<p><a href="https://www.haskell.org/" target="_blank" rel="noopener">Haskell</a> is a purely functional programming language. It is a good choice to solve Sudoku given the problem’s <a href="https://en.wikipedia.org/wiki/Combinatorics" target="_blank" rel="noopener">combinatorial</a> nature. The aim of this series of posts is to write a <strong>fast</strong> Sudoku solver in Haskell. We’ll focus on both implementing the solution and making it efficient, step-by-step, starting with a slow but simple solution in this post<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>.</p>
<!--more-->
<p>This is the first post in a series of posts:</p>
<ol type="1">
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/">Fast Sudoku Solver in Haskell #1: A Simple Solution</a></li>
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/">Fast Sudoku Solver in Haskell #2: A 200x Faster Solution</a></li>
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-3/">Fast Sudoku Solver in Haskell #3: Picking the Right Data Structures</a></li>
</ol>
<p>Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/8uapij/fast_sudoku_solver_in_haskell/" target="_blank" rel="noopener">r/haskell</a>.</p>
<nav id="toc" class="right-toc"><h3>Contents</h3><ol><li><a href="#constraint-satisfaction-problem">Constraint Satisfaction Problem</a></li><li><a href="#setting-up">Setting up</a></li><li><a href="#pruning-the-cells">Pruning the Cells</a></li><li><a href="#pruning-the-grid">Pruning the Grid</a></li><li><a href="#making-the-choice">Making the Choice</a></li><li><a href="#solving-the-puzzle">Solving the Puzzle</a></li><li><a href="#conclusion">Conclusion</a></li></ol></nav>
<h2 id="constraint-satisfaction-problem" data-track-content data-content-name="constraint-satisfaction-problem" data-content-piece="fast-sudoku-solver-in-haskell-1">Constraint Satisfaction Problem<a href="#constraint-satisfaction-problem" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Solving Sudoku is a <a href="https://en.wikipedia.org/wiki/Constraint_satisfaction_problem" target="_blank" rel="noopener">constraint satisfaction problem</a>. We are given a partially filled grid which we have to fill completely such that each of the following constraints are satisfied:</p>
<ol type="1">
<li>Each of the nine rows must have all the digits, from 1 to 9.</li>
<li>Each of the nine columns must have all the digits, from 1 to 9.</li>
<li>Each of the nine 3x3 sub-grids must have all the digits, from 1 to 9.</li>
</ol>
<pre class="plain low-line-height"><code>+-------+-------+-------+
| . . . | . . . | . 1 . |
| 4 . . | . . . | . . . |
| . 2 . | . . . | . . . |
+-------+-------+-------+
| . . . | . 5 . | 4 . 7 |
| . . 8 | . . . | 3 . . |
| . . 1 | . 9 . | . . . |
+-------+-------+-------+
| 3 . . | 4 . . | 2 . . |
| . 5 . | 1 . . | . . . |
| . . . | 8 . 6 | . . . |
+-------+-------+-------+
    A sample puzzle

+-------+-------+-------+
| 6 9 3 | 7 8 4 | 5 1 2 |
| 4 8 7 | 5 1 2 | 9 3 6 |
| 1 2 5 | 9 6 3 | 8 7 4 |
+-------+-------+-------+
| 9 3 2 | 6 5 1 | 4 8 7 |
| 5 6 8 | 2 4 7 | 3 9 1 |
| 7 4 1 | 3 9 8 | 6 2 5 |
+-------+-------+-------+
| 3 1 9 | 4 7 5 | 2 6 8 |
| 8 5 6 | 1 2 9 | 7 4 3 |
| 2 7 4 | 8 3 6 | 1 5 9 |
+-------+-------+-------+
    and its solution</code></pre>
<p>Each cell in the grid is member of one row, one column and one sub-grid (called <em>block</em> in general). Digits in the pre-filled cells impose constraints on the rows, columns, and sub-grids they are part of. For example, if a cell contains <code>1</code> then no other cell in that cell’s row, column or sub-grid can contain <code>1</code>. Given these constraints, we can devise a simple algorithm to solve Sudoku:</p>
<ol type="1">
<li>Each cell contains either a single digit or has a set of possible digits. For example, a grid showing the possibilities of all non-filled cells for the sample puzzle above:</li>
</ol>
<pre class="small plain low-line-height overflow"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] | [123456789] 1           [123456789] |
| 4           [123456789] [123456789] | [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] |
| [123456789] 2           [123456789] | [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [123456789] [123456789] [123456789] | [123456789] 5           [123456789] | 4           [123456789] 7           |
| [123456789] [123456789] 8           | [123456789] [123456789] [123456789] | 3           [123456789] [123456789] |
| [123456789] [123456789] 1           | [123456789] 9           [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [123456789] [123456789] | 4           [123456789] [123456789] | 2           [123456789] [123456789] |
| [123456789] 5           [123456789] | 1           [123456789] [123456789] | [123456789] [123456789] [123456789] |
| [123456789] [123456789] [123456789] | 8           [123456789] 6           | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<ol start="2" type="1">
<li>If a cell contains a digit, remove that digit from the list of the possible digits from all its neighboring cells. Neighboring cells are the other cells in the given cell’s row, column and sub-grid. For example, the grid after removing the fixed value <code>4</code> of the row-2-column-1 cell from its neighboring cells:</li>
</ol>
<pre class="small plain low-line-height overflow"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [123 56789] [123 56789] [123 56789] | [123456789] [123456789] [123456789] | [123456789] 1           [123456789] |
| 4           [123 56789] [123 56789] | [123 56789] [123 56789] [123 56789] | [123 56789] [123 56789] [123 56789] |
| [123 56789] 2           [123 56789] | [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [123 56789] [123456789] [123456789] | [123456789] 5           [123456789] | 4           [123456789] 7           |
| [123 56789] [123456789] 8           | [123456789] [123456789] [123456789] | 3           [123456789] [123456789] |
| [123 56789] [123456789] 1           | [123456789] 9           [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [123456789] [123456789] | 4           [123456789] [123456789] | 2           [123456789] [123456789] |
| [123 56789] 5           [123456789] | 1           [123456789] [123456789] | [123456789] [123456789] [123456789] |
| [123 56789] [123456789] [123456789] | 8           [123456789] 6           | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<ol start="3" type="1">
<li>Repeat the previous step for all the cells that are have been solved (or <em>fixed</em>), either pre-filled or filled in the previous iteration of the solution. For example, the grid after removing all fixed values from all non-fixed cells:</li>
</ol>
<pre class="small plain low-line-height overflow"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [    56789] [  3  6789] [  3 567 9] | [ 23 567 9] [ 234 678 ] [ 2345 789] | [    56789] 1           [ 23456 89] |
| 4           [1 3  6789] [  3 567 9] | [ 23 567 9] [123  678 ] [123 5 789] | [    56789] [ 23 56789] [ 23 56 89] |
| [1   56789] 2           [  3 567 9] | [  3 567 9] [1 34 678 ] [1 345 789] | [    56789] [  3456789] [  3456 89] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [ 2   6  9] [  3  6  9] [ 23  6  9] | [ 23  6   ] 5           [123    8 ] | 4           [ 2   6 89] 7           |
| [ 2  567 9] [   4 67 9] 8           | [ 2   67  ] [12 4 67  ] [12 4  7  ] | 3           [ 2  56  9] [12  56  9] |
| [ 2  567  ] [  34 67  ] 1           | [ 23  67  ] 9           [ 234  78 ] | [    56 8 ] [ 2  56 8 ] [ 2  56 8 ] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [1    6789] [     67 9] | 4           7           [    5 7 9] | 2           [    56789] [1   56 89] |
| [ 2   6789] 5           [ 2 4 67 9] | 1           [ 23   7  ] [ 23   7 9] | [     6789] [  34 6789] [  34 6 89] |
| [12    7 9] [1  4  7 9] [ 2 4  7 9] | 8           [ 23   7  ] 6           | [1   5 7 9] [  345 7 9] [1 345   9] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<ol start="4" type="1">
<li>Continue till the grid <em>settles</em>, that is, there are no more changes in the possibilities of any cells. For example, the settled grid for the current iteration:</li>
</ol>
<pre class="small plain low-line-height overflow"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [    56789] [  3  6789] [  3 567 9] | [ 23 567 9] [ 234 6 8 ] [ 2345 789] | [    56789] 1           [ 23456 89] |
| 4           [1 3  6789] [  3 567 9] | [ 23 567 9] [123  6 8 ] [123 5 789] | [    56789] [ 23 56789] [ 23 56 89] |
| [1   56789] 2           [  3 567 9] | [  3 567 9] [1 34 6 8 ] [1 345 789] | [    56789] [  3456789] [  3456 89] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [ 2   6  9] [  3  6  9] [ 23  6  9] | [ 23  6   ] 5           [123    8 ] | 4           [ 2   6 89] 7           |
| [ 2  567 9] [   4 67 9] 8           | [ 2   67  ] [12 4 6   ] [12 4  7  ] | 3           [ 2  56  9] [12  56  9] |
| [ 2  567  ] [  34 67  ] 1           | [ 23  67  ] 9           [ 234  78 ] | [    56 8 ] [ 2  56 8 ] [ 2  56 8 ] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [1    6 89] [     6  9] | 4           7           [    5   9] | 2           [    56 89] [1   56 89] |
| [ 2   6789] 5           [ 2 4 67 9] | 1           [ 23      ] [ 23     9] | [     6789] [  34 6789] [  34 6 89] |
| [12    7 9] [1  4  7 9] [ 2 4  7 9] | 8           [ 23      ] 6           | [1   5 7 9] [  345 7 9] [1 345   9] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<ol start="5" type="1">
<li>Once the grid settles, choose one of the non-fixed cells following some strategy. Select one of the digits from all the possibilities of the cell, and fix (assume) the cell to have that digit. Go back to step 1 and repeat.</li>
<li>The elimination of possibilities may result in inconsistencies. For example, you may end up with a cell with no possibilities. In such a case, discard that branch of solution, and backtrack to last point where you fixed a cell. Choose a different possibility to fix and repeat.</li>
<li>If at any point the grid is completely filled, you’ve found the solution!</li>
<li>If you exhaust all branches of the solution then the puzzle is unsolvable. This can happen if it starts with cells pre-filled wrongly.</li>
</ol>
<p>This algorithm is actually a <a href="https://en.wikipedia.org/wiki/Depth-first_search" target="_blank" rel="noopener">Depth-First Search</a> on the <a href="https://en.wikipedia.org/wiki/State_space_search" target="_blank" rel="noopener">state space</a> of the grid configurations. It guarantees to either find a solution or prove a puzzle to be unsolvable.</p>
<h2 id="setting-up" data-track-content data-content-name="setting-up" data-content-piece="fast-sudoku-solver-in-haskell-1">Setting up<a href="#setting-up" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>We start with writing types to represent the cells and the grid:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">data</span> <span class="dt">Cell</span> <span class="ot">=</span> <span class="dt">Fixed</span> <span class="dt">Int</span> <span class="op">|</span> <span class="dt">Possible</span> [<span class="dt">Int</span>] <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="kw">type</span> <span class="dt">Row</span>  <span class="ot">=</span> [<span class="dt">Cell</span>]</span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="kw">type</span> <span class="dt">Grid</span> <span class="ot">=</span> [<span class="dt">Row</span>]</span></code></pre></div>
<p>A cell is either fixed with a particular digit or has a set of digits as possibilities. So it is natural to represent it as a <a href="https://en.wikipedia.org/wiki/Algebraic_data_type" target="_blank" rel="noopener">sum type</a> with <code>Fixed</code> and <code>Possible</code> constructors. A row is a list of cells and a grid is a list of rows.</p>
<p>We’ll take the input puzzle as a string of 81 characters representing the cells, left-to-right and top-to-bottom. An example is:</p>
<pre class="plain"><code>.......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...</code></pre>
<p>Here, <code>.</code> represents an non-filled cell. Let’s write a function to read this input and parse it to our <code>Grid</code> data structure:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a><span class="ot">readGrid ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></span>
<span id="cb8-2"><a href="#cb8-2"></a>readGrid s</span>
<span id="cb8-3"><a href="#cb8-3"></a>  <span class="op">|</span> <span class="fu">length</span> s <span class="op">==</span> <span class="dv">81</span> <span class="ot">=</span> <span class="fu">traverse</span> (<span class="fu">traverse</span> readCell) <span class="op">.</span> Data.List.Split.chunksOf <span class="dv">9</span> <span class="op">$</span> s</span>
<span id="cb8-4"><a href="#cb8-4"></a>  <span class="op">|</span> <span class="fu">otherwise</span>      <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb8-5"><a href="#cb8-5"></a>  <span class="kw">where</span></span>
<span id="cb8-6"><a href="#cb8-6"></a>    readCell <span class="ch">'.'</span> <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span> <span class="dt">Possible</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">9</span>]</span>
<span id="cb8-7"><a href="#cb8-7"></a>    readCell c</span>
<span id="cb8-8"><a href="#cb8-8"></a>      <span class="op">|</span> Data.Char.isDigit c <span class="op">&amp;&amp;</span> c <span class="op">&gt;</span> <span class="ch">'0'</span> <span class="ot">=</span> <span class="dt">Just</span> <span class="op">.</span> <span class="dt">Fixed</span> <span class="op">.</span> Data.Char.digitToInt <span class="op">$</span> c</span>
<span id="cb8-9"><a href="#cb8-9"></a>      <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p><code>readGrid</code> return a <code>Just grid</code> if the input is correct, else it returns a <code>Nothing</code>. It parses a <code>.</code> to a <code>Possible</code> cell with all digits as possibilities, and a digit char to a <code>Fixed</code> cell with that digit. Let’s try it out in the <em>REPL</em>:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode small haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid <span class="ot">=</span> readGrid <span class="st">&quot;.......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></span>
<span id="cb9-2"><a href="#cb9-2"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">mapM_</span> <span class="fu">print</span> grid</span>
<span id="cb9-3"><a href="#cb9-3"></a>[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">1</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</span>
<span id="cb9-4"><a href="#cb9-4"></a>[<span class="dt">Fixed</span> <span class="dv">4</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</span>
<span id="cb9-5"><a href="#cb9-5"></a>[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">2</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</span>
<span id="cb9-6"><a href="#cb9-6"></a>[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">5</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">4</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">7</span>]</span>
<span id="cb9-7"><a href="#cb9-7"></a>[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">8</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">3</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</span>
<span id="cb9-8"><a href="#cb9-8"></a>[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">1</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">9</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</span>
<span id="cb9-9"><a href="#cb9-9"></a>[<span class="dt">Fixed</span> <span class="dv">3</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">4</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">2</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</span>
<span id="cb9-10"><a href="#cb9-10"></a>[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">5</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">1</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</span>
<span id="cb9-11"><a href="#cb9-11"></a>[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">8</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">6</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</span></code></pre></div>
<p>The output is a bit unreadable but correct. We can write a few functions to clean it up:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1"></a><span class="ot">showGrid ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb10-2"><a href="#cb10-2"></a>showGrid <span class="ot">=</span> <span class="fu">unlines</span> <span class="op">.</span> <span class="fu">map</span> (<span class="fu">unwords</span> <span class="op">.</span> <span class="fu">map</span> showCell)</span>
<span id="cb10-3"><a href="#cb10-3"></a>  <span class="kw">where</span></span>
<span id="cb10-4"><a href="#cb10-4"></a>    showCell (<span class="dt">Fixed</span> x) <span class="ot">=</span> <span class="fu">show</span> x</span>
<span id="cb10-5"><a href="#cb10-5"></a>    showCell _ <span class="ot">=</span> <span class="st">&quot;.&quot;</span></span>
<span id="cb10-6"><a href="#cb10-6"></a></span>
<span id="cb10-7"><a href="#cb10-7"></a><span class="ot">showGridWithPossibilities ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb10-8"><a href="#cb10-8"></a>showGridWithPossibilities <span class="ot">=</span> <span class="fu">unlines</span> <span class="op">.</span> <span class="fu">map</span> (<span class="fu">unwords</span> <span class="op">.</span> <span class="fu">map</span> showCell)</span>
<span id="cb10-9"><a href="#cb10-9"></a>  <span class="kw">where</span></span>
<span id="cb10-10"><a href="#cb10-10"></a>    showCell (<span class="dt">Fixed</span> x)     <span class="ot">=</span> <span class="fu">show</span> x <span class="op">++</span> <span class="st">&quot;          &quot;</span></span>
<span id="cb10-11"><a href="#cb10-11"></a>    showCell (<span class="dt">Possible</span> xs) <span class="ot">=</span></span>
<span id="cb10-12"><a href="#cb10-12"></a>      (<span class="op">++</span> <span class="st">&quot;]&quot;</span>)</span>
<span id="cb10-13"><a href="#cb10-13"></a>      <span class="op">.</span> Data.List.foldl' (\acc x <span class="ot">-&gt;</span> acc <span class="op">++</span> <span class="kw">if</span> x <span class="ot">`elem`</span> xs <span class="kw">then</span> <span class="fu">show</span> x <span class="kw">else</span> <span class="st">&quot; &quot;</span>) <span class="st">&quot;[&quot;</span></span>
<span id="cb10-14"><a href="#cb10-14"></a>      <span class="op">$</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">9</span>]</span></code></pre></div>
<p>Back to the <em>REPL</em> again:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid <span class="ot">=</span> readGrid <span class="st">&quot;.......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></span>
<span id="cb11-2"><a href="#cb11-2"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStrLn</span> <span class="op">$</span> showGrid grid</span>
<span id="cb11-3"><a href="#cb11-3"></a><span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">1</span> <span class="op">.</span></span>
<span id="cb11-4"><a href="#cb11-4"></a><span class="dv">4</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb11-5"><a href="#cb11-5"></a><span class="op">.</span> <span class="dv">2</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb11-6"><a href="#cb11-6"></a><span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">5</span> <span class="op">.</span> <span class="dv">4</span> <span class="op">.</span> <span class="dv">7</span></span>
<span id="cb11-7"><a href="#cb11-7"></a><span class="op">.</span> <span class="op">.</span> <span class="dv">8</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">3</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb11-8"><a href="#cb11-8"></a><span class="op">.</span> <span class="op">.</span> <span class="dv">1</span> <span class="op">.</span> <span class="dv">9</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb11-9"><a href="#cb11-9"></a><span class="dv">3</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">4</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">2</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb11-10"><a href="#cb11-10"></a><span class="op">.</span> <span class="dv">5</span> <span class="op">.</span> <span class="dv">1</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb11-11"><a href="#cb11-11"></a><span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">8</span> <span class="op">.</span> <span class="dv">6</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span></code></pre></div>
<div class="sourceCode" id="cb12"><pre class="sourceCode small haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStrLn</span> <span class="op">$</span> showGridWithPossibilities grid</span>
<span id="cb12-2"><a href="#cb12-2"></a>[<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">1</span>           [<span class="dv">123456789</span>]</span>
<span id="cb12-3"><a href="#cb12-3"></a><span class="dv">4</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</span>
<span id="cb12-4"><a href="#cb12-4"></a>[<span class="dv">123456789</span>] <span class="dv">2</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</span>
<span id="cb12-5"><a href="#cb12-5"></a>[<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">5</span>           [<span class="dv">123456789</span>] <span class="dv">4</span>           [<span class="dv">123456789</span>] <span class="dv">7</span></span>
<span id="cb12-6"><a href="#cb12-6"></a>[<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">8</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">3</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</span>
<span id="cb12-7"><a href="#cb12-7"></a>[<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">1</span>           [<span class="dv">123456789</span>] <span class="dv">9</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</span>
<span id="cb12-8"><a href="#cb12-8"></a><span class="dv">3</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">4</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">2</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</span>
<span id="cb12-9"><a href="#cb12-9"></a>[<span class="dv">123456789</span>] <span class="dv">5</span>           [<span class="dv">123456789</span>] <span class="dv">1</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</span>
<span id="cb12-10"><a href="#cb12-10"></a>[<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">8</span>           [<span class="dv">123456789</span>] <span class="dv">6</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</span></code></pre></div>
<p>The output is more readable now. We see that, at the start, all the non-filled cells have all the digits as possible values. We’ll use these functions for debugging as we go forward. We can now start solving the puzzle.</p>
<div class="page-break">

</div>
<h2 id="pruning-the-cells" data-track-content data-content-name="pruning-the-cells" data-content-piece="fast-sudoku-solver-in-haskell-1">Pruning the Cells<a href="#pruning-the-cells" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>We can remove the digits of fixed cells from their neighboring cells, one cell as a time. But, it is faster to find all the fixed digits in a row of cells and remove them from the possibilities of all the non-fixed cells of the row, at once. Then we can repeat this <em>pruning</em> step for all the rows of the grid (and columns and sub-grids too! We’ll see how).</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1"></a><span class="ot">pruneCells ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Cell</span>]</span>
<span id="cb13-2"><a href="#cb13-2"></a>pruneCells cells <span class="ot">=</span> <span class="fu">traverse</span> pruneCell cells</span>
<span id="cb13-3"><a href="#cb13-3"></a>  <span class="kw">where</span></span>
<span id="cb13-4"><a href="#cb13-4"></a>    fixeds <span class="ot">=</span> [x <span class="op">|</span> <span class="dt">Fixed</span> x <span class="ot">&lt;-</span> cells]</span>
<span id="cb13-5"><a href="#cb13-5"></a></span>
<span id="cb13-6"><a href="#cb13-6"></a>    pruneCell (<span class="dt">Possible</span> xs) <span class="ot">=</span> <span class="kw">case</span> xs <span class="dt">Data.List</span><span class="op">.</span>\\ fixeds <span class="kw">of</span></span>
<span id="cb13-7"><a href="#cb13-7"></a>      []  <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb13-8"><a href="#cb13-8"></a>      [y] <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="op">$</span> <span class="dt">Fixed</span> y</span>
<span id="cb13-9"><a href="#cb13-9"></a>      ys  <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="op">$</span> <span class="dt">Possible</span> ys</span>
<span id="cb13-10"><a href="#cb13-10"></a>    pruneCell x <span class="ot">=</span> <span class="dt">Just</span> x</span></code></pre></div>
<p><code>pruneCells</code> prunes a list of cells as described before. We start with finding the fixed digits in the list of cells. Then we go over each non-fixed cells, removing the fixed digits we found, from their possible values. Two special cases arise:</p>
<ul>
<li>If pruning results in a cell with no possible digits, it is a sign that this branch of search has no solution and hence, we return a <code>Nothing</code> in that case.</li>
<li>If only one possible digit remains after pruning, then we turn that cell into a fixed cell with that digit.</li>
</ul>
<p>We use the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Traversable.html#v:traverse" target="_blank" rel="noopener"><code>traverse</code></a> function for pruning the cells so that a <code>Nothing</code> resulting from pruning one cell propagates to the entire list.</p>
<p>Let’s take it for a spin in the <em>REPL</em>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode small haskell overflow"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid <span class="ot">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></span>
<span id="cb14-2"><a href="#cb14-2"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGridWithPossibilities <span class="op">$</span> [<span class="fu">head</span> grid] <span class="co">-- first row of the grid</span></span>
<span id="cb14-3"><a href="#cb14-3"></a><span class="dv">6</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">1</span>           [<span class="dv">123456789</span>]</span>
<span id="cb14-4"><a href="#cb14-4"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGridWithPossibilities [fromJust <span class="op">$</span> pruneCells <span class="op">$</span> <span class="fu">head</span> grid] <span class="co">-- same row after pruning</span></span>
<span id="cb14-5"><a href="#cb14-5"></a><span class="dv">6</span>           [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span> <span class="dv">789</span>]</span></code></pre></div>
<p>It works! <code>6</code> and <code>1</code> are removed from the possibilities of the other cells. Now we are ready for …</p>
<h2 id="pruning-the-grid" data-track-content data-content-name="pruning-the-grid" data-content-piece="fast-sudoku-solver-in-haskell-1">Pruning the Grid<a href="#pruning-the-grid" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Pruning a grid requires us to prune each row, each column and each sub-grid. Let’s try to solve it in the <em>REPL</em> first:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode small haskell overflow"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid <span class="ot">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></span>
<span id="cb15-2"><a href="#cb15-2"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid' <span class="ot">=</span> <span class="fu">traverse</span> pruneCells grid</span>
<span id="cb15-3"><a href="#cb15-3"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGridWithPossibilities grid'</span>
<span id="cb15-4"><a href="#cb15-4"></a><span class="dv">6</span>           [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span> <span class="dv">789</span>]</span>
<span id="cb15-5"><a href="#cb15-5"></a><span class="dv">4</span>           [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>]</span>
<span id="cb15-6"><a href="#cb15-6"></a>[<span class="dv">1</span> <span class="dv">3456789</span>] <span class="dv">2</span>           [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>]</span>
<span id="cb15-7"><a href="#cb15-7"></a>[<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">5</span>           [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">4</span>           [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></span>
<span id="cb15-8"><a href="#cb15-8"></a>[<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] <span class="dv">8</span>           [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] <span class="dv">3</span>           [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>]</span>
<span id="cb15-9"><a href="#cb15-9"></a>[ <span class="dv">2345678</span> ] [ <span class="dv">2345678</span> ] <span class="dv">1</span>           [ <span class="dv">2345678</span> ] <span class="dv">9</span>           [ <span class="dv">2345678</span> ] [ <span class="dv">2345678</span> ] [ <span class="dv">2345678</span> ] [ <span class="dv">2345678</span> ]</span>
<span id="cb15-10"><a href="#cb15-10"></a><span class="dv">3</span>           [<span class="dv">1</span>   <span class="dv">56789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] <span class="dv">4</span>           [<span class="dv">1</span>   <span class="dv">56789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] <span class="dv">2</span>           [<span class="dv">1</span>   <span class="dv">56789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>]</span>
<span id="cb15-11"><a href="#cb15-11"></a>[ <span class="dv">234</span> <span class="dv">6789</span>] <span class="dv">5</span>           [ <span class="dv">234</span> <span class="dv">6789</span>] <span class="dv">1</span>           [ <span class="dv">234</span> <span class="dv">6789</span>] [ <span class="dv">234</span> <span class="dv">6789</span>] [ <span class="dv">234</span> <span class="dv">6789</span>] [ <span class="dv">234</span> <span class="dv">6789</span>] [ <span class="dv">234</span> <span class="dv">6789</span>]</span>
<span id="cb15-12"><a href="#cb15-12"></a>[<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">6</span>           [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>]</span></code></pre></div>
<p>By <code>traverse</code>-ing the grid with <code>pruneCells</code>, we are able to prune each row, one-by-one. Since pruning a row doesn’t affect another row, we don’t have to pass the resulting rows between each pruning step. That is to say, <code>traverse</code> is enough for us, we don’t need <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Foldable.html#v:foldl" target="_blank" rel="noopener"><code>foldl</code></a> here.</p>
<p>How do we do the same thing for columns now? Since our representation for the grid is rows-first, we first need to convert it to a columns-first representation. Luckily, that’s what <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-List.html#v:transpose" target="_blank" rel="noopener"><code>Data.List.transpose</code></a> function does:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid <span class="ot">=</span> readGrid <span class="st">&quot;693784512487512936125963874932651487568247391741398625319475268856129743274836159&quot;</span></span>
<span id="cb16-2"><a href="#cb16-2"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGrid grid</span>
<span id="cb16-3"><a href="#cb16-3"></a><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span></span>
<span id="cb16-4"><a href="#cb16-4"></a><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span></span>
<span id="cb16-5"><a href="#cb16-5"></a><span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></span>
<span id="cb16-6"><a href="#cb16-6"></a><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span></span>
<span id="cb16-7"><a href="#cb16-7"></a><span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span></span>
<span id="cb16-8"><a href="#cb16-8"></a><span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></span>
<span id="cb16-9"><a href="#cb16-9"></a><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span></span>
<span id="cb16-10"><a href="#cb16-10"></a><span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span></span>
<span id="cb16-11"><a href="#cb16-11"></a><span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></span>
<span id="cb16-12"><a href="#cb16-12"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGrid <span class="op">$</span> Data.List.transpose grid</span>
<span id="cb16-13"><a href="#cb16-13"></a><span class="dv">6</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">2</span></span>
<span id="cb16-14"><a href="#cb16-14"></a><span class="dv">9</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">7</span></span>
<span id="cb16-15"><a href="#cb16-15"></a><span class="dv">3</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">8</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">4</span></span>
<span id="cb16-16"><a href="#cb16-16"></a><span class="dv">7</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">3</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">8</span></span>
<span id="cb16-17"><a href="#cb16-17"></a><span class="dv">8</span> <span class="dv">1</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">4</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">2</span> <span class="dv">3</span></span>
<span id="cb16-18"><a href="#cb16-18"></a><span class="dv">4</span> <span class="dv">2</span> <span class="dv">3</span> <span class="dv">1</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span></span>
<span id="cb16-19"><a href="#cb16-19"></a><span class="dv">5</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">7</span> <span class="dv">1</span></span>
<span id="cb16-20"><a href="#cb16-20"></a><span class="dv">1</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">9</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">4</span> <span class="dv">5</span></span>
<span id="cb16-21"><a href="#cb16-21"></a><span class="dv">2</span> <span class="dv">6</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">9</span></span></code></pre></div>
<p>Pruning columns is easy now:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode small haskell overflow"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid <span class="ot">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></span>
<span id="cb17-2"><a href="#cb17-2"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid' <span class="ot">=</span> <span class="fu">fmap</span> Data.List.transpose <span class="op">.</span> <span class="fu">traverse</span> pruneCells <span class="op">.</span> Data.List.transpose <span class="op">$</span> grid</span>
<span id="cb17-3"><a href="#cb17-3"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGridWithPossibilities grid'</span>
<span id="cb17-4"><a href="#cb17-4"></a><span class="dv">6</span>           [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] <span class="dv">1</span>           [<span class="dv">123456</span> <span class="dv">89</span>]</span>
<span id="cb17-5"><a href="#cb17-5"></a><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</span>
<span id="cb17-6"><a href="#cb17-6"></a>[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</span>
<span id="cb17-7"><a href="#cb17-7"></a>[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] <span class="dv">5</span>           [<span class="dv">12345</span> <span class="dv">789</span>] <span class="dv">4</span>           [ <span class="dv">23456789</span>] <span class="dv">7</span></span>
<span id="cb17-8"><a href="#cb17-8"></a>[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] <span class="dv">8</span>           [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] <span class="dv">3</span>           [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</span>
<span id="cb17-9"><a href="#cb17-9"></a>[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] <span class="dv">1</span>           [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] <span class="dv">9</span>           [<span class="dv">12345</span> <span class="dv">789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</span>
<span id="cb17-10"><a href="#cb17-10"></a><span class="dv">3</span>           [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] <span class="dv">4</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] <span class="dv">2</span>           [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</span>
<span id="cb17-11"><a href="#cb17-11"></a>[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">234567</span> <span class="dv">9</span>] <span class="dv">1</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</span>
<span id="cb17-12"><a href="#cb17-12"></a>[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] <span class="dv">8</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">56789</span>] [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</span></code></pre></div>
<p>First, we <code>transpose</code> the grid to convert the columns into rows. Then, we prune the rows by <code>traverse</code>-ing <code>pruneCells</code> over them. And finally, we turn the rows back into columns by <code>transpose</code>-ing the grid back again. The last <code>transpose</code> needs to be <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Prelude.html#v:fmap" target="_blank" rel="noopener"><code>fmap</code></a>-ped because <code>traverse pruneCells</code> returns a <code>Maybe</code>.</p>
<p>Pruning sub-grids is a bit trickier. Following the same idea as pruning columns, we need two functions to transform the sub-grids into rows and back. Let’s write the first one:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1"></a><span class="ot">subGridsToRows ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Grid</span></span>
<span id="cb18-2"><a href="#cb18-2"></a>subGridsToRows <span class="ot">=</span></span>
<span id="cb18-3"><a href="#cb18-3"></a>  <span class="fu">concatMap</span> (\rows <span class="ot">-&gt;</span> <span class="kw">let</span> [r1, r2, r3] <span class="ot">=</span> <span class="fu">map</span> (Data.List.Split.chunksOf <span class="dv">3</span>) rows</span>
<span id="cb18-4"><a href="#cb18-4"></a>                      <span class="kw">in</span> <span class="fu">zipWith3</span> (\a b c <span class="ot">-&gt;</span> a <span class="op">++</span> b <span class="op">++</span> c) r1 r2 r3)</span>
<span id="cb18-5"><a href="#cb18-5"></a>  <span class="op">.</span> Data.List.Split.chunksOf <span class="dv">3</span></span></code></pre></div>
<p>And try it out:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid <span class="ot">=</span> readGrid <span class="st">&quot;693784512487512936125963874932651487568247391741398625319475268856129743274836159&quot;</span></span>
<span id="cb19-2"><a href="#cb19-2"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGrid grid</span>
<span id="cb19-3"><a href="#cb19-3"></a><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span></span>
<span id="cb19-4"><a href="#cb19-4"></a><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span></span>
<span id="cb19-5"><a href="#cb19-5"></a><span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></span>
<span id="cb19-6"><a href="#cb19-6"></a><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span></span>
<span id="cb19-7"><a href="#cb19-7"></a><span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span></span>
<span id="cb19-8"><a href="#cb19-8"></a><span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></span>
<span id="cb19-9"><a href="#cb19-9"></a><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span></span>
<span id="cb19-10"><a href="#cb19-10"></a><span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span></span>
<span id="cb19-11"><a href="#cb19-11"></a><span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></span>
<span id="cb19-12"><a href="#cb19-12"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGrid <span class="op">$</span> subGridsToRows grid</span>
<span id="cb19-13"><a href="#cb19-13"></a><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span></span>
<span id="cb19-14"><a href="#cb19-14"></a><span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span></span>
<span id="cb19-15"><a href="#cb19-15"></a><span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></span>
<span id="cb19-16"><a href="#cb19-16"></a><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span></span>
<span id="cb19-17"><a href="#cb19-17"></a><span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span></span>
<span id="cb19-18"><a href="#cb19-18"></a><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></span>
<span id="cb19-19"><a href="#cb19-19"></a><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span></span>
<span id="cb19-20"><a href="#cb19-20"></a><span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span></span>
<span id="cb19-21"><a href="#cb19-21"></a><span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></span></code></pre></div>
<p>You can go over the code and the output and make yourself sure that it works. Also, it turns out that we don’t need to write the back-transform function. <code>subGridsToRows</code> is its own back-transform:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGrid grid</span>
<span id="cb20-2"><a href="#cb20-2"></a><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span></span>
<span id="cb20-3"><a href="#cb20-3"></a><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span></span>
<span id="cb20-4"><a href="#cb20-4"></a><span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></span>
<span id="cb20-5"><a href="#cb20-5"></a><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span></span>
<span id="cb20-6"><a href="#cb20-6"></a><span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span></span>
<span id="cb20-7"><a href="#cb20-7"></a><span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></span>
<span id="cb20-8"><a href="#cb20-8"></a><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span></span>
<span id="cb20-9"><a href="#cb20-9"></a><span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span></span>
<span id="cb20-10"><a href="#cb20-10"></a><span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></span>
<span id="cb20-11"><a href="#cb20-11"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGrid <span class="op">$</span> subGridsToRows <span class="op">$</span> subGridsToRows <span class="op">$</span> grid</span>
<span id="cb20-12"><a href="#cb20-12"></a><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span></span>
<span id="cb20-13"><a href="#cb20-13"></a><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span></span>
<span id="cb20-14"><a href="#cb20-14"></a><span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></span>
<span id="cb20-15"><a href="#cb20-15"></a><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span></span>
<span id="cb20-16"><a href="#cb20-16"></a><span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span></span>
<span id="cb20-17"><a href="#cb20-17"></a><span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></span>
<span id="cb20-18"><a href="#cb20-18"></a><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span></span>
<span id="cb20-19"><a href="#cb20-19"></a><span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span></span>
<span id="cb20-20"><a href="#cb20-20"></a><span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></span></code></pre></div>
<p>Nice! Now writing the sub-grid pruning function is easy:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode small haskell overflow"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid <span class="ot">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></span>
<span id="cb21-2"><a href="#cb21-2"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid' <span class="ot">=</span> <span class="fu">fmap</span> subGridsToRows <span class="op">.</span> <span class="fu">traverse</span> pruneCells <span class="op">.</span> subGridsToRows <span class="op">$</span> grid</span>
<span id="cb21-3"><a href="#cb21-3"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGridWithPossibilities grid'</span>
<span id="cb21-4"><a href="#cb21-4"></a><span class="dv">6</span>           [<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [ <span class="dv">23456789</span>] <span class="dv">1</span>           [ <span class="dv">23456789</span>]</span>
<span id="cb21-5"><a href="#cb21-5"></a><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [ <span class="dv">23456789</span>] [ <span class="dv">23456789</span>] [ <span class="dv">23456789</span>]</span>
<span id="cb21-6"><a href="#cb21-6"></a>[<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [ <span class="dv">23456789</span>] [ <span class="dv">23456789</span>] [ <span class="dv">23456789</span>]</span>
<span id="cb21-7"><a href="#cb21-7"></a>[ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] [<span class="dv">1234</span> <span class="dv">678</span> ] <span class="dv">5</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] <span class="dv">4</span>           [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>] <span class="dv">7</span></span>
<span id="cb21-8"><a href="#cb21-8"></a>[ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] <span class="dv">8</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">1234</span> <span class="dv">678</span> ] <span class="dv">3</span>           [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>]</span>
<span id="cb21-9"><a href="#cb21-9"></a>[ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] <span class="dv">1</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] <span class="dv">9</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>]</span>
<span id="cb21-10"><a href="#cb21-10"></a><span class="dv">3</span>           [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] <span class="dv">4</span>           [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">2</span>           [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>]</span>
<span id="cb21-11"><a href="#cb21-11"></a>[<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] <span class="dv">5</span>           [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] <span class="dv">1</span>           [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>]</span>
<span id="cb21-12"><a href="#cb21-12"></a>[<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] <span class="dv">8</span>           [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">6</span>           [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>]</span></code></pre></div>
<p>It works well. Now we can string together these three steps to prune the entire grid. We also have to make sure that result of pruning each step is fed into the next step. This is so that the fixed cells created into one step cause more pruning in the further steps. We use monadic bind (<a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/Control-Monad.html#v:-62--62--61-" target="_blank" rel="noopener"><code>&gt;&gt;=</code></a>) for that. Here’s the final code:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1"></a><span class="ot">pruneGrid' ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></span>
<span id="cb22-2"><a href="#cb22-2"></a>pruneGrid' grid <span class="ot">=</span></span>
<span id="cb22-3"><a href="#cb22-3"></a>  <span class="fu">traverse</span> pruneCells grid</span>
<span id="cb22-4"><a href="#cb22-4"></a>  <span class="op">&gt;&gt;=</span> <span class="fu">fmap</span> Data.List.transpose <span class="op">.</span> <span class="fu">traverse</span> pruneCells <span class="op">.</span> Data.List.transpose</span>
<span id="cb22-5"><a href="#cb22-5"></a>  <span class="op">&gt;&gt;=</span> <span class="fu">fmap</span> subGridsToRows <span class="op">.</span> <span class="fu">traverse</span> pruneCells <span class="op">.</span> subGridsToRows</span></code></pre></div>
<p>And the test:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode small haskell overflow"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid <span class="ot">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></span>
<span id="cb23-2"><a href="#cb23-2"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid' <span class="ot">=</span> pruneGrid' grid</span>
<span id="cb23-3"><a href="#cb23-3"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGridWithPossibilities grid'</span>
<span id="cb23-4"><a href="#cb23-4"></a><span class="dv">6</span>           [  <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">234</span>  <span class="dv">78</span> ] [ <span class="dv">2345</span> <span class="dv">789</span>] [    <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span>  <span class="dv">89</span>]</span>
<span id="cb23-5"><a href="#cb23-5"></a><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">123</span>  <span class="dv">678</span> ] [<span class="dv">123</span> <span class="dv">5</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56</span> <span class="dv">89</span>]</span>
<span id="cb23-6"><a href="#cb23-6"></a>[<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">3</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">678</span> ] [<span class="dv">1</span> <span class="dv">345</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [  <span class="dv">3456789</span>] [  <span class="dv">3456</span> <span class="dv">89</span>]</span>
<span id="cb23-7"><a href="#cb23-7"></a>[ <span class="dv">2</span>      <span class="dv">9</span>] [  <span class="dv">3</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>   ] <span class="dv">5</span>           [<span class="dv">123</span>    <span class="dv">8</span> ] <span class="dv">4</span>           [ <span class="dv">2</span>   <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></span>
<span id="cb23-8"><a href="#cb23-8"></a>[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [   <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">2</span>   <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span>  <span class="dv">7</span>  ] <span class="dv">3</span>           [ <span class="dv">2</span>  <span class="dv">56</span>  <span class="dv">9</span>] [<span class="dv">12</span>  <span class="dv">56</span>  <span class="dv">9</span>]</span>
<span id="cb23-9"><a href="#cb23-9"></a>[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span>  ] [  <span class="dv">34</span> <span class="dv">67</span>  ] <span class="dv">1</span>           [ <span class="dv">23</span>  <span class="dv">67</span>  ] <span class="dv">9</span>           [ <span class="dv">234</span>  <span class="dv">78</span> ] [    <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ]</span>
<span id="cb23-10"><a href="#cb23-10"></a><span class="dv">3</span>           [<span class="dv">1</span>    <span class="dv">6789</span>] [     <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">4</span>           <span class="dv">7</span>           [    <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">2</span>           [    <span class="dv">56789</span>] [<span class="dv">1</span>   <span class="dv">56</span> <span class="dv">89</span>]</span>
<span id="cb23-11"><a href="#cb23-11"></a>[ <span class="dv">2</span>    <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">2</span> <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">1</span>           [ <span class="dv">23</span>   <span class="dv">7</span>  ] [ <span class="dv">23</span>   <span class="dv">7</span> <span class="dv">9</span>] [     <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6</span> <span class="dv">89</span>]</span>
<span id="cb23-12"><a href="#cb23-12"></a>[<span class="dv">12</span>    <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span>  <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">2</span> <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">23</span>   <span class="dv">7</span>  ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">345</span>   <span class="dv">9</span>]</span>
<span id="cb23-13"><a href="#cb23-13"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGrid grid</span>
<span id="cb23-14"><a href="#cb23-14"></a><span class="dv">6</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">1</span> <span class="op">.</span></span>
<span id="cb23-15"><a href="#cb23-15"></a><span class="dv">4</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb23-16"><a href="#cb23-16"></a><span class="op">.</span> <span class="dv">2</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb23-17"><a href="#cb23-17"></a><span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">5</span> <span class="op">.</span> <span class="dv">4</span> <span class="op">.</span> <span class="dv">7</span></span>
<span id="cb23-18"><a href="#cb23-18"></a><span class="op">.</span> <span class="op">.</span> <span class="dv">8</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">3</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb23-19"><a href="#cb23-19"></a><span class="op">.</span> <span class="op">.</span> <span class="dv">1</span> <span class="op">.</span> <span class="dv">9</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb23-20"><a href="#cb23-20"></a><span class="dv">3</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">4</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">2</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb23-21"><a href="#cb23-21"></a><span class="op">.</span> <span class="dv">5</span> <span class="op">.</span> <span class="dv">1</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb23-22"><a href="#cb23-22"></a><span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">8</span> <span class="op">.</span> <span class="dv">6</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb23-23"><a href="#cb23-23"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGrid grid'</span>
<span id="cb23-24"><a href="#cb23-24"></a><span class="dv">6</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">1</span> <span class="op">.</span></span>
<span id="cb23-25"><a href="#cb23-25"></a><span class="dv">4</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb23-26"><a href="#cb23-26"></a><span class="op">.</span> <span class="dv">2</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb23-27"><a href="#cb23-27"></a><span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">5</span> <span class="op">.</span> <span class="dv">4</span> <span class="op">.</span> <span class="dv">7</span></span>
<span id="cb23-28"><a href="#cb23-28"></a><span class="op">.</span> <span class="op">.</span> <span class="dv">8</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">3</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb23-29"><a href="#cb23-29"></a><span class="op">.</span> <span class="op">.</span> <span class="dv">1</span> <span class="op">.</span> <span class="dv">9</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb23-30"><a href="#cb23-30"></a><span class="dv">3</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">4</span> <span class="dv">7</span> <span class="op">.</span> <span class="dv">2</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb23-31"><a href="#cb23-31"></a><span class="op">.</span> <span class="dv">5</span> <span class="op">.</span> <span class="dv">1</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb23-32"><a href="#cb23-32"></a><span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">8</span> <span class="op">.</span> <span class="dv">6</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span></code></pre></div>
<p>We can clearly see the massive pruning of possibilities all around the grid. We also see a <code>7</code> pop up in the row-7-column-5 cell. This means that we can prune the grid further, until it settles. If you are familiar with Haskell, you may recognize this as trying to find a <a href="https://en.wikipedia.org/wiki/Fixed_point_%28mathematics%29" target="_blank" rel="noopener">fixed point</a> for the <code>pruneGrid'</code> function, except in a monadic context. It is simple to implement:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1"></a><span class="ot">pruneGrid ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></span>
<span id="cb24-2"><a href="#cb24-2"></a>pruneGrid <span class="ot">=</span> fixM pruneGrid'</span>
<span id="cb24-3"><a href="#cb24-3"></a>  <span class="kw">where</span></span>
<span id="cb24-4"><a href="#cb24-4"></a>    fixM f x <span class="ot">=</span> f x <span class="op">&gt;&gt;=</span> \x' <span class="ot">-&gt;</span> <span class="kw">if</span> x' <span class="op">==</span> x <span class="kw">then</span> <span class="fu">return</span> x <span class="kw">else</span> fixM f x'</span></code></pre></div>
<p>The crux of this code is the <code>fixM</code> function. It takes a monadic function <code>f</code> and an initial value, and recursively calls itself till the return value settles. Let’s do another round in the <em>REPL</em>:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode small haskell overflow"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid <span class="ot">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></span>
<span id="cb25-2"><a href="#cb25-2"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid' <span class="ot">=</span> pruneGrid grid</span>
<span id="cb25-3"><a href="#cb25-3"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGridWithPossibilities grid'</span>
<span id="cb25-4"><a href="#cb25-4"></a><span class="dv">6</span>           [  <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">234</span>   <span class="dv">8</span> ] [ <span class="dv">2345</span> <span class="dv">789</span>] [    <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span>  <span class="dv">89</span>]</span>
<span id="cb25-5"><a href="#cb25-5"></a><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">123</span> <span class="dv">5</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56</span> <span class="dv">89</span>]</span>
<span id="cb25-6"><a href="#cb25-6"></a>[<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">3</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">1</span> <span class="dv">345</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [  <span class="dv">3456789</span>] [  <span class="dv">3456</span> <span class="dv">89</span>]</span>
<span id="cb25-7"><a href="#cb25-7"></a>[ <span class="dv">2</span>      <span class="dv">9</span>] [  <span class="dv">3</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>   ] <span class="dv">5</span>           [<span class="dv">123</span>    <span class="dv">8</span> ] <span class="dv">4</span>           [ <span class="dv">2</span>   <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></span>
<span id="cb25-8"><a href="#cb25-8"></a>[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [   <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">2</span>   <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6</span>   ] [<span class="dv">12</span> <span class="dv">4</span>  <span class="dv">7</span>  ] <span class="dv">3</span>           [ <span class="dv">2</span>  <span class="dv">56</span>  <span class="dv">9</span>] [<span class="dv">12</span>  <span class="dv">56</span>  <span class="dv">9</span>]</span>
<span id="cb25-9"><a href="#cb25-9"></a>[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span>  ] [  <span class="dv">34</span> <span class="dv">67</span>  ] <span class="dv">1</span>           [ <span class="dv">23</span>  <span class="dv">67</span>  ] <span class="dv">9</span>           [ <span class="dv">234</span>  <span class="dv">78</span> ] [    <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ]</span>
<span id="cb25-10"><a href="#cb25-10"></a><span class="dv">3</span>           [<span class="dv">1</span>    <span class="dv">6</span> <span class="dv">89</span>] [     <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">4</span>           <span class="dv">7</span>           [    <span class="dv">5</span>   <span class="dv">9</span>] <span class="dv">2</span>           [    <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">1</span>   <span class="dv">56</span> <span class="dv">89</span>]</span>
<span id="cb25-11"><a href="#cb25-11"></a>[ <span class="dv">2</span>    <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">2</span> <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">1</span>           [ <span class="dv">23</span>      ] [ <span class="dv">23</span>     <span class="dv">9</span>] [     <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6</span> <span class="dv">89</span>]</span>
<span id="cb25-12"><a href="#cb25-12"></a>[<span class="dv">12</span>    <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span>  <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">2</span> <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">23</span>      ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">345</span>   <span class="dv">9</span>]</span></code></pre></div>
<p>We see that <code>7</code> in the row-7-column-5 cell is eliminated from all its neighboring cells. We can’t prune the grid anymore. Now it is time to make the choice.</p>
<h2 id="making-the-choice" data-track-content data-content-name="making-the-choice" data-content-piece="fast-sudoku-solver-in-haskell-1">Making the Choice<a href="#making-the-choice" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>One the grid is settled, we need to choose a non-fixed cell and make it fixed by assuming one of its possible values. This gives us two grids, next in the state-space of the solution search:</p>
<ul>
<li>one which has this chosen cell fixed to this chosen digit, and,</li>
<li>the other in which the chosen cell has all the other possibilities except the one we chose to fix.</li>
</ul>
<p>We call this function, <code>nextGrids</code>:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1"></a><span class="ot">nextGrids ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> (<span class="dt">Grid</span>, <span class="dt">Grid</span>)</span>
<span id="cb26-2"><a href="#cb26-2"></a>nextGrids grid <span class="ot">=</span></span>
<span id="cb26-3"><a href="#cb26-3"></a>  <span class="kw">let</span> (i, first<span class="op">@</span>(<span class="dt">Fixed</span> _), rest) <span class="ot">=</span></span>
<span id="cb26-4"><a href="#cb26-4"></a>        fixCell</span>
<span id="cb26-5"><a href="#cb26-5"></a>        <span class="op">.</span> Data.List.minimumBy (<span class="fu">compare</span> <span class="ot">`Data.Function.on`</span> (possibilityCount <span class="op">.</span> <span class="fu">snd</span>))</span>
<span id="cb26-6"><a href="#cb26-6"></a>        <span class="op">.</span> <span class="fu">filter</span> (isPossible <span class="op">.</span> <span class="fu">snd</span>)</span>
<span id="cb26-7"><a href="#cb26-7"></a>        <span class="op">.</span> <span class="fu">zip</span> [<span class="dv">0</span><span class="op">..</span>]</span>
<span id="cb26-8"><a href="#cb26-8"></a>        <span class="op">.</span> <span class="fu">concat</span></span>
<span id="cb26-9"><a href="#cb26-9"></a>        <span class="op">$</span> grid</span>
<span id="cb26-10"><a href="#cb26-10"></a>  <span class="kw">in</span> (replace2D i first grid, replace2D i rest grid)</span>
<span id="cb26-11"><a href="#cb26-11"></a>  <span class="kw">where</span></span>
<span id="cb26-12"><a href="#cb26-12"></a>    isPossible (<span class="dt">Possible</span> _) <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb26-13"><a href="#cb26-13"></a>    isPossible _            <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb26-14"><a href="#cb26-14"></a></span>
<span id="cb26-15"><a href="#cb26-15"></a>    possibilityCount (<span class="dt">Possible</span> xs) <span class="ot">=</span> <span class="fu">length</span> xs</span>
<span id="cb26-16"><a href="#cb26-16"></a>    possibilityCount (<span class="dt">Fixed</span> _)     <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb26-17"><a href="#cb26-17"></a></span>
<span id="cb26-18"><a href="#cb26-18"></a>    fixCell (i, <span class="dt">Possible</span> [x, y]) <span class="ot">=</span> (i, <span class="dt">Fixed</span> x, <span class="dt">Fixed</span> y)</span>
<span id="cb26-19"><a href="#cb26-19"></a>    fixCell (i, <span class="dt">Possible</span> (x<span class="op">:</span>xs)) <span class="ot">=</span> (i, <span class="dt">Fixed</span> x, <span class="dt">Possible</span> xs)</span>
<span id="cb26-20"><a href="#cb26-20"></a>    fixCell _                    <span class="ot">=</span> <span class="fu">error</span> <span class="st">&quot;Impossible case&quot;</span></span>
<span id="cb26-21"><a href="#cb26-21"></a></span>
<span id="cb26-22"><a href="#cb26-22"></a><span class="ot">    replace2D ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> [[a]] <span class="ot">-&gt;</span> [[a]]</span>
<span id="cb26-23"><a href="#cb26-23"></a>    replace2D i v <span class="ot">=</span></span>
<span id="cb26-24"><a href="#cb26-24"></a>      <span class="kw">let</span> (x, y) <span class="ot">=</span> (i <span class="ot">`quot`</span> <span class="dv">9</span>, i <span class="ot">`mod`</span> <span class="dv">9</span>) <span class="kw">in</span> replace x (replace y (<span class="fu">const</span> v))</span>
<span id="cb26-25"><a href="#cb26-25"></a>    replace p f xs <span class="ot">=</span> [<span class="kw">if</span> i <span class="op">==</span> p <span class="kw">then</span> f x <span class="kw">else</span> x <span class="op">|</span> (x, i) <span class="ot">&lt;-</span> <span class="fu">zip</span> xs [<span class="dv">0</span><span class="op">..</span>]]</span></code></pre></div>
<p>We choose the non-fixed cell with least count of possibilities as the pivot. This strategy make sense intuitively, as with a cell with fewest possibilities, we have the most chance of being right when assuming one. Fixing a non-fixed cell leads to one of the two cases:</p>
<ol type="a">
<li>the cell has only two possible values, resulting in two fixed cells, or,</li>
<li>the cell has more than two possible values, resulting in one fixed and one non-fixed cell.</li>
</ol>
<p>Then all we are left with is replacing the non-fixed cell with its fixed and fixed/non-fixed choices, which we do with some math and some list traversal. A quick check on the <em>REPL</em>:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode small haskell overflow"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid <span class="ot">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></span>
<span id="cb27-2"><a href="#cb27-2"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid' <span class="ot">=</span> pruneGrid grid</span>
<span id="cb27-3"><a href="#cb27-3"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGridWithPossibilities grid'</span>
<span id="cb27-4"><a href="#cb27-4"></a><span class="dv">6</span>           [  <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">234</span>   <span class="dv">8</span> ] [ <span class="dv">2345</span> <span class="dv">789</span>] [    <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span>  <span class="dv">89</span>]</span>
<span id="cb27-5"><a href="#cb27-5"></a><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">123</span> <span class="dv">5</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56</span> <span class="dv">89</span>]</span>
<span id="cb27-6"><a href="#cb27-6"></a>[<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">3</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">1</span> <span class="dv">345</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [  <span class="dv">3456789</span>] [  <span class="dv">3456</span> <span class="dv">89</span>]</span>
<span id="cb27-7"><a href="#cb27-7"></a>[ <span class="dv">2</span>      <span class="dv">9</span>] [  <span class="dv">3</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>   ] <span class="dv">5</span>           [<span class="dv">123</span>    <span class="dv">8</span> ] <span class="dv">4</span>           [ <span class="dv">2</span>   <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></span>
<span id="cb27-8"><a href="#cb27-8"></a>[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [   <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">2</span>   <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6</span>   ] [<span class="dv">12</span> <span class="dv">4</span>  <span class="dv">7</span>  ] <span class="dv">3</span>           [ <span class="dv">2</span>  <span class="dv">56</span>  <span class="dv">9</span>] [<span class="dv">12</span>  <span class="dv">56</span>  <span class="dv">9</span>]</span>
<span id="cb27-9"><a href="#cb27-9"></a>[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span>  ] [  <span class="dv">34</span> <span class="dv">67</span>  ] <span class="dv">1</span>           [ <span class="dv">23</span>  <span class="dv">67</span>  ] <span class="dv">9</span>           [ <span class="dv">234</span>  <span class="dv">78</span> ] [    <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ]</span>
<span id="cb27-10"><a href="#cb27-10"></a><span class="dv">3</span>           [<span class="dv">1</span>    <span class="dv">6</span> <span class="dv">89</span>] [     <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">4</span>           <span class="dv">7</span>           [    <span class="dv">5</span>   <span class="dv">9</span>] <span class="dv">2</span>           [    <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">1</span>   <span class="dv">56</span> <span class="dv">89</span>]</span>
<span id="cb27-11"><a href="#cb27-11"></a>[ <span class="dv">2</span>    <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">2</span> <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">1</span>           [ <span class="dv">23</span>      ] [ <span class="dv">23</span>     <span class="dv">9</span>] [     <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6</span> <span class="dv">89</span>]</span>
<span id="cb27-12"><a href="#cb27-12"></a>[<span class="dv">12</span>    <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span>  <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">2</span> <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">23</span>      ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">345</span>   <span class="dv">9</span>]</span>
<span id="cb27-13"><a href="#cb27-13"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="co">-- the row-4-column-1 cell is the first cell with only two possibilities, [2, 9].</span></span>
<span id="cb27-14"><a href="#cb27-14"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="co">-- it is chosen as the pivot cell to find the next grids.</span></span>
<span id="cb27-15"><a href="#cb27-15"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> (grid1, grid2) <span class="ot">=</span> nextGrids grid'</span>
<span id="cb27-16"><a href="#cb27-16"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGridWithPossibilities grid1</span>
<span id="cb27-17"><a href="#cb27-17"></a><span class="dv">6</span>           [  <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">234</span>   <span class="dv">8</span> ] [ <span class="dv">2345</span> <span class="dv">789</span>] [    <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span>  <span class="dv">89</span>]</span>
<span id="cb27-18"><a href="#cb27-18"></a><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">123</span> <span class="dv">5</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56</span> <span class="dv">89</span>]</span>
<span id="cb27-19"><a href="#cb27-19"></a>[<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">3</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">1</span> <span class="dv">345</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [  <span class="dv">3456789</span>] [  <span class="dv">3456</span> <span class="dv">89</span>]</span>
<span id="cb27-20"><a href="#cb27-20"></a><span class="dv">2</span>           [  <span class="dv">3</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>   ] <span class="dv">5</span>           [<span class="dv">123</span>    <span class="dv">8</span> ] <span class="dv">4</span>           [ <span class="dv">2</span>   <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></span>
<span id="cb27-21"><a href="#cb27-21"></a>[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [   <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">2</span>   <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6</span>   ] [<span class="dv">12</span> <span class="dv">4</span>  <span class="dv">7</span>  ] <span class="dv">3</span>           [ <span class="dv">2</span>  <span class="dv">56</span>  <span class="dv">9</span>] [<span class="dv">12</span>  <span class="dv">56</span>  <span class="dv">9</span>]</span>
<span id="cb27-22"><a href="#cb27-22"></a>[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span>  ] [  <span class="dv">34</span> <span class="dv">67</span>  ] <span class="dv">1</span>           [ <span class="dv">23</span>  <span class="dv">67</span>  ] <span class="dv">9</span>           [ <span class="dv">234</span>  <span class="dv">78</span> ] [    <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ]</span>
<span id="cb27-23"><a href="#cb27-23"></a><span class="dv">3</span>           [<span class="dv">1</span>    <span class="dv">6</span> <span class="dv">89</span>] [     <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">4</span>           <span class="dv">7</span>           [    <span class="dv">5</span>   <span class="dv">9</span>] <span class="dv">2</span>           [    <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">1</span>   <span class="dv">56</span> <span class="dv">89</span>]</span>
<span id="cb27-24"><a href="#cb27-24"></a>[ <span class="dv">2</span>    <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">2</span> <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">1</span>           [ <span class="dv">23</span>      ] [ <span class="dv">23</span>     <span class="dv">9</span>] [     <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6</span> <span class="dv">89</span>]</span>
<span id="cb27-25"><a href="#cb27-25"></a>[<span class="dv">12</span>    <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span>  <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">2</span> <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">23</span>      ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">345</span>   <span class="dv">9</span>]</span>
<span id="cb27-26"><a href="#cb27-26"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGridWithPossibilities grid2</span>
<span id="cb27-27"><a href="#cb27-27"></a><span class="dv">6</span>           [  <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">234</span>   <span class="dv">8</span> ] [ <span class="dv">2345</span> <span class="dv">789</span>] [    <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span>  <span class="dv">89</span>]</span>
<span id="cb27-28"><a href="#cb27-28"></a><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">123</span> <span class="dv">5</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56</span> <span class="dv">89</span>]</span>
<span id="cb27-29"><a href="#cb27-29"></a>[<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">3</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">1</span> <span class="dv">345</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [  <span class="dv">3456789</span>] [  <span class="dv">3456</span> <span class="dv">89</span>]</span>
<span id="cb27-30"><a href="#cb27-30"></a><span class="dv">9</span>           [  <span class="dv">3</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>   ] <span class="dv">5</span>           [<span class="dv">123</span>    <span class="dv">8</span> ] <span class="dv">4</span>           [ <span class="dv">2</span>   <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></span>
<span id="cb27-31"><a href="#cb27-31"></a>[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [   <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">2</span>   <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6</span>   ] [<span class="dv">12</span> <span class="dv">4</span>  <span class="dv">7</span>  ] <span class="dv">3</span>           [ <span class="dv">2</span>  <span class="dv">56</span>  <span class="dv">9</span>] [<span class="dv">12</span>  <span class="dv">56</span>  <span class="dv">9</span>]</span>
<span id="cb27-32"><a href="#cb27-32"></a>[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span>  ] [  <span class="dv">34</span> <span class="dv">67</span>  ] <span class="dv">1</span>           [ <span class="dv">23</span>  <span class="dv">67</span>  ] <span class="dv">9</span>           [ <span class="dv">234</span>  <span class="dv">78</span> ] [    <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ]</span>
<span id="cb27-33"><a href="#cb27-33"></a><span class="dv">3</span>           [<span class="dv">1</span>    <span class="dv">6</span> <span class="dv">89</span>] [     <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">4</span>           <span class="dv">7</span>           [    <span class="dv">5</span>   <span class="dv">9</span>] <span class="dv">2</span>           [    <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">1</span>   <span class="dv">56</span> <span class="dv">89</span>]</span>
<span id="cb27-34"><a href="#cb27-34"></a>[ <span class="dv">2</span>    <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">2</span> <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">1</span>           [ <span class="dv">23</span>      ] [ <span class="dv">23</span>     <span class="dv">9</span>] [     <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6</span> <span class="dv">89</span>]</span>
<span id="cb27-35"><a href="#cb27-35"></a>[<span class="dv">12</span>    <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span>  <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">2</span> <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">23</span>      ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">345</span>   <span class="dv">9</span>]</span></code></pre></div>
<h2 id="solving-the-puzzle" data-track-content data-content-name="solving-the-puzzle" data-content-piece="fast-sudoku-solver-in-haskell-1">Solving the Puzzle<a href="#solving-the-puzzle" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>We have implemented parts of our algorithm till now. Now we’ll put everything together to solve the puzzle. First, we need to know if we are done or have messed up:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1"></a><span class="ot">isGridFilled ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb28-2"><a href="#cb28-2"></a>isGridFilled grid <span class="ot">=</span> <span class="fu">null</span> [ () <span class="op">|</span> <span class="dt">Possible</span> _ <span class="ot">&lt;-</span> <span class="fu">concat</span> grid ]</span>
<span id="cb28-3"><a href="#cb28-3"></a></span>
<span id="cb28-4"><a href="#cb28-4"></a><span class="ot">isGridInvalid ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb28-5"><a href="#cb28-5"></a>isGridInvalid grid <span class="ot">=</span></span>
<span id="cb28-6"><a href="#cb28-6"></a>  <span class="fu">any</span> isInvalidRow grid</span>
<span id="cb28-7"><a href="#cb28-7"></a>  <span class="op">||</span> <span class="fu">any</span> isInvalidRow (Data.List.transpose grid)</span>
<span id="cb28-8"><a href="#cb28-8"></a>  <span class="op">||</span> <span class="fu">any</span> isInvalidRow (subGridsToRows grid)</span>
<span id="cb28-9"><a href="#cb28-9"></a>  <span class="kw">where</span></span>
<span id="cb28-10"><a href="#cb28-10"></a>    isInvalidRow row <span class="ot">=</span></span>
<span id="cb28-11"><a href="#cb28-11"></a>      <span class="kw">let</span> fixeds         <span class="ot">=</span> [x <span class="op">|</span> <span class="dt">Fixed</span> x <span class="ot">&lt;-</span> row]</span>
<span id="cb28-12"><a href="#cb28-12"></a>          emptyPossibles <span class="ot">=</span> [x <span class="op">|</span> <span class="dt">Possible</span> x <span class="ot">&lt;-</span> row, <span class="fu">null</span> x]</span>
<span id="cb28-13"><a href="#cb28-13"></a>      <span class="kw">in</span> hasDups fixeds <span class="op">||</span> <span class="fu">not</span> (<span class="fu">null</span> emptyPossibles)</span>
<span id="cb28-14"><a href="#cb28-14"></a></span>
<span id="cb28-15"><a href="#cb28-15"></a>    hasDups l <span class="ot">=</span> hasDups' l []</span>
<span id="cb28-16"><a href="#cb28-16"></a></span>
<span id="cb28-17"><a href="#cb28-17"></a>    hasDups' [] _ <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb28-18"><a href="#cb28-18"></a>    hasDups' (y<span class="op">:</span>ys) xs</span>
<span id="cb28-19"><a href="#cb28-19"></a>      <span class="op">|</span> y <span class="ot">`elem`</span> xs <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb28-20"><a href="#cb28-20"></a>      <span class="op">|</span> <span class="fu">otherwise</span>   <span class="ot">=</span> hasDups' ys (y<span class="op">:</span>xs)</span></code></pre></div>
<p><code>isGridFilled</code> returns whether a grid is filled completely by checking it for any <code>Possible</code> cells. <code>isGridInvalid</code> checks if a grid is invalid because it either has duplicate fixed cells in any block or has any non-fixed cell with no possibilities.</p>
<p>Writing the <code>solve</code> function is almost trivial now:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1"></a><span class="ot">solve ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></span>
<span id="cb29-2"><a href="#cb29-2"></a>solve grid <span class="ot">=</span> pruneGrid grid <span class="op">&gt;&gt;=</span> solve'</span>
<span id="cb29-3"><a href="#cb29-3"></a>  <span class="kw">where</span></span>
<span id="cb29-4"><a href="#cb29-4"></a>    solve' g</span>
<span id="cb29-5"><a href="#cb29-5"></a>      <span class="op">|</span> isGridInvalid g <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb29-6"><a href="#cb29-6"></a>      <span class="op">|</span> isGridFilled g  <span class="ot">=</span> <span class="dt">Just</span> g</span>
<span id="cb29-7"><a href="#cb29-7"></a>      <span class="op">|</span> <span class="fu">otherwise</span>       <span class="ot">=</span></span>
<span id="cb29-8"><a href="#cb29-8"></a>          <span class="kw">let</span> (grid1, grid2) <span class="ot">=</span> nextGrids g</span>
<span id="cb29-9"><a href="#cb29-9"></a>          <span class="kw">in</span> solve grid1 <span class="op">&lt;|&gt;</span> solve grid2</span></code></pre></div>
<p>We prune the grid as before and pipe it to the helper function <code>solve'</code>. <code>solve'</code> bails with a <code>Nothing</code> if the grid is invalid, or returns the solved grid if it is filled completely. Otherwise, it finds the next two grids in the search tree and solves them recursively with backtracking by calling the <code>solve</code> function. Backtracking here is implemented by the using the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Control-Applicative.html#g:2" target="_blank" rel="noopener"><code>Alternative</code></a> (<code>&lt;|&gt;</code>) implementation of the <code>Maybe</code> type<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>. It takes the second branch in the computation if the first branch returns a <code>Nothing</code>.</p>
<p>Whew! That took us long. Let’s put it to the final test now:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid <span class="ot">=</span></span>
<span id="cb31-2"><a href="#cb31-2"></a>  readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></span>
<span id="cb31-3"><a href="#cb31-3"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGrid grid</span>
<span id="cb31-4"><a href="#cb31-4"></a><span class="dv">6</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">1</span> <span class="op">.</span></span>
<span id="cb31-5"><a href="#cb31-5"></a><span class="dv">4</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb31-6"><a href="#cb31-6"></a><span class="op">.</span> <span class="dv">2</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb31-7"><a href="#cb31-7"></a><span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">5</span> <span class="op">.</span> <span class="dv">4</span> <span class="op">.</span> <span class="dv">7</span></span>
<span id="cb31-8"><a href="#cb31-8"></a><span class="op">.</span> <span class="op">.</span> <span class="dv">8</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">3</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb31-9"><a href="#cb31-9"></a><span class="op">.</span> <span class="op">.</span> <span class="dv">1</span> <span class="op">.</span> <span class="dv">9</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb31-10"><a href="#cb31-10"></a><span class="dv">3</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">4</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">2</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb31-11"><a href="#cb31-11"></a><span class="op">.</span> <span class="dv">5</span> <span class="op">.</span> <span class="dv">1</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb31-12"><a href="#cb31-12"></a><span class="op">.</span> <span class="op">.</span> <span class="op">.</span> <span class="dv">8</span> <span class="op">.</span> <span class="dv">6</span> <span class="op">.</span> <span class="op">.</span> <span class="op">.</span></span>
<span id="cb31-13"><a href="#cb31-13"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="dt">Just</span> grid' <span class="ot">=</span> solve grid</span>
<span id="cb31-14"><a href="#cb31-14"></a><span class="op">*</span><span class="dt">Main</span><span class="op">&gt;</span> <span class="fu">putStr</span> <span class="op">$</span> showGrid grid'</span>
<span id="cb31-15"><a href="#cb31-15"></a><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span></span>
<span id="cb31-16"><a href="#cb31-16"></a><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span></span>
<span id="cb31-17"><a href="#cb31-17"></a><span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></span>
<span id="cb31-18"><a href="#cb31-18"></a><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span></span>
<span id="cb31-19"><a href="#cb31-19"></a><span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span></span>
<span id="cb31-20"><a href="#cb31-20"></a><span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></span>
<span id="cb31-21"><a href="#cb31-21"></a><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span></span>
<span id="cb31-22"><a href="#cb31-22"></a><span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span></span>
<span id="cb31-23"><a href="#cb31-23"></a><span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></span></code></pre></div>
<p>It works! Let’s put a quick <code>main</code> wrapper around <code>solve</code> to call it from the command line:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb32-2"><a href="#cb32-2"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb32-3"><a href="#cb32-3"></a>  inputs <span class="ot">&lt;-</span> <span class="fu">lines</span> <span class="op">&lt;$&gt;</span> <span class="fu">getContents</span></span>
<span id="cb32-4"><a href="#cb32-4"></a>  Control.Monad.forM_ inputs <span class="op">$</span> \input <span class="ot">-&gt;</span></span>
<span id="cb32-5"><a href="#cb32-5"></a>    <span class="kw">case</span> readGrid input <span class="kw">of</span></span>
<span id="cb32-6"><a href="#cb32-6"></a>      <span class="dt">Nothing</span>   <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="st">&quot;Invalid input&quot;</span></span>
<span id="cb32-7"><a href="#cb32-7"></a>      <span class="dt">Just</span> grid <span class="ot">-&gt;</span> <span class="kw">case</span> solve grid <span class="kw">of</span></span>
<span id="cb32-8"><a href="#cb32-8"></a>        <span class="dt">Nothing</span>    <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="st">&quot;No solution found&quot;</span></span>
<span id="cb32-9"><a href="#cb32-9"></a>        <span class="dt">Just</span> grid' <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="op">$</span> showGrid grid'</span></code></pre></div>
<p>And now, we can invoke it from the command line:</p>
<pre class="plain"><code>$ echo &quot;.......12.5.4............3.7..6..4....1..........8....92....8.....51.7.......3...&quot; | stack exec sudoku
3 6 4 9 7 8 5 1 2
1 5 2 4 3 6 9 7 8
8 7 9 1 2 5 6 3 4
7 3 8 6 5 1 4 2 9
6 9 1 2 4 7 3 8 5
2 4 5 3 8 9 1 6 7
9 2 3 7 6 4 8 5 1
4 8 6 5 1 2 7 9 3
5 1 7 8 9 3 2 4 6</code></pre>
<p>And, we are done.</p>
<p>If you want to play with different puzzles, the file <a href="https://abhinavsarkar.net/files/sudoku17.txt.bz2">here</a> lists some of the toughest ones. Let’s run<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> some of them through our program to see how fast it is:</p>
<pre class="plain"><code>$ head -n100 sudoku17.txt | time stack exec sudoku
... output omitted ...
      116.70 real       198.09 user        94.46 sys</code></pre>
<p>It took about 117 seconds to solve a hundred puzzles, so, about 1.2 seconds per puzzle. This is pretty slow but we’ll get around to making it faster in the subsequent posts.</p>
<h2 id="conclusion" data-track-content data-content-name="conclusion" data-content-piece="fast-sudoku-solver-in-haskell-1">Conclusion<a href="#conclusion" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>In this rather verbose article, we learned how to write a simple Sudoku solver in Haskell step-by-step. In the later parts of this series, we’ll delve into profiling the solution and figuring out better algorithms and data structures to solve Sudoku more efficiently. The code till now is available <a href="https://code.abhinavsarkar.net/abhin4v/hasdoku/src/commit/0ef77341a10fcc25926301ee47b931d92959c0fa" target="_blank" rel="noopener">here</a>. Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/8uapij/fast_sudoku_solver_in_haskell/" target="_blank" rel="noopener">r/haskell</a> or <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/#comment-container">leave a comment</a>.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>This exercise was originally done as a part of <a href="https://github.com/pratul/haskell-classes/" target="_blank" rel="noopener">the</a> <a href="https://github.com/ford-prefect/haskell-classes/" target="_blank" rel="noopener">Haskell</a> <a href="https://github.com/bnvinay92/haskell-classes/" target="_blank" rel="noopener">classes</a> I taught at <a href="https://nilenso.com" target="_blank" rel="noopener">nilenso</a>.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p><code>Alternative</code> implementation of <code>Maybe</code>:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1"></a><span class="kw">instance</span> <span class="dt">Alternative</span> <span class="dt">Maybe</span> <span class="kw">where</span></span>
<span id="cb30-2"><a href="#cb30-2"></a>  empty <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb30-3"><a href="#cb30-3"></a>  <span class="dt">Nothing</span> <span class="op">&lt;|&gt;</span> r <span class="ot">=</span> r</span>
<span id="cb30-4"><a href="#cb30-4"></a>  l       <span class="op">&lt;|&gt;</span> _ <span class="ot">=</span> l</span></code></pre></div>
<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></li>
<li id="fn3" role="doc-endnote"><p>All the runs were done on my MacBook Pro from 2014 with 2.2 GHz Intel Core i7 CPU and 16 GB memory.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section><p>If you liked this post, please <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/#comment-container">leave a comment</a>.</p><img src="https://anna.abhinavsarkar.net/piwik.php?idsite=1&amp;rec=1" style="border:0; display: none;" />]]></summary>
</entry>

</feed>
