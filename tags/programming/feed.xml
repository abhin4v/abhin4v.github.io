<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Posts tagged ‘programming’ on abhinavsarkar.net</title>
    <link href="https://abhinavsarkar.net/tags/programming/feed.xml" rel="self" />
    <link href="https://abhinavsarkar.net" />
    <id>https://abhinavsarkar.net/tags/programming/feed.xml</id>
    <author>
        <name>Abhinav Sarkar</name>
        <email>abhinav@abhinavsarkar.net</email>
        <uri>https://abhinavsarkar.net/about/</uri>
    </author>
    <updated>2018-08-13T00:00:00Z</updated>
    <icon>https://abhinavsarkar.net/images/favicon.ico</icon>
    <rights>© 2017-2019, Abhinav Sarkar</rights>
    <entry>
    <title>Fast Sudoku Solver in Haskell #3: Picking the Right Data Structures</title>
    <link rel="alternate" href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-3/" />
    <id>https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-3/</id>
    <published>2018-08-13T00:00:00Z</published>
    <updated>2018-08-13T00:00:00Z</updated>
    
    <author>
        <name>Abhinav Sarkar</name>
        <email>abhinav@abhinavsarkar.net</email>
        <uri>https://abhinavsarkar.net/about/</uri>
    </author>
    
    
    <category term="haskell" />
    
    <category term="sudoku" />
    
    <category term="programming" />
    
    <category term="puzzle" />
    
    <category term="nilenso" />
    
    <summary type="html"><![CDATA[<p>In the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/">previous part</a> in this series of posts, we optimized the simple Sudoku solver by implementing a new strategy to prune cells, and were able to achieve a speedup of almost 200x. Afterwards, we profiled the solution and found that there were bottlenecks in the program, leading to a slowdown. In this post, we are going to follow the profiler and use the right <em>Data Structures</em> to improve the solution further and make it <strong>faster</strong>.</p>
<!--more-->
<p>This is the third post in a series of posts:</p>
<ol type="1">
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/">Fast Sudoku Solver in Haskell #1: A Simple Solution</a></li>
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/">Fast Sudoku Solver in Haskell #2: A 200x Faster Solution</a></li>
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-3/">Fast Sudoku Solver in Haskell #3: Picking the Right Data Structures</a></li>
</ol>
<p>Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/96y0xa/fast_sudoku_solver_in_haskell_3_picking_the_right/" target="_blank" rel="noopener">r/haskell</a>.</p>
<nav id="toc" class="right-toc"><h3>Contents</h3><ol><li><a href="#quick-recap">Quick Recap</a></li><li><a href="#profile-twice-code-once">Profile Twice, Code Once</a></li><li><a href="#a-set-for-all-occasions">A Set for All Occasions</a></li><li><a href="#bit-by-bit-we-get-faster">Bit by Bit, We Get Faster</a></li><li><a href="#back-to-the-profiler">Back to the Profiler</a></li><li><a href="#vectors-of-speed">Vectors of Speed</a></li><li><a href="#revenge-of-the">Revenge of the <code>(==)</code></a></li><li><a href="#one-function-to-prune-them-all">One Function to Prune Them All</a></li><li><a href="#rise-of-the-mutables">Rise of the Mutables</a></li><li><a href="#comparison-of-implementations">Comparison of Implementations</a></li><li><a href="#conclusion">Conclusion</a></li></ol></nav>
<h2 id="quick-recap" data-track-content data-content-name="quick-recap" data-content-piece="fast-sudoku-solver-in-haskell-3">Quick Recap<a href="#quick-recap" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p><a href="https://en.wikipedia.org/wiki/Sudoku" target="_blank" rel="noopener">Sudoku</a> is a number placement puzzle. It consists of a 9x9 grid which is to be filled with digits from 1 to 9 such that each row, each column and each of the nine 3x3 sub-grids contain all the digits. Some of the cells of the grid come pre-filled and the player has to fill the rest.</p>
<p>In the previous post, we improved the performance of the simple Sudoku solver by implementing a new strategy to prune cells. This <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/#a-little-forward-a-little-backward">new strategy</a> found the digits which occurred uniquely, in pairs, or in triplets and fixed the cells to those digits. It led to a speedup of about 200x over our original naive solution. This is our current run<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a> time for solving all the 49151 <a href="https://abhinavsarkar.net/files/sudoku17.txt.bz2">17-clue puzzles</a>:</p>
<pre class="plain"><code>$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
      258.97 real       257.34 user         1.52 sys</code></pre>
<p>Let’s try to improve this time.<a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a></p>
<h2 id="profile-twice-code-once" data-track-content data-content-name="profile-twice-code-once" data-content-piece="fast-sudoku-solver-in-haskell-3">Profile Twice, Code Once<a href="#profile-twice-code-once" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Instead of trying to guess how to improve the performance of our solution, let’s be methodical about it. We start with profiling the code to find the bottlenecks. Let’s compile and run the code with profiling flags:</p>
<pre class="plain"><code>$ stack build --profile
$ head -1000 sudoku17.txt | stack exec -- sudoku +RTS -p &gt; /dev/null</code></pre>
<p>This generates a <code>sudoku.prof</code> file with the profiling output. Here are the top seven <em>Cost Centres</em><a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a> from the file (cleaned for brevity):</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Centre</th>
<th style="text-align: left;">Src</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities</code></td>
<td style="text-align: left;">Sudoku.hs:(49,1)-(62,26)</td>
<td style="text-align: right;">18.9</td>
<td style="text-align: right;">11.4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCellsByFixed.pruneCell</code></td>
<td style="text-align: left;">Sudoku.hs:(75,5)-(76,36)</td>
<td style="text-align: right;">17.7</td>
<td style="text-align: right;">30.8</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities.\.\</code></td>
<td style="text-align: left;">Sudoku.hs:55:38-70</td>
<td style="text-align: right;">11.7</td>
<td style="text-align: right;">20.3</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>fixM.\</code></td>
<td style="text-align: left;">Sudoku.hs:13:27-65</td>
<td style="text-align: right;">10.7</td>
<td style="text-align: right;">0.0</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>==</code></td>
<td style="text-align: left;">Sudoku.hs:15:56-57</td>
<td style="text-align: right;">5.6</td>
<td style="text-align: right;">0.0</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneGrid'</code></td>
<td style="text-align: left;">Sudoku.hs:(103,1)-(106,64)</td>
<td style="text-align: right;">5.0</td>
<td style="text-align: right;">6.7</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pruneCellsByFixed</code></td>
<td style="text-align: left;">Sudoku.hs:(71,1)-(76,36)</td>
<td style="text-align: right;">4.5</td>
<td style="text-align: right;">5.0</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>exclusivePossibilities.\</code></td>
<td style="text-align: left;">Sudoku.hs:58:36-68</td>
<td style="text-align: right;">3.4</td>
<td style="text-align: right;">2.5</td>
</tr>
</tbody>
</table>
</div>
<p><em>Cost Centre</em> points to a function, either named or anonymous. <em>Src</em> gives the line and column numbers of the source code of the function. <em>%time</em> and <em>%alloc</em> are the percentages of time spent and memory allocated in the function, respectively.</p>
<p>We see that <code>exclusivePossibilities</code> and the nested functions inside it take up almost 34% time of the entire run time. Second biggest bottleneck is the <code>pruneCell</code> function inside the <code>pruneCellsByFixed</code> function.</p>
<p>We are going to look at <code>exclusivePossibilities</code> later. For now, it is easy to guess the possible reason for <code>pruneCell</code> taking so much time. Here’s the code for reference:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="ot">pruneCellsByFixed ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Cell</span>]</a>
<a class="sourceLine" id="cb3-2" title="2">pruneCellsByFixed cells <span class="fu">=</span> <span class="fu">traverse</span> pruneCell cells</a>
<a class="sourceLine" id="cb3-3" title="3">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-4" title="4">    fixeds <span class="fu">=</span> [x <span class="fu">|</span> <span class="dt">Fixed</span> x <span class="ot">&lt;-</span> cells]</a>
<a class="sourceLine" id="cb3-5" title="5"></a>
<a class="sourceLine" id="cb3-6" title="6">    pruneCell (<span class="dt">Possible</span> xs) <span class="fu">=</span> makeCell (xs <span class="dt">Data.List</span><span class="fu">.</span>\\ fixeds)</a>
<a class="sourceLine" id="cb3-7" title="7">    pruneCell x             <span class="fu">=</span> <span class="dt">Just</span> x</a></code></pre></div>
<p><code>pruneCell</code> uses <code>Data.List.\\</code> to find the difference of the cell’s possible digits and the fixed digits in the cell’s block. In Haskell, lists are implemented as <a href="https://en.wikipedia.org/wiki/Linked_list#Singly_linked_list" target="_blank" rel="noopener">singly linked lists</a>. So, finding the difference or intersection of two lists is O(n<sup>2</sup>), that is, quadratic <a href="https://en.wikipedia.org/wiki/Asymptotic_complexity" target="_blank" rel="noopener">asymptotic complexity</a>. Let’s tackle this bottleneck first.</p>
<h2 id="a-set-for-all-occasions" data-track-content data-content-name="a-set-for-all-occasions" data-content-piece="fast-sudoku-solver-in-haskell-3">A Set for All Occasions<a href="#a-set-for-all-occasions" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>What is a efficient data structure for finding differences and intersections? Why, a <a href="https://en.wikipedia.org/wiki/Set_(abstract_data_type)" target="_blank" rel="noopener"><em>Set</em></a> of course! A Set stores unique values and provides fast operations for testing membership of its elements. If we use a Set to represent the possible values of cells instead of a List, the program should run faster. Since the possible values are already unique (<code>1</code>–<code>9</code>), it should not break anything.</p>
<p>Haskell comes with a bunch of Set implementations:</p>
<ul>
<li><a href="https://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-Set.html" target="_blank" rel="noopener"><code>Data.Set</code></a> which is a generic data structure implemented as <a href="https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree" target="_blank" rel="noopener">self-balancing binary search tree</a>.</li>
<li><a href="https://hackage.haskell.org/package/unordered-containers-0.2.9.0/docs/Data-HashSet.html" target="_blank" rel="noopener"><code>Data.HashSet</code></a> which is a generic data structure implemented as <a href="https://en.wikipedia.org/wiki/Hash_array_mapped_trie" target="_blank" rel="noopener">hash array mapped trie</a>.</li>
<li><a href="https://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-IntSet.html" target="_blank" rel="noopener"><code>Data.IntSet</code></a> which is a specialized data structure for integer values, implemented as <a href="https://en.wikipedia.org/wiki/Radix_tree" target="_blank" rel="noopener">radix tree</a>.</li>
</ul>
<p>However, a much faster implementation is possible for our particular use-case. We can use a <a href="https://en.wikipedia.org/wiki/Bitset" target="_blank" rel="noopener"><em>BitSet</em></a>.</p>
<p>A BitSet uses <a href="https://en.wikipedia.org/wiki/Bit" target="_blank" rel="noopener">bits</a> to represent unique members of a Set. We map values to particular bits using some function. If the bit corresponding to a particular value is set to 1 then the value is present in the Set, else it is not. So, we need as many bits in a BitSet as the number of values in our domain, which makes is difficult to use for generic problems. But, for our Sudoku solver, we need to store only the digits <code>1</code>–<code>9</code> in the Set, which make BitSet very suitable for us. Also, the Set operations on BitSet are implemented using bit-level instructions in hardware, making them much faster than those on the other data structure listed above.</p>
<p>In Haskell, we can use the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Word.html" target="_blank" rel="noopener"><code>Data.Word</code></a> module to represent a BitSet. Specifically, we can use the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Word.html#t:Word16" target="_blank" rel="noopener"><code>Data.Word.Word16</code></a> type which has sixteen bits because we need only nine bits to represent the nine digits. The bit-level operations on <code>Word16</code> are provided by the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Bits.html" target="_blank" rel="noopener"><code>Data.Bits</code></a> module.</p>
<h2 id="bit-by-bit-we-get-faster" data-track-content data-content-name="bit-by-bit-we-get-faster" data-content-piece="fast-sudoku-solver-in-haskell-3">Bit by Bit, We Get Faster<a href="#bit-by-bit-we-get-faster" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>First, we replace List with <code>Word16</code> in the <code>Cell</code> type and add a helper function:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">data</span> <span class="dt">Cell</span> <span class="fu">=</span> <span class="dt">Fixed</span> <span class="dt">Data.Word.Word16</span></a>
<a class="sourceLine" id="cb4-2" title="2">          <span class="fu">|</span> <span class="dt">Possible</span> <span class="dt">Data.Word.Word16</span></a>
<a class="sourceLine" id="cb4-3" title="3">          <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</a>
<a class="sourceLine" id="cb4-4" title="4"></a>
<a class="sourceLine" id="cb4-5" title="5"><span class="ot">setBits ::</span> <span class="dt">Data.Word.Word16</span> <span class="ot">-&gt;</span> [<span class="dt">Data.Word.Word16</span>] <span class="ot">-&gt;</span> <span class="dt">Data.Word.Word16</span></a>
<a class="sourceLine" id="cb4-6" title="6">setBits <span class="fu">=</span> Data.List.foldl' (<span class="fu">Data.Bits..|.</span>)</a></code></pre></div>
<p>Then we replace <code>Int</code> related operations with bit related ones in the read and show functions:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1"><span class="ot">readGrid ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb5-2" title="2">readGrid s</a>
<a class="sourceLine" id="cb5-3" title="3">  <span class="fu">|</span> <span class="fu">length</span> s <span class="fu">==</span> <span class="dv">81</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb5-4" title="4">      <span class="fu">traverse</span> (<span class="fu">traverse</span> readCell) <span class="fu">.</span> Data.List.Split.chunksOf <span class="dv">9</span> <span class="fu">$</span> s</a>
<a class="sourceLine" id="cb5-5" title="5">  <span class="fu">|</span> <span class="fu">otherwise</span>      <span class="fu">=</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb5-6" title="6">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-7" title="7">    allBitsSet <span class="fu">=</span> <span class="dv">1022</span></a>
<a class="sourceLine" id="cb5-8" title="8"></a>
<a class="sourceLine" id="cb5-9" title="9">    readCell <span class="ch">'.'</span> <span class="fu">=</span> <span class="dt">Just</span> <span class="fu">$</span> <span class="dt">Possible</span> allBitsSet</a>
<a class="sourceLine" id="cb5-10" title="10">    readCell c</a>
<a class="sourceLine" id="cb5-11" title="11">      <span class="fu">|</span> Data.Char.isDigit c <span class="fu">&amp;&amp;</span> c <span class="fu">&gt;</span> <span class="ch">'0'</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb5-12" title="12">          <span class="dt">Just</span> <span class="fu">.</span> <span class="dt">Fixed</span> <span class="fu">.</span> Data.Bits.bit <span class="fu">.</span> Data.Char.digitToInt <span class="fu">$</span> c</a>
<a class="sourceLine" id="cb5-13" title="13">      <span class="fu">|</span> <span class="fu">otherwise</span> <span class="fu">=</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb5-14" title="14"></a>
<a class="sourceLine" id="cb5-15" title="15"><span class="ot">showGrid ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb5-16" title="16">showGrid <span class="fu">=</span> <span class="fu">unlines</span> <span class="fu">.</span> <span class="fu">map</span> (<span class="fu">unwords</span> <span class="fu">.</span> <span class="fu">map</span> showCell)</a>
<a class="sourceLine" id="cb5-17" title="17">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-18" title="18">    showCell (<span class="dt">Fixed</span> x) <span class="fu">=</span> <span class="fu">show</span> <span class="fu">.</span> Data.Bits.countTrailingZeros <span class="fu">$</span> x</a>
<a class="sourceLine" id="cb5-19" title="19">    showCell _         <span class="fu">=</span> <span class="st">&quot;.&quot;</span></a>
<a class="sourceLine" id="cb5-20" title="20"></a>
<a class="sourceLine" id="cb5-21" title="21"><span class="ot">showGridWithPossibilities ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb5-22" title="22">showGridWithPossibilities <span class="fu">=</span> <span class="fu">unlines</span> <span class="fu">.</span> <span class="fu">map</span> (<span class="fu">unwords</span> <span class="fu">.</span> <span class="fu">map</span> showCell)</a>
<a class="sourceLine" id="cb5-23" title="23">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-24" title="24">    showCell (<span class="dt">Fixed</span> x) <span class="fu">=</span> (<span class="fu">show</span> <span class="fu">.</span> Data.Bits.countTrailingZeros <span class="fu">$</span> x) <span class="fu">++</span> <span class="st">&quot;          &quot;</span></a>
<a class="sourceLine" id="cb5-25" title="25">    showCell (<span class="dt">Possible</span> xs) <span class="fu">=</span></a>
<a class="sourceLine" id="cb5-26" title="26">      <span class="st">&quot;[&quot;</span> <span class="fu">++</span></a>
<a class="sourceLine" id="cb5-27" title="27">      <span class="fu">map</span> (\i <span class="ot">-&gt;</span> <span class="kw">if</span> Data.Bits.testBit xs i</a>
<a class="sourceLine" id="cb5-28" title="28">                 <span class="kw">then</span> Data.Char.intToDigit i</a>
<a class="sourceLine" id="cb5-29" title="29">                 <span class="kw">else</span> <span class="ch">' '</span>)</a>
<a class="sourceLine" id="cb5-30" title="30">          [<span class="dv">1</span><span class="fu">..</span><span class="dv">9</span>]</a>
<a class="sourceLine" id="cb5-31" title="31">      <span class="fu">++</span> <span class="st">&quot;]&quot;</span></a></code></pre></div>
<p>We set the same bits as the digits to indicate the presence of the digits in the possibilities. For example, for digit <code>1</code>, we set the bit 1 so that the resulting <code>Word16</code> is <code>0000 0000 0000 0010</code> or 2. This also means, for fixed cells, the value is <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Bits.html#v:countTrailingZeros" target="_blank" rel="noopener">count of the zeros from right</a>.</p>
<p>The change in the <code>exclusivePossibilities</code> function is pretty minimal:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode diff"><code class="sourceCode diff"><a class="sourceLine" id="cb6-1" title="1"><span class="st">-exclusivePossibilities :: [Cell] -&gt; [[Int]]</span></a>
<a class="sourceLine" id="cb6-2" title="2"><span class="va">+exclusivePossibilities :: [Cell] -&gt; [Data.Word.Word16]</span></a>
<a class="sourceLine" id="cb6-3" title="3"> exclusivePossibilities row =</a>
<a class="sourceLine" id="cb6-4" title="4">   row</a>
<a class="sourceLine" id="cb6-5" title="5">   &amp; zip [1..9]</a>
<a class="sourceLine" id="cb6-6" title="6">   &amp; filter (isPossible . snd)</a>
<a class="sourceLine" id="cb6-7" title="7">   &amp; Data.List.foldl'</a>
<a class="sourceLine" id="cb6-8" title="8">       (\acc ~(i, Possible xs) -&gt;</a>
<a class="sourceLine" id="cb6-9" title="9"><span class="st">-        Data.List.foldl'</span></a>
<a class="sourceLine" id="cb6-10" title="10"><span class="st">-          (\acc' x -&gt; Map.insertWith prepend x [i] acc')</span></a>
<a class="sourceLine" id="cb6-11" title="11"><span class="st">-          acc</span></a>
<a class="sourceLine" id="cb6-12" title="12"><span class="st">-          xs)</span></a>
<a class="sourceLine" id="cb6-13" title="13"><span class="va">+        Data.List.foldl'</span></a>
<a class="sourceLine" id="cb6-14" title="14"><span class="va">+          (\acc' x -&gt; if Data.Bits.testBit xs x</span></a>
<a class="sourceLine" id="cb6-15" title="15"><span class="va">+                      then Map.insertWith prepend x [i] acc'</span></a>
<a class="sourceLine" id="cb6-16" title="16"><span class="va">+                      else acc')</span></a>
<a class="sourceLine" id="cb6-17" title="17"><span class="va">+          acc</span></a>
<a class="sourceLine" id="cb6-18" title="18"><span class="va">+          [1..9])</span></a>
<a class="sourceLine" id="cb6-19" title="19">       Map.empty</a>
<a class="sourceLine" id="cb6-20" title="20">   &amp; Map.filter ((&lt; 4) . length)</a>
<a class="sourceLine" id="cb6-21" title="21">   &amp; Map.foldlWithKey' (\acc x is -&gt; Map.insertWith prepend is [x] acc) Map.empty</a>
<a class="sourceLine" id="cb6-22" title="22">   &amp; Map.filterWithKey (\is xs -&gt; length is == length xs)</a>
<a class="sourceLine" id="cb6-23" title="23">   &amp; Map.elems</a>
<a class="sourceLine" id="cb6-24" title="24"><span class="va">+  &amp; map (Data.List.foldl' Data.Bits.setBit Data.Bits.zeroBits)</span></a>
<a class="sourceLine" id="cb6-25" title="25">   where</a>
<a class="sourceLine" id="cb6-26" title="26">     prepend ~[y] ys = y:ys</a></code></pre></div>
<p>In the nested folding step, instead of folding over the possible values of the cells, now we fold over the digits from <code>1</code> to <code>9</code> and insert the entry in the map if the bit corresponding to the digit is set in the possibilities. And as the last step, we convert the exclusive possibilities to <code>Word16</code> by folding them, starting with zero. As example in the <em>REPL</em> should be instructive:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> poss <span class="fu">=</span> Data.List.foldl' Data.Bits.setBit Data.Bits.zeroBits</a>
<a class="sourceLine" id="cb7-2" title="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> row <span class="fu">=</span> [<span class="dt">Possible</span> <span class="fu">$</span> poss [<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">9</span>], <span class="dt">Fixed</span> <span class="fu">$</span> poss [<span class="dv">1</span>], <span class="dt">Fixed</span> <span class="fu">$</span> poss [<span class="dv">5</span>], <span class="dt">Possible</span> <span class="fu">$</span> poss [<span class="dv">6</span>,<span class="dv">9</span>], <span class="dt">Fixed</span> <span class="fu">$</span> poss [<span class="dv">7</span>], <span class="dt">Possible</span> <span class="fu">$</span> poss [<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">9</span>], <span class="dt">Possible</span> <span class="fu">$</span> poss [<span class="dv">6</span>,<span class="dv">9</span>], <span class="dt">Possible</span> <span class="fu">$</span> poss [<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">9</span>], <span class="dt">Possible</span> <span class="fu">$</span> poss [<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a>
<a class="sourceLine" id="cb7-3" title="3"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGridWithPossibilities [row]</a>
<a class="sourceLine" id="cb7-4" title="4">[   <span class="dv">4</span> <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">1</span>           <span class="dv">5</span>           [     <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">7</span>           [ <span class="dv">23</span>  <span class="dv">6</span> <span class="dv">89</span>] [     <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span> <span class="dv">89</span>] [ <span class="dv">23</span>  <span class="dv">6</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb7-5" title="5"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> exclusivePossibilities row</a>
<a class="sourceLine" id="cb7-6" title="6">[<span class="dv">16</span>,<span class="dv">268</span>]</a>
<a class="sourceLine" id="cb7-7" title="7"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> [poss [<span class="dv">4</span>], poss [<span class="dv">8</span>,<span class="dv">3</span>,<span class="dv">2</span>]]</a>
<a class="sourceLine" id="cb7-8" title="8">[<span class="dv">16</span>,<span class="dv">268</span>]</a></code></pre></div>
<p>This is the same example row as the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/#a-little-forward-a-little-backward">last time</a>. And it returns same results, excepts as a list of <code>Word16</code> now.</p>
<p>Now, we change <code>makeCell</code> to use bit operations instead of list ones:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1"><span class="ot">makeCell ::</span> <span class="dt">Data.Word.Word16</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cell</span></a>
<a class="sourceLine" id="cb8-2" title="2">makeCell ys</a>
<a class="sourceLine" id="cb8-3" title="3">  <span class="fu">|</span> ys <span class="fu">==</span> Data.Bits.zeroBits   <span class="fu">=</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb8-4" title="4">  <span class="fu">|</span> Data.Bits.popCount ys <span class="fu">==</span> <span class="dv">1</span> <span class="fu">=</span> <span class="dt">Just</span> <span class="fu">$</span> <span class="dt">Fixed</span> ys</a>
<a class="sourceLine" id="cb8-5" title="5">  <span class="fu">|</span> <span class="fu">otherwise</span>                  <span class="fu">=</span> <span class="dt">Just</span> <span class="fu">$</span> <span class="dt">Possible</span> ys</a></code></pre></div>
<p>And we change cell pruning functions too:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode diff"><code class="sourceCode diff"><a class="sourceLine" id="cb9-1" title="1"> pruneCellsByFixed :: [Cell] -&gt; Maybe [Cell]</a>
<a class="sourceLine" id="cb9-2" title="2"> pruneCellsByFixed cells = traverse pruneCell cells</a>
<a class="sourceLine" id="cb9-3" title="3">   where</a>
<a class="sourceLine" id="cb9-4" title="4"><span class="st">-    fixeds = [x | Fixed x &lt;- cells]</span></a>
<a class="sourceLine" id="cb9-5" title="5"><span class="va">+    fixeds = setBits Data.Bits.zeroBits [x | Fixed x &lt;- cells]</span></a>
<a class="sourceLine" id="cb9-6" title="6"></a>
<a class="sourceLine" id="cb9-7" title="7"><span class="st">-    pruneCell (Possible xs) = makeCell (xs Data.List.\\ fixeds)</span></a>
<a class="sourceLine" id="cb9-8" title="8"><span class="va">+    pruneCell (Possible xs) =</span></a>
<a class="sourceLine" id="cb9-9" title="9"><span class="va">+      makeCell (xs Data.Bits..&amp;. Data.Bits.complement fixeds)</span></a>
<a class="sourceLine" id="cb9-10" title="10">     pruneCell x             = Just x</a>
<a class="sourceLine" id="cb9-11" title="11"></a>
<a class="sourceLine" id="cb9-12" title="12"> pruneCellsByExclusives :: [Cell] -&gt; Maybe [Cell]</a>
<a class="sourceLine" id="cb9-13" title="13"> pruneCellsByExclusives cells = case exclusives of</a>
<a class="sourceLine" id="cb9-14" title="14">   [] -&gt; Just cells</a>
<a class="sourceLine" id="cb9-15" title="15">   _  -&gt; traverse pruneCell cells</a>
<a class="sourceLine" id="cb9-16" title="16">   where</a>
<a class="sourceLine" id="cb9-17" title="17">     exclusives    = exclusivePossibilities cells</a>
<a class="sourceLine" id="cb9-18" title="18"><span class="st">-    allExclusives = concat exclusives</span></a>
<a class="sourceLine" id="cb9-19" title="19"><span class="va">+    allExclusives = setBits Data.Bits.zeroBits exclusives</span></a>
<a class="sourceLine" id="cb9-20" title="20"></a>
<a class="sourceLine" id="cb9-21" title="21">     pruneCell cell@(Fixed _) = Just cell</a>
<a class="sourceLine" id="cb9-22" title="22">     pruneCell cell@(Possible xs)</a>
<a class="sourceLine" id="cb9-23" title="23">       | intersection `elem` exclusives = makeCell intersection</a>
<a class="sourceLine" id="cb9-24" title="24">       | otherwise                      = Just cell</a>
<a class="sourceLine" id="cb9-25" title="25">       where</a>
<a class="sourceLine" id="cb9-26" title="26"><span class="st">-        intersection = xs `Data.List.intersect` allExclusives</span></a>
<a class="sourceLine" id="cb9-27" title="27"><span class="va">+        intersection = xs Data.Bits..&amp;. allExclusives</span></a></code></pre></div>
<p>Notice how the list difference and intersection functions are replaced by <code>Data.Bits</code> functions. Specifically, list difference is replace by bitwise-and of the bitwise-complement, and list intersection is replaced by bitwise-and.</p>
<p>We make a one-line change in the <code>isGridInvalid</code> function to find empty possible cells using bit ops:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode diff"><code class="sourceCode diff"><a class="sourceLine" id="cb10-1" title="1"> isGridInvalid :: Grid -&gt; Bool</a>
<a class="sourceLine" id="cb10-2" title="2"> isGridInvalid grid =</a>
<a class="sourceLine" id="cb10-3" title="3">   any isInvalidRow grid</a>
<a class="sourceLine" id="cb10-4" title="4">   || any isInvalidRow (Data.List.transpose grid)</a>
<a class="sourceLine" id="cb10-5" title="5">   || any isInvalidRow (subGridsToRows grid)</a>
<a class="sourceLine" id="cb10-6" title="6">   where</a>
<a class="sourceLine" id="cb10-7" title="7">     isInvalidRow row =</a>
<a class="sourceLine" id="cb10-8" title="8">       let fixeds         = [x | Fixed x &lt;- row]</a>
<a class="sourceLine" id="cb10-9" title="9"><span class="st">-          emptyPossibles = [x | Possible x &lt;- row, null x]</span></a>
<a class="sourceLine" id="cb10-10" title="10"><span class="va">+          emptyPossibles = [() | Possible x &lt;- row, x == Data.Bits.zeroBits]</span></a>
<a class="sourceLine" id="cb10-11" title="11">       in hasDups fixeds || not (null emptyPossibles)</a>
<a class="sourceLine" id="cb10-12" title="12"></a>
<a class="sourceLine" id="cb10-13" title="13">     hasDups l = hasDups' l []</a>
<a class="sourceLine" id="cb10-14" title="14"></a>
<a class="sourceLine" id="cb10-15" title="15">     hasDups' [] _ = False</a>
<a class="sourceLine" id="cb10-16" title="16">     hasDups' (y:ys) xs</a>
<a class="sourceLine" id="cb10-17" title="17">       | y `elem` xs = True</a>
<a class="sourceLine" id="cb10-18" title="18">       | otherwise   = hasDups' ys (y:xs)</a></code></pre></div>
<p>And finally, we change the <code>nextGrids</code> functions to use bit operations:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" title="1"><span class="ot">nextGrids ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> (<span class="dt">Grid</span>, <span class="dt">Grid</span>)</a>
<a class="sourceLine" id="cb11-2" title="2">nextGrids grid <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-3" title="3">  <span class="kw">let</span> (i, first<span class="fu">@</span>(<span class="dt">Fixed</span> _), rest) <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-4" title="4">        fixCell</a>
<a class="sourceLine" id="cb11-5" title="5">        <span class="fu">.</span> Data.List.minimumBy (<span class="fu">compare</span> <span class="ot">`Data.Function.on`</span> (possibilityCount <span class="fu">.</span> <span class="fu">snd</span>))</a>
<a class="sourceLine" id="cb11-6" title="6">        <span class="fu">.</span> <span class="fu">filter</span> (isPossible <span class="fu">.</span> <span class="fu">snd</span>)</a>
<a class="sourceLine" id="cb11-7" title="7">        <span class="fu">.</span> <span class="fu">zip</span> [<span class="dv">0</span><span class="fu">..</span>]</a>
<a class="sourceLine" id="cb11-8" title="8">        <span class="fu">.</span> <span class="fu">concat</span></a>
<a class="sourceLine" id="cb11-9" title="9">        <span class="fu">$</span> grid</a>
<a class="sourceLine" id="cb11-10" title="10">  <span class="kw">in</span> (replace2D i first grid, replace2D i rest grid)</a>
<a class="sourceLine" id="cb11-11" title="11">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-12" title="12">    possibilityCount (<span class="dt">Possible</span> xs) <span class="fu">=</span> Data.Bits.popCount xs</a>
<a class="sourceLine" id="cb11-13" title="13">    possibilityCount (<span class="dt">Fixed</span> _)     <span class="fu">=</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb11-14" title="14"></a>
<a class="sourceLine" id="cb11-15" title="15">    fixCell <span class="fu">~</span>(i, <span class="dt">Possible</span> xs) <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-16" title="16">      <span class="kw">let</span> x <span class="fu">=</span> Data.Bits.countTrailingZeros xs</a>
<a class="sourceLine" id="cb11-17" title="17">      <span class="kw">in</span> <span class="kw">case</span> makeCell (Data.Bits.clearBit xs x) <span class="kw">of</span></a>
<a class="sourceLine" id="cb11-18" title="18">        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">error</span> <span class="st">&quot;Impossible case&quot;</span></a>
<a class="sourceLine" id="cb11-19" title="19">        <span class="dt">Just</span> cell <span class="ot">-&gt;</span> (i, <span class="dt">Fixed</span> (Data.Bits.bit x), cell)</a>
<a class="sourceLine" id="cb11-20" title="20"></a>
<a class="sourceLine" id="cb11-21" title="21"><span class="ot">    replace2D ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> [[a]] <span class="ot">-&gt;</span> [[a]]</a>
<a class="sourceLine" id="cb11-22" title="22">    replace2D i v <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-23" title="23">      <span class="kw">let</span> (x, y) <span class="fu">=</span> (i <span class="ot">`quot`</span> <span class="dv">9</span>, i <span class="ot">`mod`</span> <span class="dv">9</span>) <span class="kw">in</span> replace x (replace y (<span class="fu">const</span> v))</a>
<a class="sourceLine" id="cb11-24" title="24">    replace p f xs <span class="fu">=</span> [<span class="kw">if</span> i <span class="fu">==</span> p <span class="kw">then</span> f x <span class="kw">else</span> x <span class="fu">|</span> (x, i) <span class="ot">&lt;-</span> <span class="fu">zip</span> xs [<span class="dv">0</span><span class="fu">..</span>]]</a></code></pre></div>
<p><code>possibilityCount</code> now uses <code>Data.Bits.popCount</code> to count the number of bits set to 1. <code>fixCell</code> now chooses the first set bit from right as the digit to fix. Rest of the code stays the same. Let’s build and run it:</p>
<pre class="plain"><code>$ stack build
$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
       69.44 real        69.12 user         0.37 sys</code></pre>
<p>Wow! That is almost 3.7x faster than the previous solution. It’s a massive win! But let’s not be content yet. To the profiler again!<a href="#fn4" class="footnote-ref" id="fnref4"><sup>4</sup></a></p>
<h2 id="back-to-the-profiler" data-track-content data-content-name="back-to-the-profiler" data-content-piece="fast-sudoku-solver-in-haskell-3">Back to the Profiler<a href="#back-to-the-profiler" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Running the profiler again gives us these top six culprits:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Centre</th>
<th style="text-align: left;">Src</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities</code></td>
<td style="text-align: left;">Sudoku.hs:(57,1)-(74,26)</td>
<td style="text-align: right;">25.2</td>
<td style="text-align: right;">16.6</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>exclusivePossibilities.\.\</code></td>
<td style="text-align: left;">Sudoku.hs:64:23-96</td>
<td style="text-align: right;">19.0</td>
<td style="text-align: right;">32.8</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>fixM.\</code></td>
<td style="text-align: left;">Sudoku.hs:15:27-65</td>
<td style="text-align: right;">12.5</td>
<td style="text-align: right;">0.1</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCellsByFixed</code></td>
<td style="text-align: left;">Sudoku.hs:(83,1)-(88,36)</td>
<td style="text-align: right;">5.9</td>
<td style="text-align: right;">7.1</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pruneGrid'</code></td>
<td style="text-align: left;">Sudoku.hs:(115,1)-(118,64)</td>
<td style="text-align: right;">5.0</td>
<td style="text-align: right;">8.6</td>
</tr>
</tbody>
</table>
</div>
<p>Hurray! <code>pruneCellsByFixed.pruneCell</code> has disappeared from the list of top bottlenecks. Though <code>exclusivePossibilities</code> still remains here as expected.</p>
<p><code>exclusivePossibilities</code> is a big function. The profiler does not really tell us which parts of it are the slow ones. That’s because by default, the profiler only considers functions as <em>Cost Centres</em>. We need to give it hints for it to be able to find bottlenecks inside functions. For that, we need to insert <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html#inserting-cost-centres-by-hand" target="_blank" rel="noopener"><em>Cost Centre</em> annotations</a> in the code:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" title="1"><span class="ot">exclusivePossibilities ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> [<span class="dt">Data.Word.Word16</span>]</a>
<a class="sourceLine" id="cb13-2" title="2">exclusivePossibilities row <span class="fu">=</span></a>
<a class="sourceLine" id="cb13-3" title="3">  row</a>
<a class="sourceLine" id="cb13-4" title="4">  <span class="fu">&amp;</span> (<span class="ot">{-# SCC &quot;EP.zip&quot; #-}</span> <span class="fu">zip</span> [<span class="dv">1</span><span class="fu">..</span><span class="dv">9</span>])</a>
<a class="sourceLine" id="cb13-5" title="5">  <span class="fu">&amp;</span> (<span class="ot">{-# SCC &quot;EP.filter&quot; #-}</span> <span class="fu">filter</span> (isPossible <span class="fu">.</span> <span class="fu">snd</span>))</a>
<a class="sourceLine" id="cb13-6" title="6">  <span class="fu">&amp;</span> (<span class="ot">{-# SCC &quot;EP.foldl&quot; #-}</span> Data.List.foldl'</a>
<a class="sourceLine" id="cb13-7" title="7">      (\acc <span class="fu">~</span>(i, <span class="dt">Possible</span> xs) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb13-8" title="8">        Data.List.foldl'</a>
<a class="sourceLine" id="cb13-9" title="9">          (\acc' n <span class="ot">-&gt;</span> <span class="kw">if</span> Data.Bits.testBit xs n</a>
<a class="sourceLine" id="cb13-10" title="10">                      <span class="kw">then</span> Map.insertWith prepend n [i] acc'</a>
<a class="sourceLine" id="cb13-11" title="11">                      <span class="kw">else</span> acc')</a>
<a class="sourceLine" id="cb13-12" title="12">          acc</a>
<a class="sourceLine" id="cb13-13" title="13">          [<span class="dv">1</span><span class="fu">..</span><span class="dv">9</span>])</a>
<a class="sourceLine" id="cb13-14" title="14">      Map.empty)</a>
<a class="sourceLine" id="cb13-15" title="15">  <span class="fu">&amp;</span> (<span class="ot">{-# SCC &quot;EP.Map.filter1&quot; #-}</span> Map.filter ((<span class="fu">&lt;</span> <span class="dv">4</span>) <span class="fu">.</span> <span class="fu">length</span>))</a>
<a class="sourceLine" id="cb13-16" title="16">  <span class="fu">&amp;</span> (<span class="ot">{-# SCC &quot;EP.Map.foldl&quot; #-}</span></a>
<a class="sourceLine" id="cb13-17" title="17">       Map.foldlWithKey'</a>
<a class="sourceLine" id="cb13-18" title="18">         (\acc x is <span class="ot">-&gt;</span> Map.insertWith prepend is [x] acc)</a>
<a class="sourceLine" id="cb13-19" title="19">         Map.empty)</a>
<a class="sourceLine" id="cb13-20" title="20">  <span class="fu">&amp;</span> (<span class="ot">{-# SCC &quot;EP.Map.filter2&quot; #-}</span></a>
<a class="sourceLine" id="cb13-21" title="21">       Map.filterWithKey (\is xs <span class="ot">-&gt;</span> <span class="fu">length</span> is <span class="fu">==</span> <span class="fu">length</span> xs))</a>
<a class="sourceLine" id="cb13-22" title="22">  <span class="fu">&amp;</span> (<span class="ot">{-# SCC &quot;EP.Map.elems&quot; #-}</span> Map.elems)</a>
<a class="sourceLine" id="cb13-23" title="23">  <span class="fu">&amp;</span> (<span class="ot">{-# SCC &quot;EP.map&quot; #-}</span></a>
<a class="sourceLine" id="cb13-24" title="24">       <span class="fu">map</span> (Data.List.foldl' Data.Bits.setBit Data.Bits.zeroBits))</a>
<a class="sourceLine" id="cb13-25" title="25">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-26" title="26">    prepend <span class="fu">~</span>[y] ys <span class="fu">=</span> y<span class="fu">:</span>ys</a></code></pre></div>
<p>Here, <code>{-# SCC "EP.zip" #-}</code> is a <em>Cost Centre</em> annotation. <code>"EP.zip"</code> is the name we choose to give to this <em>Cost Centre</em>.</p>
<p>After profiling the code again, we get a different list of bottlenecks:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Centre</th>
<th style="text-align: left;">Src</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities.\.\</code></td>
<td style="text-align: left;">Sudoku.hs:(64,23)-(66,31)</td>
<td style="text-align: right;">19.5</td>
<td style="text-align: right;">31.4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>fixM.\</code></td>
<td style="text-align: left;">Sudoku.hs:15:27-65</td>
<td style="text-align: right;">13.1</td>
<td style="text-align: right;">0.1</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pruneCellsByFixed</code></td>
<td style="text-align: left;">Sudoku.hs:(85,1)-(90,36)</td>
<td style="text-align: right;">5.4</td>
<td style="text-align: right;">6.8</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneGrid'</code></td>
<td style="text-align: left;">Sudoku.hs:(117,1)-(120,64)</td>
<td style="text-align: right;">4.8</td>
<td style="text-align: right;">8.3</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>EP.zip</code></td>
<td style="text-align: left;">Sudoku.hs:59:27-36</td>
<td style="text-align: right;">4.3</td>
<td style="text-align: right;">10.7</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>EP.Map.filter1</code></td>
<td style="text-align: left;">Sudoku.hs:70:35-61</td>
<td style="text-align: right;">4.2</td>
<td style="text-align: right;">0.5</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>chunksOf</code></td>
<td style="text-align: left;">Data/List/Split/Internals.hs:(514,1)-(517,49)</td>
<td style="text-align: right;">4.1</td>
<td style="text-align: right;">7.4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>exclusivePossibilities.\</code></td>
<td style="text-align: left;">Sudoku.hs:71:64-96</td>
<td style="text-align: right;">4.0</td>
<td style="text-align: right;">3.4</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>EP.filter</code></td>
<td style="text-align: left;">Sudoku.hs:60:30-54</td>
<td style="text-align: right;">2.9</td>
<td style="text-align: right;">3.4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>EP.foldl</code></td>
<td style="text-align: left;">Sudoku.hs:(61,29)-(69,15)</td>
<td style="text-align: right;">2.8</td>
<td style="text-align: right;">1.8</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities</code></td>
<td style="text-align: left;">Sudoku.hs:(57,1)-(76,26)</td>
<td style="text-align: right;">2.7</td>
<td style="text-align: right;">1.9</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>chunksOf.splitter</code></td>
<td style="text-align: left;">Data/List/Split/Internals.hs:(516,3)-(517,49)</td>
<td style="text-align: right;">2.5</td>
<td style="text-align: right;">2.7</td>
</tr>
</tbody>
</table>
</div>
<p>So almost one-fifth of the time is actually going in this nested one-line anonymous function inside <code>exclusivePossibilities</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" title="1">(\acc' n <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb14-2" title="2">    <span class="kw">if</span> Data.Bits.testBit xs n <span class="kw">then</span> Map.insertWith prepend n [i] acc' <span class="kw">else</span> acc')</a></code></pre></div>
<p>But we are going to ignore it for now.</p>
<p>If we look closely, we also find that around 17% of the run time now goes into list traversal and manipulation. This is in the functions <code>pruneCellsByFixed</code>, <code>pruneGrid'</code>, <code>chunksOf</code> and <code>chunksOf.splitter</code>, where the first two are majorly list traversal and transposition, and the last two are list splitting. Maybe it is time to get rid of lists altogether?</p>
<h2 id="vectors-of-speed" data-track-content data-content-name="vectors-of-speed" data-content-piece="fast-sudoku-solver-in-haskell-3">Vectors of Speed<a href="#vectors-of-speed" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p><a href="https://hackage.haskell.org/package/vector-0.12.0.1" target="_blank" rel="noopener">Vector</a> is a Haskell library for working with arrays. It implements very performant operations for integer-indexed array data. Unlike the lists in Haskell which are implemented as <a href="https://en.wikipedia.org/wiki/Linked_list#Singly_linked_list" target="_blank" rel="noopener">singly linked lists</a>, vectors are stored in a contiguous set of memory locations. This makes random access to the elements a constant time operation. The memory overhead per additional item in vectors is also much smaller. Lists allocate memory for each item in the heap and have pointers to the memory locations in nodes, leading to a lot of wasted memory in holding pointers. On the other hand, operations on lists are lazy, whereas, operations on vectors are strict, and this may need to useless computation depending on the use-case<a href="#fn5" class="footnote-ref" id="fnref5"><sup>5</sup></a>.</p>
<p>In our current code, we represent the grid as a list of lists of cells. All the pruning operations require us to traverse the grid list or the row lists. We also need to transform the grid back-and-forth for being able to use the same pruning operations for rows, columns and sub-grids. The pruning of cells and the choosing of pivot cells also requires us to replace cells in the grid with new ones, leading to a lot of list traversals.</p>
<p>To prevent all this linear-time list traversals, we can replace the nested list of lists with a single vector. Then all we need to do it to go over the right parts of this vector, looking up and replacing cells as needed. Since both lookups and updates on vectors are constant time, this should lead to a speedup.</p>
<p>Let’s start by changing the grid to a vector of cells.:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" title="1"><span class="kw">data</span> <span class="dt">Cell</span> <span class="fu">=</span> <span class="dt">Fixed</span> <span class="dt">Data.Word.Word16</span></a>
<a class="sourceLine" id="cb15-2" title="2">          <span class="fu">|</span> <span class="dt">Possible</span> <span class="dt">Data.Word.Word16</span></a>
<a class="sourceLine" id="cb15-3" title="3">          <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</a>
<a class="sourceLine" id="cb15-4" title="4"></a>
<a class="sourceLine" id="cb15-5" title="5"><span class="kw">type</span> <span class="dt">Grid</span> <span class="fu">=</span> <span class="dt">Data.Vector.Vector</span> <span class="dt">Cell</span></a></code></pre></div>
<p>Since we plan to traverse different parts of the same vector, let’s define these different parts first:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" title="1"><span class="kw">type</span> <span class="dt">CellIxs</span> <span class="fu">=</span> [<span class="dt">Int</span>]</a>
<a class="sourceLine" id="cb16-2" title="2"></a>
<a class="sourceLine" id="cb16-3" title="3"><span class="ot">fromXY ::</span> (<span class="dt">Int</span>, <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb16-4" title="4">fromXY (x, y) <span class="fu">=</span> x <span class="fu">*</span> <span class="dv">9</span> <span class="fu">+</span> y</a>
<a class="sourceLine" id="cb16-5" title="5"></a>
<a class="sourceLine" id="cb16-6" title="6">allRowIxs, allColIxs,<span class="ot"> allSubGridIxs ::</span> [<span class="dt">CellIxs</span>]</a>
<a class="sourceLine" id="cb16-7" title="7">allRowIxs <span class="fu">=</span> [getRow i <span class="fu">|</span> i <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="fu">..</span><span class="dv">8</span>]]</a>
<a class="sourceLine" id="cb16-8" title="8">  <span class="kw">where</span> getRow n <span class="fu">=</span> [ fromXY (n, i) <span class="fu">|</span> i <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="fu">..</span><span class="dv">8</span>] ]</a>
<a class="sourceLine" id="cb16-9" title="9"></a>
<a class="sourceLine" id="cb16-10" title="10">allColIxs <span class="fu">=</span> [getCol i <span class="fu">|</span> i <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="fu">..</span><span class="dv">8</span>]]</a>
<a class="sourceLine" id="cb16-11" title="11">  <span class="kw">where</span> getCol n <span class="fu">=</span> [ fromXY (i, n) <span class="fu">|</span> i <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="fu">..</span><span class="dv">8</span>] ]</a>
<a class="sourceLine" id="cb16-12" title="12"></a>
<a class="sourceLine" id="cb16-13" title="13">allSubGridIxs <span class="fu">=</span> [getSubGrid i <span class="fu">|</span> i <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="fu">..</span><span class="dv">8</span>]]</a>
<a class="sourceLine" id="cb16-14" title="14">  <span class="kw">where</span> getSubGrid n <span class="fu">=</span> <span class="kw">let</span> (r, c) <span class="fu">=</span> (n <span class="ot">`quot`</span> <span class="dv">3</span>, n <span class="ot">`mod`</span> <span class="dv">3</span>)</a>
<a class="sourceLine" id="cb16-15" title="15">          <span class="kw">in</span> [ fromXY (<span class="dv">3</span> <span class="fu">*</span> r <span class="fu">+</span> i, <span class="dv">3</span> <span class="fu">*</span> c <span class="fu">+</span> j) <span class="fu">|</span> i <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="fu">..</span><span class="dv">2</span>], j <span class="ot">&lt;-</span> [<span class="dv">0</span><span class="fu">..</span><span class="dv">2</span>] ]</a></code></pre></div>
<p>We define a type for cell indices as a list of integers. Then we create three lists of cell indices: all row indices, all column indices, and all sub-grid indices. Let’s check these out in the <em>REPL</em>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> Control.Monad.mapM_ <span class="fu">print</span> allRowIxs</a>
<a class="sourceLine" id="cb17-2" title="2">[<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>]</a>
<a class="sourceLine" id="cb17-3" title="3">[<span class="dv">9</span>,<span class="dv">10</span>,<span class="dv">11</span>,<span class="dv">12</span>,<span class="dv">13</span>,<span class="dv">14</span>,<span class="dv">15</span>,<span class="dv">16</span>,<span class="dv">17</span>]</a>
<a class="sourceLine" id="cb17-4" title="4">[<span class="dv">18</span>,<span class="dv">19</span>,<span class="dv">20</span>,<span class="dv">21</span>,<span class="dv">22</span>,<span class="dv">23</span>,<span class="dv">24</span>,<span class="dv">25</span>,<span class="dv">26</span>]</a>
<a class="sourceLine" id="cb17-5" title="5">[<span class="dv">27</span>,<span class="dv">28</span>,<span class="dv">29</span>,<span class="dv">30</span>,<span class="dv">31</span>,<span class="dv">32</span>,<span class="dv">33</span>,<span class="dv">34</span>,<span class="dv">35</span>]</a>
<a class="sourceLine" id="cb17-6" title="6">[<span class="dv">36</span>,<span class="dv">37</span>,<span class="dv">38</span>,<span class="dv">39</span>,<span class="dv">40</span>,<span class="dv">41</span>,<span class="dv">42</span>,<span class="dv">43</span>,<span class="dv">44</span>]</a>
<a class="sourceLine" id="cb17-7" title="7">[<span class="dv">45</span>,<span class="dv">46</span>,<span class="dv">47</span>,<span class="dv">48</span>,<span class="dv">49</span>,<span class="dv">50</span>,<span class="dv">51</span>,<span class="dv">52</span>,<span class="dv">53</span>]</a>
<a class="sourceLine" id="cb17-8" title="8">[<span class="dv">54</span>,<span class="dv">55</span>,<span class="dv">56</span>,<span class="dv">57</span>,<span class="dv">58</span>,<span class="dv">59</span>,<span class="dv">60</span>,<span class="dv">61</span>,<span class="dv">62</span>]</a>
<a class="sourceLine" id="cb17-9" title="9">[<span class="dv">63</span>,<span class="dv">64</span>,<span class="dv">65</span>,<span class="dv">66</span>,<span class="dv">67</span>,<span class="dv">68</span>,<span class="dv">69</span>,<span class="dv">70</span>,<span class="dv">71</span>]</a>
<a class="sourceLine" id="cb17-10" title="10">[<span class="dv">72</span>,<span class="dv">73</span>,<span class="dv">74</span>,<span class="dv">75</span>,<span class="dv">76</span>,<span class="dv">77</span>,<span class="dv">78</span>,<span class="dv">79</span>,<span class="dv">80</span>]</a>
<a class="sourceLine" id="cb17-11" title="11"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> Control.Monad.mapM_ <span class="fu">print</span> allColIxs</a>
<a class="sourceLine" id="cb17-12" title="12">[<span class="dv">0</span>,<span class="dv">9</span>,<span class="dv">18</span>,<span class="dv">27</span>,<span class="dv">36</span>,<span class="dv">45</span>,<span class="dv">54</span>,<span class="dv">63</span>,<span class="dv">72</span>]</a>
<a class="sourceLine" id="cb17-13" title="13">[<span class="dv">1</span>,<span class="dv">10</span>,<span class="dv">19</span>,<span class="dv">28</span>,<span class="dv">37</span>,<span class="dv">46</span>,<span class="dv">55</span>,<span class="dv">64</span>,<span class="dv">73</span>]</a>
<a class="sourceLine" id="cb17-14" title="14">[<span class="dv">2</span>,<span class="dv">11</span>,<span class="dv">20</span>,<span class="dv">29</span>,<span class="dv">38</span>,<span class="dv">47</span>,<span class="dv">56</span>,<span class="dv">65</span>,<span class="dv">74</span>]</a>
<a class="sourceLine" id="cb17-15" title="15">[<span class="dv">3</span>,<span class="dv">12</span>,<span class="dv">21</span>,<span class="dv">30</span>,<span class="dv">39</span>,<span class="dv">48</span>,<span class="dv">57</span>,<span class="dv">66</span>,<span class="dv">75</span>]</a>
<a class="sourceLine" id="cb17-16" title="16">[<span class="dv">4</span>,<span class="dv">13</span>,<span class="dv">22</span>,<span class="dv">31</span>,<span class="dv">40</span>,<span class="dv">49</span>,<span class="dv">58</span>,<span class="dv">67</span>,<span class="dv">76</span>]</a>
<a class="sourceLine" id="cb17-17" title="17">[<span class="dv">5</span>,<span class="dv">14</span>,<span class="dv">23</span>,<span class="dv">32</span>,<span class="dv">41</span>,<span class="dv">50</span>,<span class="dv">59</span>,<span class="dv">68</span>,<span class="dv">77</span>]</a>
<a class="sourceLine" id="cb17-18" title="18">[<span class="dv">6</span>,<span class="dv">15</span>,<span class="dv">24</span>,<span class="dv">33</span>,<span class="dv">42</span>,<span class="dv">51</span>,<span class="dv">60</span>,<span class="dv">69</span>,<span class="dv">78</span>]</a>
<a class="sourceLine" id="cb17-19" title="19">[<span class="dv">7</span>,<span class="dv">16</span>,<span class="dv">25</span>,<span class="dv">34</span>,<span class="dv">43</span>,<span class="dv">52</span>,<span class="dv">61</span>,<span class="dv">70</span>,<span class="dv">79</span>]</a>
<a class="sourceLine" id="cb17-20" title="20">[<span class="dv">8</span>,<span class="dv">17</span>,<span class="dv">26</span>,<span class="dv">35</span>,<span class="dv">44</span>,<span class="dv">53</span>,<span class="dv">62</span>,<span class="dv">71</span>,<span class="dv">80</span>]</a>
<a class="sourceLine" id="cb17-21" title="21"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> Control.Monad.mapM_ <span class="fu">print</span> allSubGridIxs</a>
<a class="sourceLine" id="cb17-22" title="22">[<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">9</span>,<span class="dv">10</span>,<span class="dv">11</span>,<span class="dv">18</span>,<span class="dv">19</span>,<span class="dv">20</span>]</a>
<a class="sourceLine" id="cb17-23" title="23">[<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">12</span>,<span class="dv">13</span>,<span class="dv">14</span>,<span class="dv">21</span>,<span class="dv">22</span>,<span class="dv">23</span>]</a>
<a class="sourceLine" id="cb17-24" title="24">[<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">15</span>,<span class="dv">16</span>,<span class="dv">17</span>,<span class="dv">24</span>,<span class="dv">25</span>,<span class="dv">26</span>]</a>
<a class="sourceLine" id="cb17-25" title="25">[<span class="dv">27</span>,<span class="dv">28</span>,<span class="dv">29</span>,<span class="dv">36</span>,<span class="dv">37</span>,<span class="dv">38</span>,<span class="dv">45</span>,<span class="dv">46</span>,<span class="dv">47</span>]</a>
<a class="sourceLine" id="cb17-26" title="26">[<span class="dv">30</span>,<span class="dv">31</span>,<span class="dv">32</span>,<span class="dv">39</span>,<span class="dv">40</span>,<span class="dv">41</span>,<span class="dv">48</span>,<span class="dv">49</span>,<span class="dv">50</span>]</a>
<a class="sourceLine" id="cb17-27" title="27">[<span class="dv">33</span>,<span class="dv">34</span>,<span class="dv">35</span>,<span class="dv">42</span>,<span class="dv">43</span>,<span class="dv">44</span>,<span class="dv">51</span>,<span class="dv">52</span>,<span class="dv">53</span>]</a>
<a class="sourceLine" id="cb17-28" title="28">[<span class="dv">54</span>,<span class="dv">55</span>,<span class="dv">56</span>,<span class="dv">63</span>,<span class="dv">64</span>,<span class="dv">65</span>,<span class="dv">72</span>,<span class="dv">73</span>,<span class="dv">74</span>]</a>
<a class="sourceLine" id="cb17-29" title="29">[<span class="dv">57</span>,<span class="dv">58</span>,<span class="dv">59</span>,<span class="dv">66</span>,<span class="dv">67</span>,<span class="dv">68</span>,<span class="dv">75</span>,<span class="dv">76</span>,<span class="dv">77</span>]</a>
<a class="sourceLine" id="cb17-30" title="30">[<span class="dv">60</span>,<span class="dv">61</span>,<span class="dv">62</span>,<span class="dv">69</span>,<span class="dv">70</span>,<span class="dv">71</span>,<span class="dv">78</span>,<span class="dv">79</span>,<span class="dv">80</span>]</a></code></pre></div>
<p>We can verify manually that these indices are correct.</p>
<p>Read and show functions are easy to change for vector:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode diff"><code class="sourceCode diff"><a class="sourceLine" id="cb18-1" title="1"> readGrid :: String -&gt; Maybe Grid</a>
<a class="sourceLine" id="cb18-2" title="2"> readGrid s</a>
<a class="sourceLine" id="cb18-3" title="3"><span class="st">-  | length s == 81 = traverse (traverse readCell) . Data.List.Split.chunksOf 9 $ s</span></a>
<a class="sourceLine" id="cb18-4" title="4"><span class="va">+  | length s == 81 = Data.Vector.fromList &lt;$&gt; traverse readCell s</span></a>
<a class="sourceLine" id="cb18-5" title="5">   | otherwise      = Nothing</a>
<a class="sourceLine" id="cb18-6" title="6">   where</a>
<a class="sourceLine" id="cb18-7" title="7">     allBitsSet = 1022</a>
<a class="sourceLine" id="cb18-8" title="8"></a>
<a class="sourceLine" id="cb18-9" title="9">     readCell '.' = Just $ Possible allBitsSet</a>
<a class="sourceLine" id="cb18-10" title="10">     readCell c</a>
<a class="sourceLine" id="cb18-11" title="11">       | Data.Char.isDigit c &amp;&amp; c &gt; '0' =</a>
<a class="sourceLine" id="cb18-12" title="12">           Just . Fixed . Data.Bits.bit . Data.Char.digitToInt $ c</a>
<a class="sourceLine" id="cb18-13" title="13">       | otherwise = Nothing</a>
<a class="sourceLine" id="cb18-14" title="14"></a>
<a class="sourceLine" id="cb18-15" title="15"> showGrid :: Grid -&gt; String</a>
<a class="sourceLine" id="cb18-16" title="16"><span class="st">-showGrid = unlines . map (unwords . map showCell)</span></a>
<a class="sourceLine" id="cb18-17" title="17"><span class="va">+showGrid grid =</span></a>
<a class="sourceLine" id="cb18-18" title="18"><span class="va">+  unlines . map (unwords . map (showCell . (grid !))) $ allRowIxs</span></a>
<a class="sourceLine" id="cb18-19" title="19">   where</a>
<a class="sourceLine" id="cb18-20" title="20">     showCell (Fixed x) = show . Data.Bits.countTrailingZeros $ x</a>
<a class="sourceLine" id="cb18-21" title="21">     showCell _         = &quot;.&quot;</a>
<a class="sourceLine" id="cb18-22" title="22"></a>
<a class="sourceLine" id="cb18-23" title="23"> showGridWithPossibilities :: Grid -&gt; String</a>
<a class="sourceLine" id="cb18-24" title="24"><span class="st">-showGridWithPossibilities = unlines . map (unwords . map showCell)</span></a>
<a class="sourceLine" id="cb18-25" title="25"><span class="va">+showGridWithPossibilities grid =</span></a>
<a class="sourceLine" id="cb18-26" title="26"><span class="va">+  unlines . map (unwords . map (showCell . (grid !))) $ allRowIxs</span></a>
<a class="sourceLine" id="cb18-27" title="27">   where</a>
<a class="sourceLine" id="cb18-28" title="28">     showCell (Fixed x) = (show . Data.Bits.countTrailingZeros $ x) ++ &quot;          &quot;</a>
<a class="sourceLine" id="cb18-29" title="29">     showCell (Possible xs) =</a>
<a class="sourceLine" id="cb18-30" title="30">       &quot;[&quot; ++</a>
<a class="sourceLine" id="cb18-31" title="31">       map (\i -&gt; if Data.Bits.testBit xs i</a>
<a class="sourceLine" id="cb18-32" title="32">                  then Data.Char.intToDigit i</a>
<a class="sourceLine" id="cb18-33" title="33">                  else ' ')</a>
<a class="sourceLine" id="cb18-34" title="34">           [1..9]</a>
<a class="sourceLine" id="cb18-35" title="35">       ++ &quot;]&quot;</a></code></pre></div>
<p><code>readGrid</code> simply changes to work on a single vector of cells instead of a list of lists. Show functions have a pretty minor change to do lookups from a vector using the row indices and the <a href="https://hackage.haskell.org/package/vector-0.12.0.1/docs/Data-Vector.html#v:-33-" target="_blank" rel="noopener"><code>(!)</code></a> function. The <code>(!)</code> function is the vector indexing function which is similar to the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Prelude.html#v:-33--33-" target="_blank" rel="noopener"><code>(!!)</code></a> function, except it executes in constant time.</p>
<p>The pruning related functions are rewritten for working with vectors:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" title="1"><span class="ot">replaceCell ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb19-2" title="2">replaceCell i c g <span class="fu">=</span> g <span class="fu">Data.Vector.//</span> [(i, c)]</a>
<a class="sourceLine" id="cb19-3" title="3"></a>
<a class="sourceLine" id="cb19-4" title="4"><span class="ot">pruneCellsByFixed ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">CellIxs</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb19-5" title="5">pruneCellsByFixed grid cellIxs <span class="fu">=</span></a>
<a class="sourceLine" id="cb19-6" title="6">  Control.Monad.foldM pruneCell grid <span class="fu">.</span> <span class="fu">map</span> (\i <span class="ot">-&gt;</span> (i, grid <span class="fu">!</span> i)) <span class="fu">$</span> cellIxs</a>
<a class="sourceLine" id="cb19-7" title="7">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb19-8" title="8">    fixeds <span class="fu">=</span> setBits Data.Bits.zeroBits [x <span class="fu">|</span> <span class="dt">Fixed</span> x <span class="ot">&lt;-</span> <span class="fu">map</span> (grid <span class="fu">!</span>) cellIxs]</a>
<a class="sourceLine" id="cb19-9" title="9"></a>
<a class="sourceLine" id="cb19-10" title="10">    pruneCell g (_, <span class="dt">Fixed</span> _) <span class="fu">=</span> <span class="dt">Just</span> g</a>
<a class="sourceLine" id="cb19-11" title="11">    pruneCell g (i, <span class="dt">Possible</span> xs)</a>
<a class="sourceLine" id="cb19-12" title="12">      <span class="fu">|</span> xs' <span class="fu">==</span> xs <span class="fu">=</span> <span class="dt">Just</span> g</a>
<a class="sourceLine" id="cb19-13" title="13">      <span class="fu">|</span> <span class="fu">otherwise</span> <span class="fu">=</span> <span class="fu">flip</span> (replaceCell i) g <span class="fu">&lt;$&gt;</span> makeCell xs'</a>
<a class="sourceLine" id="cb19-14" title="14">      <span class="kw">where</span></a>
<a class="sourceLine" id="cb19-15" title="15">        xs' <span class="fu">=</span> xs <span class="fu">Data.Bits..&amp;.</span> Data.Bits.complement fixeds</a>
<a class="sourceLine" id="cb19-16" title="16"></a>
<a class="sourceLine" id="cb19-17" title="17"><span class="ot">pruneCellsByExclusives ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">CellIxs</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb19-18" title="18">pruneCellsByExclusives grid cellIxs <span class="fu">=</span> <span class="kw">case</span> exclusives <span class="kw">of</span></a>
<a class="sourceLine" id="cb19-19" title="19">  [] <span class="ot">-&gt;</span> <span class="dt">Just</span> grid</a>
<a class="sourceLine" id="cb19-20" title="20">  _  <span class="ot">-&gt;</span> Control.Monad.foldM pruneCell grid <span class="fu">.</span> <span class="fu">zip</span> cellIxs <span class="fu">$</span> cells</a>
<a class="sourceLine" id="cb19-21" title="21">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb19-22" title="22">    cells         <span class="fu">=</span> <span class="fu">map</span> (grid <span class="fu">!</span>) cellIxs</a>
<a class="sourceLine" id="cb19-23" title="23">    exclusives    <span class="fu">=</span> exclusivePossibilities cells</a>
<a class="sourceLine" id="cb19-24" title="24">    allExclusives <span class="fu">=</span> setBits Data.Bits.zeroBits exclusives</a>
<a class="sourceLine" id="cb19-25" title="25"></a>
<a class="sourceLine" id="cb19-26" title="26">    pruneCell g (_, <span class="dt">Fixed</span> _) <span class="fu">=</span> <span class="dt">Just</span> g</a>
<a class="sourceLine" id="cb19-27" title="27">    pruneCell g (i, <span class="dt">Possible</span> xs)</a>
<a class="sourceLine" id="cb19-28" title="28">      <span class="fu">|</span> intersection <span class="fu">==</span> xs             <span class="fu">=</span> <span class="dt">Just</span> g</a>
<a class="sourceLine" id="cb19-29" title="29">      <span class="fu">|</span> intersection <span class="ot">`elem`</span> exclusives <span class="fu">=</span></a>
<a class="sourceLine" id="cb19-30" title="30">          <span class="fu">flip</span> (replaceCell i) g <span class="fu">&lt;$&gt;</span> makeCell intersection</a>
<a class="sourceLine" id="cb19-31" title="31">      <span class="fu">|</span> <span class="fu">otherwise</span>                      <span class="fu">=</span> <span class="dt">Just</span> g</a>
<a class="sourceLine" id="cb19-32" title="32">      <span class="kw">where</span></a>
<a class="sourceLine" id="cb19-33" title="33">        intersection <span class="fu">=</span> xs <span class="fu">Data.Bits..&amp;.</span> allExclusives</a>
<a class="sourceLine" id="cb19-34" title="34"></a>
<a class="sourceLine" id="cb19-35" title="35"><span class="ot">pruneCells ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">CellIxs</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb19-36" title="36">pruneCells grid cellIxs <span class="fu">=</span></a>
<a class="sourceLine" id="cb19-37" title="37">  fixM (<span class="fu">flip</span> pruneCellsByFixed cellIxs) grid</a>
<a class="sourceLine" id="cb19-38" title="38">  <span class="fu">&gt;&gt;=</span> fixM (<span class="fu">flip</span> pruneCellsByExclusives cellIxs)</a></code></pre></div>
<p>All the three functions now take the grid and the cell indices instead of a list of cells, and use the cell indices to lookup the cells from the grid. Also, instead of using the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Traversable.html#v:traverse" target="_blank" rel="noopener"><code>traverse</code></a> function as earlier, now we use the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Control-Monad.html#v:foldM" target="_blank" rel="noopener"><code>Control.Monad.foldM</code></a> function to fold over the cell-index-and-cell tuples in the context of the <code>Maybe</code> monad, making changes to the grid directly.</p>
<p>We use the <code>replaceCell</code> function to replace cells at an index in the grid. It is a simple wrapper over the vector update function <code>Data.Vector.//</code>. Rest of the code is same in essence, except a few changes to accommodate the changed function parameters.</p>
<p><code>pruneGrid'</code> function does not need to do transpositions and back-transpositions anymore as now we use the cell indices to go over the right parts of the grid vector directly:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" title="1"><span class="ot">pruneGrid' ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb20-2" title="2">pruneGrid' grid <span class="fu">=</span></a>
<a class="sourceLine" id="cb20-3" title="3">  Control.Monad.foldM pruneCells grid allRowIxs</a>
<a class="sourceLine" id="cb20-4" title="4">  <span class="fu">&gt;&gt;=</span> <span class="fu">flip</span> (Control.Monad.foldM pruneCells) allColIxs</a>
<a class="sourceLine" id="cb20-5" title="5">  <span class="fu">&gt;&gt;=</span> <span class="fu">flip</span> (Control.Monad.foldM pruneCells) allSubGridIxs</a></code></pre></div>
<p>Notice that the <code>traverse</code> function here is also replaced by the <code>Control.Monad.foldM</code> function.</p>
<p>Similarly, the grid predicate functions change a little to go over a vector instead of a list of lists:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode diff"><code class="sourceCode diff"><a class="sourceLine" id="cb21-1" title="1"> isGridFilled :: Grid -&gt; Bool</a>
<a class="sourceLine" id="cb21-2" title="2"><span class="st">-isGridFilled grid = null [ () | Possible _ &lt;- concat grid ]</span></a>
<a class="sourceLine" id="cb21-3" title="3"><span class="va">+isGridFilled = not . Data.Vector.any isPossible</span></a>
<a class="sourceLine" id="cb21-4" title="4"></a>
<a class="sourceLine" id="cb21-5" title="5"> isGridInvalid :: Grid -&gt; Bool</a>
<a class="sourceLine" id="cb21-6" title="6"> isGridInvalid grid =</a>
<a class="sourceLine" id="cb21-7" title="7"><span class="st">-  any isInvalidRow grid</span></a>
<a class="sourceLine" id="cb21-8" title="8"><span class="st">-  || any isInvalidRow (Data.List.transpose grid)</span></a>
<a class="sourceLine" id="cb21-9" title="9"><span class="st">-  || any isInvalidRow (subGridsToRows grid)</span></a>
<a class="sourceLine" id="cb21-10" title="10"><span class="va">+  any isInvalidRow (map (map (grid !)) allRowIxs)</span></a>
<a class="sourceLine" id="cb21-11" title="11"><span class="va">+  || any isInvalidRow (map (map (grid !)) allColIxs)</span></a>
<a class="sourceLine" id="cb21-12" title="12"><span class="va">+  || any isInvalidRow (map (map (grid !)) allSubGridIxs)</span></a></code></pre></div>
<p>And finally, we change the <code>nextGrids</code> function to replace the list related operations with the vector related ones:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode diff"><code class="sourceCode diff"><a class="sourceLine" id="cb22-1" title="1"> nextGrids :: Grid -&gt; (Grid, Grid)</a>
<a class="sourceLine" id="cb22-2" title="2"> nextGrids grid =</a>
<a class="sourceLine" id="cb22-3" title="3">   let (i, first@(Fixed _), rest) =</a>
<a class="sourceLine" id="cb22-4" title="4">         fixCell</a>
<a class="sourceLine" id="cb22-5" title="5"><span class="st">-        . Data.List.minimumBy</span></a>
<a class="sourceLine" id="cb22-6" title="6"><span class="va">+        . Data.Vector.minimumBy</span></a>
<a class="sourceLine" id="cb22-7" title="7">             (compare `Data.Function.on` (possibilityCount . snd))</a>
<a class="sourceLine" id="cb22-8" title="8"><span class="st">-        . filter (isPossible . snd)</span></a>
<a class="sourceLine" id="cb22-9" title="9"><span class="st">-        . zip [0..]</span></a>
<a class="sourceLine" id="cb22-10" title="10"><span class="st">-        . concat</span></a>
<a class="sourceLine" id="cb22-11" title="11"><span class="va">+        . Data.Vector.imapMaybe</span></a>
<a class="sourceLine" id="cb22-12" title="12"><span class="va">+            (\j cell -&gt; if isPossible cell then Just (j, cell) else Nothing)</span></a>
<a class="sourceLine" id="cb22-13" title="13">         $ grid</a>
<a class="sourceLine" id="cb22-14" title="14"><span class="st">-  in (replace2D i first grid, replace2D i rest grid)</span></a>
<a class="sourceLine" id="cb22-15" title="15"><span class="va">+  in (replaceCell i first grid, replaceCell i rest grid)</span></a></code></pre></div>
<p>We also switch the <code>replace2D</code> function which went over the entire list of lists of cells to replace a cell, with the vector-based <code>replaceCell</code> function.</p>
<p>All the required changes are done. Let’s do a run:</p>
<pre class="plain"><code>$ stack build
$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
       88.53 real        88.16 user         0.41 sys</code></pre>
<p>Oops! Instead of getting a speedup, our vector-based code is actually 1.3x slower than the list-based code. How did this happen? Time to bust out the profiler again!</p>
<h2 id="revenge-of-the" data-track-content data-content-name="revenge-of-the" data-content-piece="fast-sudoku-solver-in-haskell-3">Revenge of the <code>(==)</code><a href="#revenge-of-the" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Profiling the current code gives us the following hotspots:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Centre</th>
<th style="text-align: left;">Src</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>&gt;&gt;=</code></td>
<td style="text-align: left;">Data/Vector/Fusion/Util.hs:36:3-18</td>
<td style="text-align: right;">52.2</td>
<td style="text-align: right;">51.0</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>basicUnsafeIndexM</code></td>
<td style="text-align: left;">Data/Vector.hs:278:3-62</td>
<td style="text-align: right;">22.2</td>
<td style="text-align: right;">20.4</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities</code></td>
<td style="text-align: left;">Sudoku.hs:(75,1)-(93,26)</td>
<td style="text-align: right;">6.8</td>
<td style="text-align: right;">8.3</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>exclusivePossibilities.\.\</code></td>
<td style="text-align: left;">Sudoku.hs:83:23-96</td>
<td style="text-align: right;">3.8</td>
<td style="text-align: right;">8.8</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pruneCellsByFixed.fixeds</code></td>
<td style="text-align: left;">Sudoku.hs:105:5-77</td>
<td style="text-align: right;">2.0</td>
<td style="text-align: right;">1.7</td>
</tr>
</tbody>
</table>
</div>
<p>We see a sudden appearance of <code>(&gt;&gt;=)</code> from the <code>Data.Vector.Fusion.Util</code> module at the top of the list, taking more than half of the run time. For more clues, we dive into the detailed profiler report and find this bit:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Centre</th>
<th style="text-align: left;">Src</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>pruneGrid</code></td>
<td style="text-align: left;">Sudoku.hs:143:1-27</td>
<td style="text-align: right;">0.0</td>
<td style="text-align: right;">0.0</td>
</tr>
<tr class="even">
<td style="text-align: left;">  <code>fixM</code></td>
<td style="text-align: left;">Sudoku.hs:16:1-65</td>
<td style="text-align: right;">0.1</td>
<td style="text-align: right;">0.0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">    <code>fixM.\</code></td>
<td style="text-align: left;">Sudoku.hs:16:27-65</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: right;">0.1</td>
</tr>
<tr class="even">
<td style="text-align: left;">      <code>==</code></td>
<td style="text-align: left;">Data/Vector.hs:287:3-50</td>
<td style="text-align: right;">1.0</td>
<td style="text-align: right;">1.4</td>
</tr>
<tr class="odd">
<td style="text-align: left;">        <code>&gt;&gt;=</code></td>
<td style="text-align: left;">Data/Vector/Fusion/Util.hs:36:3-18</td>
<td style="text-align: right;">51.9</td>
<td style="text-align: right;">50.7</td>
</tr>
<tr class="even">
<td style="text-align: left;">          <code>basicUnsafeIndexM</code></td>
<td style="text-align: left;">Data/Vector.hs:278:3-62</td>
<td style="text-align: right;">19.3</td>
<td style="text-align: right;">20.3</td>
</tr>
</tbody>
</table>
</div>
<p>Here, the indentation indicated nesting of operations. We see that both the <code>(&gt;&gt;=)</code> and <code>basicUnsafeIndexM</code> functions — which together take around three-quarter of the run time — are being called from the <code>(==)</code> function in the <code>fixM</code> function<a href="#fn6" class="footnote-ref" id="fnref6"><sup>6</sup></a>. It seems like we are checking for equality too many times. Here’s the usage of the <code>fixM</code> for reference:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb24-1" title="1"><span class="ot">pruneCells ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">CellIxs</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb24-2" title="2">pruneCells grid cellIxs <span class="fu">=</span></a>
<a class="sourceLine" id="cb24-3" title="3">  fixM (<span class="fu">flip</span> pruneCellsByFixed cellIxs) grid</a>
<a class="sourceLine" id="cb24-4" title="4">  <span class="fu">&gt;&gt;=</span> fixM (<span class="fu">flip</span> pruneCellsByExclusives cellIxs)</a>
<a class="sourceLine" id="cb24-5" title="5"></a>
<a class="sourceLine" id="cb24-6" title="6"><span class="ot">pruneGrid ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb24-7" title="7">pruneGrid <span class="fu">=</span> fixM pruneGrid'</a></code></pre></div>
<p>In <code>pruneGrid</code>, we run <code>pruneGrid'</code> till the resultant grid settles, that is, the grid computed in a particular iteration is <strong>equal to</strong> the grid in the previous iteration. Interestingly, we do the same thing in <code>pruneCells</code> too. We equate <strong>the whole grid</strong> to check for settling of each block of cells. This is the reason of the slowdown.</p>
<h2 id="one-function-to-prune-them-all" data-track-content data-content-name="one-function-to-prune-them-all" data-content-piece="fast-sudoku-solver-in-haskell-3">One Function to Prune Them All<a href="#one-function-to-prune-them-all" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Why did we add <code>fixM</code> in the <code>pruneCells</code> function at all? Quoting from the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/#fn6">previous post</a>,</p>
<blockquote>
<p>We need to run <code>pruneCellsByFixed</code> and <code>pruneCellsByExclusives</code> repeatedly using <code>fixM</code> because an unsettled row can lead to wrong solutions.</p>
<p>Imagine a row which just got a <code>9</code> fixed because of <code>pruneCellsByFixed</code>. If we don’t run the function again, the row may be left with one non-fixed cell with a <code>9</code>. When we run this row through <code>pruneCellsByExclusives</code>, it’ll consider the <code>9</code> in the non-fixed cell as a <em>Single</em> and fix it. This will lead to two <code>9</code>s in the same row, causing the solution to fail.</p>
</blockquote>
<p>So the reason we added <code>fixM</code> is that, we run the two pruning strategies one-after-another. That way, they see the cells in the same block in different states. If we were to merge the two pruning functions into a single one such that they work in lockstep, we would not need to run <code>fixM</code> at all!</p>
<p>With this idea, we rewrite <code>pruneCells</code> as a single function:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb25-1" title="1"><span class="ot">pruneCells ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">CellIxs</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb25-2" title="2">pruneCells grid cellIxs <span class="fu">=</span> Control.Monad.foldM pruneCell grid cellIxs</a>
<a class="sourceLine" id="cb25-3" title="3">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb25-4" title="4">    cells         <span class="fu">=</span> <span class="fu">map</span> (grid <span class="fu">!</span>) cellIxs</a>
<a class="sourceLine" id="cb25-5" title="5">    exclusives    <span class="fu">=</span> exclusivePossibilities cells</a>
<a class="sourceLine" id="cb25-6" title="6">    allExclusives <span class="fu">=</span> setBits Data.Bits.zeroBits exclusives</a>
<a class="sourceLine" id="cb25-7" title="7">    fixeds        <span class="fu">=</span> setBits Data.Bits.zeroBits [x <span class="fu">|</span> <span class="dt">Fixed</span> x <span class="ot">&lt;-</span> cells]</a>
<a class="sourceLine" id="cb25-8" title="8"></a>
<a class="sourceLine" id="cb25-9" title="9">    pruneCell g i <span class="fu">=</span></a>
<a class="sourceLine" id="cb25-10" title="10">      pruneCellByFixed g (i, g <span class="fu">!</span> i) <span class="fu">&gt;&gt;=</span> \g' <span class="ot">-&gt;</span> pruneCellByExclusives g' (i, g' <span class="fu">!</span> i)</a>
<a class="sourceLine" id="cb25-11" title="11"></a>
<a class="sourceLine" id="cb25-12" title="12">    pruneCellByFixed g (_, <span class="dt">Fixed</span> _) <span class="fu">=</span> <span class="dt">Just</span> g</a>
<a class="sourceLine" id="cb25-13" title="13">    pruneCellByFixed g (i, <span class="dt">Possible</span> xs)</a>
<a class="sourceLine" id="cb25-14" title="14">      <span class="fu">|</span> xs' <span class="fu">==</span> xs <span class="fu">=</span> <span class="dt">Just</span> g</a>
<a class="sourceLine" id="cb25-15" title="15">      <span class="fu">|</span> <span class="fu">otherwise</span> <span class="fu">=</span> <span class="fu">flip</span> (replaceCell i) g <span class="fu">&lt;$&gt;</span> makeCell xs'</a>
<a class="sourceLine" id="cb25-16" title="16">      <span class="kw">where</span></a>
<a class="sourceLine" id="cb25-17" title="17">        xs' <span class="fu">=</span> xs <span class="fu">Data.Bits..&amp;.</span> Data.Bits.complement fixeds</a>
<a class="sourceLine" id="cb25-18" title="18"></a>
<a class="sourceLine" id="cb25-19" title="19">    pruneCellByExclusives g (_, <span class="dt">Fixed</span> _) <span class="fu">=</span> <span class="dt">Just</span> g</a>
<a class="sourceLine" id="cb25-20" title="20">    pruneCellByExclusives g (i, <span class="dt">Possible</span> xs)</a>
<a class="sourceLine" id="cb25-21" title="21">      <span class="fu">|</span> <span class="fu">null</span> exclusives                <span class="fu">=</span> <span class="dt">Just</span> g</a>
<a class="sourceLine" id="cb25-22" title="22">      <span class="fu">|</span> intersection <span class="fu">==</span> xs             <span class="fu">=</span> <span class="dt">Just</span> g</a>
<a class="sourceLine" id="cb25-23" title="23">      <span class="fu">|</span> intersection <span class="ot">`elem`</span> exclusives <span class="fu">=</span></a>
<a class="sourceLine" id="cb25-24" title="24">          <span class="fu">flip</span> (replaceCell i) g <span class="fu">&lt;$&gt;</span> makeCell intersection</a>
<a class="sourceLine" id="cb25-25" title="25">      <span class="fu">|</span> <span class="fu">otherwise</span>                      <span class="fu">=</span> <span class="dt">Just</span> g</a>
<a class="sourceLine" id="cb25-26" title="26">      <span class="kw">where</span></a>
<a class="sourceLine" id="cb25-27" title="27">        intersection <span class="fu">=</span> xs <span class="fu">Data.Bits..&amp;.</span> allExclusives</a></code></pre></div>
<p>We have merged the two pruning functions almost blindly. The important part here is the nested <code>pruneCell</code> function which uses monadic bind <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Control-Monad.html#v:-62--62--61-" target="_blank" rel="noopener"><code>(&gt;&gt;=)</code></a> to ensure that cells fixed in the first step are seen by the next step. Merging the two functions ensures that both strategies will see same <em>Exclusives</em> and <em>Fixeds</em>, thereby running in lockstep.</p>
<p>Let’s try it out:</p>
<pre class="plain"><code>$ stack build
$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
      57.67 real        57.12 user         0.46 sys</code></pre>
<p>Ah, now it’s faster than the list-based implementation by 1.2x<a href="#fn7" class="footnote-ref" id="fnref7"><sup>7</sup></a>. Let’s see what the profiler says:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Centre</th>
<th style="text-align: left;">Src</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities.\.\</code></td>
<td style="text-align: left;">Sudoku.hs:82:23-96</td>
<td style="text-align: right;">15.7</td>
<td style="text-align: right;">33.3</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCells</code></td>
<td style="text-align: left;">Sudoku.hs:(101,1)-(126,53)</td>
<td style="text-align: right;">9.6</td>
<td style="text-align: right;">6.8</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pruneCells.pruneCell</code></td>
<td style="text-align: left;">Sudoku.hs:(108,5)-(109,83)</td>
<td style="text-align: right;">9.5</td>
<td style="text-align: right;">2.1</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>basicUnsafeIndexM</code></td>
<td style="text-align: left;">Data/Vector.hs:278:3-62</td>
<td style="text-align: right;">9.4</td>
<td style="text-align: right;">0.5</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pruneCells.pruneCell.\</code></td>
<td style="text-align: left;">Sudoku.hs:109:48-83</td>
<td style="text-align: right;">7.6</td>
<td style="text-align: right;">2.1</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCells.cells</code></td>
<td style="text-align: left;">Sudoku.hs:103:5-40</td>
<td style="text-align: right;">7.1</td>
<td style="text-align: right;">10.9</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities.\</code></td>
<td style="text-align: left;">Sudoku.hs:87:64-96</td>
<td style="text-align: right;">3.5</td>
<td style="text-align: right;">3.8</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>EP.Map.filter1</code></td>
<td style="text-align: left;">Sudoku.hs:86:35-61</td>
<td style="text-align: right;">3.0</td>
<td style="text-align: right;">0.6</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>&gt;&gt;=</code></td>
<td style="text-align: left;">Data/Vector/Fusion/Util.hs:36:3-18</td>
<td style="text-align: right;">2.8</td>
<td style="text-align: right;">2.0</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>replaceCell</code></td>
<td style="text-align: left;">Sudoku.hs:59:1-45</td>
<td style="text-align: right;">2.5</td>
<td style="text-align: right;">1.1</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>EP.filter</code></td>
<td style="text-align: left;">Sudoku.hs:78:30-54</td>
<td style="text-align: right;">2.4</td>
<td style="text-align: right;">3.3</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>primitive</code></td>
<td style="text-align: left;">Control/Monad/Primitive.hs:195:3-16</td>
<td style="text-align: right;">2.3</td>
<td style="text-align: right;">6.5</td>
</tr>
</tbody>
</table>
</div>
<p>The double nested anonymous function mentioned before is still the biggest culprit but <code>fixM</code> has disappeared from the list. Let’s tackle <code>exclusivePossibilities</code> now.</p>
<div class="page-break">

</div>
<h2 id="rise-of-the-mutables" data-track-content data-content-name="rise-of-the-mutables" data-content-piece="fast-sudoku-solver-in-haskell-3">Rise of the Mutables<a href="#rise-of-the-mutables" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Here’s <code>exclusivePossibilities</code> again for reference:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb27-1" title="1"><span class="ot">exclusivePossibilities ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> [<span class="dt">Data.Word.Word16</span>]</a>
<a class="sourceLine" id="cb27-2" title="2">exclusivePossibilities row <span class="fu">=</span></a>
<a class="sourceLine" id="cb27-3" title="3">  row</a>
<a class="sourceLine" id="cb27-4" title="4">  <span class="fu">&amp;</span> <span class="fu">zip</span> [<span class="dv">1</span><span class="fu">..</span><span class="dv">9</span>]</a>
<a class="sourceLine" id="cb27-5" title="5">  <span class="fu">&amp;</span> <span class="fu">filter</span> (isPossible <span class="fu">.</span> <span class="fu">snd</span>)</a>
<a class="sourceLine" id="cb27-6" title="6">  <span class="fu">&amp;</span> Data.List.foldl'</a>
<a class="sourceLine" id="cb27-7" title="7">      (\acc <span class="fu">~</span>(i, <span class="dt">Possible</span> xs) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb27-8" title="8">        Data.List.foldl'</a>
<a class="sourceLine" id="cb27-9" title="9">          (\acc' n <span class="ot">-&gt;</span> <span class="kw">if</span> Data.Bits.testBit xs n </a>
<a class="sourceLine" id="cb27-10" title="10">                      <span class="kw">then</span> Map.insertWith prepend n [i] acc' </a>
<a class="sourceLine" id="cb27-11" title="11">                      <span class="kw">else</span> acc')</a>
<a class="sourceLine" id="cb27-12" title="12">          acc</a>
<a class="sourceLine" id="cb27-13" title="13">          [<span class="dv">1</span><span class="fu">..</span><span class="dv">9</span>])</a>
<a class="sourceLine" id="cb27-14" title="14">      Map.empty</a>
<a class="sourceLine" id="cb27-15" title="15">  <span class="fu">&amp;</span> Map.filter ((<span class="fu">&lt;</span> <span class="dv">4</span>) <span class="fu">.</span> <span class="fu">length</span>)</a>
<a class="sourceLine" id="cb27-16" title="16">  <span class="fu">&amp;</span> Map.foldlWithKey'(\acc x is <span class="ot">-&gt;</span> Map.insertWith prepend is [x] acc) Map.empty</a>
<a class="sourceLine" id="cb27-17" title="17">  <span class="fu">&amp;</span> Map.filterWithKey (\is xs <span class="ot">-&gt;</span> <span class="fu">length</span> is <span class="fu">==</span> <span class="fu">length</span> xs)</a>
<a class="sourceLine" id="cb27-18" title="18">  <span class="fu">&amp;</span> Map.elems</a>
<a class="sourceLine" id="cb27-19" title="19">  <span class="fu">&amp;</span> <span class="fu">map</span> (Data.List.foldl' Data.Bits.setBit Data.Bits.zeroBits)</a>
<a class="sourceLine" id="cb27-20" title="20">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb27-21" title="21">    prepend <span class="fu">~</span>[y] ys <span class="fu">=</span> y<span class="fu">:</span>ys</a></code></pre></div>
<p>Let’s zoom into lines 6–14. Here, we do a fold with a nested fold over the non-fixed cells of the given block to accumulate the mapping from the digits to the indices of the cells they occur in. We use a <a href="https://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-Map-Strict.html" target="_blank" rel="noopener"><code>Data.Map.Strict</code></a> map as the accumulator. If a digit is not present in the map as a key then we add a singleton list containing the corresponding cell index as the value. If the digit is already present in the map then we prepend the cell index to the list of indices for the digit. So we end up “mutating” the map repeatedly.</p>
<p>Of course, it’s not actual mutation because the map data structure we are using is immutable. Each change to the map instance creates a new copy with the addition, which we thread through the fold operation, and we get the final copy at the end. This may be the reason of the slowness in this section of the code.</p>
<p>What if, instead of using an immutable data structure for this, we used a mutable one? But how can we do that when we know that Haskell is a pure language? Purity means that all code must be <a href="https://en.wikipedia.org/wiki/Referential_transparency" target="_blank" rel="noopener">referentially transparent</a>, and mutability certainly isn’t. It turns out, there is an escape hatch to mutability in Haskell. Quoting the relevant section from the book <a href="http://book.realworldhaskell.org/read/advanced-library-design-building-a-bloom-filter.html#id680273" target="_blank" rel="noopener">Real World Haskell</a>:</p>
<blockquote>
<p>Haskell provides a special monad, named <code>ST</code>, which lets us work safely with mutable state. Compared to the <code>State</code> monad, it has some powerful added capabilities.</p>
<ul>
<li>We can <em>thaw</em> an immutable array to give a mutable array; modify the mutable array in place; and freeze a new immutable array when we are done.</li>
<li>We have the ability to use <em>mutable references</em>. This lets us implement data structures that we can modify after construction, as in an imperative language. This ability is vital for some imperative data structures and algorithms, for which similarly efficient purely functional alternatives have not yet been discovered.</li>
</ul>
</blockquote>
<p>So if we use a mutable map in the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Control-Monad-ST.html" target="_blank" rel="noopener"><code>ST</code> monad</a>, we may be able to get rid of this bottleneck. But, we can actually do better! Since the keys of our map are digits <code>1</code>–<code>9</code>, we can use a <a href="https://hackage.haskell.org/package/vector-0.12.0.1/docs/Data-Vector-Mutable.html" target="_blank" rel="noopener">mutable vector</a> to store the indices. In fact, we can go one step even further and store the indices as a BitSet as <code>Word16</code> because they also range from 1 to 9, and are unique for a block. This lets us use an <a href="https://hackage.haskell.org/package/vector-0.12.0.1/docs/Data-Vector-Unboxed-Mutable.html" target="_blank" rel="noopener">unboxed mutable vector</a>. What is <em>unboxing</em> you ask? Quoting from the <a href="https://downloads.haskell.org/~ghc/8.4.3/docs/html/users_guide/glasgow_exts.html#unboxed-types" target="_blank" rel="noopener">GHC docs</a>:</p>
<blockquote>
<p>Most types in GHC are boxed, which means that values of that type are represented by a pointer to a heap object. The representation of a Haskell <code>Int</code>, for example, is a two-word heap object. An unboxed type, however, is represented by the value itself, no pointers or heap allocation are involved.</p>
</blockquote>
<p>When combined with vector, unboxing of values means the whole vector is stored as single byte array, avoiding pointer redirections completely. This is more memory efficient and allows better usage of caches<a href="#fn8" class="footnote-ref" id="fnref8"><sup>8</sup></a>. Let’s rewrite <code>exclusivePossibilities</code> using <code>ST</code> and unboxed mutable vectors.</p>
<p>First we write the core of this operation, the function <code>cellIndicesList</code> which take a list of cells and returns the digit to cell indices mapping. The mapping is returned as a list. The zeroth value in this list is the indices of the cells which have <code>1</code> as a possible digit, and so on. The indices themselves are packed as BitSets. If the bit 1 is set then the first cell has a particular digit. Let’s say it returns <code>[0,688,54,134,0,654,652,526,670]</code>. In 10-bit binary it is:</p>
<pre class="plain"><code>[0000000000, 1010110000, 0000110110, 0010000110, 0000000000, 1010001110, 1010001100, 1000001110, 1010011110]</code></pre>
<p>We can arrange it in a table for further clarity:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: right;">Digits</th>
<th style="text-align: right;">Cell 9</th>
<th style="text-align: right;">Cell 8</th>
<th style="text-align: right;">Cell 7</th>
<th style="text-align: right;">Cell 6</th>
<th style="text-align: right;">Cell 5</th>
<th style="text-align: right;">Cell 4</th>
<th style="text-align: right;">Cell 3</th>
<th style="text-align: right;">Cell 2</th>
<th style="text-align: right;">Cell 1</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: right;">6</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td style="text-align: right;">7</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: right;">8</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="odd">
<td style="text-align: right;">9</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
</tr>
</tbody>
</table>
</div>
<p>If the value of the intersection of a particular digit and a particular cell index in the table is set to 1, then the digit is a possibility in the cell, else it is not. Here’s the code:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb29-1" title="1"><span class="ot">cellIndicesList ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> [<span class="dt">Data.Word.Word16</span>]</a>
<a class="sourceLine" id="cb29-2" title="2">cellIndicesList cells <span class="fu">=</span></a>
<a class="sourceLine" id="cb29-3" title="3">  Data.Vector.Unboxed.toList <span class="fu">$</span> Control.Monad.ST.runST <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb29-4" title="4">    vec <span class="ot">&lt;-</span> Data.Vector.Unboxed.Mutable.replicate <span class="dv">9</span> Data.Bits.zeroBits</a>
<a class="sourceLine" id="cb29-5" title="5">    ref <span class="ot">&lt;-</span> Data.STRef.newSTRef (<span class="dv">1</span><span class="ot"> ::</span> <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb29-6" title="6">    Control.Monad.forM_ cells <span class="fu">$</span> \cell <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb29-7" title="7">      i <span class="ot">&lt;-</span> Data.STRef.readSTRef ref</a>
<a class="sourceLine" id="cb29-8" title="8">      <span class="kw">case</span> cell <span class="kw">of</span></a>
<a class="sourceLine" id="cb29-9" title="9">        <span class="dt">Fixed</span> _ <span class="ot">-&gt;</span> <span class="fu">return</span> ()</a>
<a class="sourceLine" id="cb29-10" title="10">        <span class="dt">Possible</span> xs <span class="ot">-&gt;</span> Control.Monad.forM_ [<span class="dv">0</span><span class="fu">..</span><span class="dv">8</span>] <span class="fu">$</span> \d <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb29-11" title="11">          Control.Monad.when (Data.Bits.testBit xs (d<span class="fu">+</span><span class="dv">1</span>)) <span class="fu">$</span></a>
<a class="sourceLine" id="cb29-12" title="12">            Data.Vector.Unboxed.Mutable.unsafeModify vec (<span class="ot">`Data.Bits.setBit`</span> i) d</a>
<a class="sourceLine" id="cb29-13" title="13">      Data.STRef.writeSTRef ref (i<span class="fu">+</span><span class="dv">1</span>)</a>
<a class="sourceLine" id="cb29-14" title="14">    Data.Vector.Unboxed.unsafeFreeze vec</a></code></pre></div>
<p>The whole mutable code runs inside the <code>runST</code> function. <code>runST</code> take an operation in <code>ST</code> monad and executes it, making sure that the mutable references created inside it cannot escape the scope of <code>runST</code>. This is done using a type-system trickery called <a href="https://web.archive.org/web/20180813050307/https://prime.haskell.org/wiki/Rank2Types" target="_blank" rel="noopener">Rank-2 types</a>.</p>
<p>Inside the <code>ST</code> operation, we start with creating a mutable vector of <code>Word16</code>s of size 9 with all its values initially set to zero. We also initialize a mutable reference to keep track of the cell index we are on. Then we run two nested for loops, going over each cell and each digit <code>1</code>–<code>9</code>, setting the right bit of the right index of the mutable vector. During this, we mutate the vector directly using the <code>Data.Vector.Unboxed.Mutable.unsafeModify</code> function. At the end of the <code>ST</code> operation, we freeze the mutable vector to return an immutable version of it. Outside <code>runST</code>, we convert the immutable vector to a list. Notice how this code is quite similar to how we’d write it in <a href="https://en.wikipedia.org/wiki/Imperative_programming" target="_blank" rel="noopener">imperative programming</a> languages like C or Java<a href="#fn9" class="footnote-ref" id="fnref9"><sup>9</sup></a>.</p>
<p>It is easy to use this function now to rewrite <code>exclusivePossibilities</code>:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode diff"><code class="sourceCode diff"><a class="sourceLine" id="cb30-1" title="1"> exclusivePossibilities :: [Cell] -&gt; [Data.Word.Word16]</a>
<a class="sourceLine" id="cb30-2" title="2"> exclusivePossibilities row =</a>
<a class="sourceLine" id="cb30-3" title="3">   row</a>
<a class="sourceLine" id="cb30-4" title="4"><span class="st">-  &amp; zip [1..9]</span></a>
<a class="sourceLine" id="cb30-5" title="5"><span class="st">-  &amp; filter (isPossible . snd)</span></a>
<a class="sourceLine" id="cb30-6" title="6"><span class="st">-  &amp; Data.List.foldl'</span></a>
<a class="sourceLine" id="cb30-7" title="7"><span class="st">-      (\acc ~(i, Possible xs) -&gt;</span></a>
<a class="sourceLine" id="cb30-8" title="8"><span class="st">-        Data.List.foldl'</span></a>
<a class="sourceLine" id="cb30-9" title="9"><span class="st">-          (\acc' n -&gt; if Data.Bits.testBit xs n </span></a>
<a class="sourceLine" id="cb30-10" title="10"><span class="st">-                      then Map.insertWith prepend n [i] acc' </span></a>
<a class="sourceLine" id="cb30-11" title="11"><span class="st">-                      else acc')</span></a>
<a class="sourceLine" id="cb30-12" title="12"><span class="st">-          acc</span></a>
<a class="sourceLine" id="cb30-13" title="13"><span class="st">-          [1..9])</span></a>
<a class="sourceLine" id="cb30-14" title="14"><span class="st">-      Map.empty</span></a>
<a class="sourceLine" id="cb30-15" title="15"><span class="va">+  &amp; cellIndicesList</span></a>
<a class="sourceLine" id="cb30-16" title="16"><span class="va">+  &amp; zip [1..9]</span></a>
<a class="sourceLine" id="cb30-17" title="17"><span class="st">-  &amp; Map.filter ((&lt; 4) . length)</span></a>
<a class="sourceLine" id="cb30-18" title="18"><span class="st">-  &amp; Map.foldlWithKey' (\acc x is -&gt; Map.insertWith prepend is [x] acc) Map.empty</span></a>
<a class="sourceLine" id="cb30-19" title="19"><span class="st">-  &amp; Map.filterWithKey (\is xs -&gt; length is == length xs)</span></a>
<a class="sourceLine" id="cb30-20" title="20"><span class="va">+  &amp; filter (\(_, is) -&gt; let p = Data.Bits.popCount is in p &gt; 0 &amp;&amp; p &lt; 4)</span></a>
<a class="sourceLine" id="cb30-21" title="21"><span class="va">+  &amp; Data.List.foldl' (\acc (x, is) -&gt; Map.insertWith prepend is [x] acc) Map.empty</span></a>
<a class="sourceLine" id="cb30-22" title="22"><span class="va">+  &amp; Map.filterWithKey (\is xs -&gt; Data.Bits.popCount is == length xs)</span></a>
<a class="sourceLine" id="cb30-23" title="23">   &amp; Map.elems</a>
<a class="sourceLine" id="cb30-24" title="24">   &amp; map (Data.List.foldl' Data.Bits.setBit Data.Bits.zeroBits)</a>
<a class="sourceLine" id="cb30-25" title="25">   where</a>
<a class="sourceLine" id="cb30-26" title="26">     prepend ~[y] ys = y:ys</a></code></pre></div>
<p>We replace the nested two-fold operation with <code>cellIndicesList</code>. Then we replace some map related function with the corresponding list ones because <code>cellIndicesList</code> returns a list. We also replace the <code>length</code> function call on cell indices with <code>Data.Bits.popCount</code> function call as the indices are represented as <code>Word16</code> now.</p>
<p>That is it. Let’s build and run it now:</p>
<pre class="plain"><code>$ stack build
$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
      35.04 real        34.84 user         0.24 sys</code></pre>
<p>That’s a 1.6x speedup over the map-and-fold based version. Let’s check what the profiler has to say:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Centre</th>
<th style="text-align: left;">Src</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>cellIndicesList.\.\</code></td>
<td style="text-align: left;">Sudoku.hs:(88,11)-(89,81)</td>
<td style="text-align: right;">10.7</td>
<td style="text-align: right;">6.0</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>primitive</code></td>
<td style="text-align: left;">Control/Monad/Primitive.hs:195:3-16</td>
<td style="text-align: right;">7.9</td>
<td style="text-align: right;">6.9</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>pruneCells</code></td>
<td style="text-align: left;">Sudoku.hs:(113,1)-(138,53)</td>
<td style="text-align: right;">7.5</td>
<td style="text-align: right;">6.4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>cellIndicesList</code></td>
<td style="text-align: left;">Sudoku.hs:(79,1)-(91,40)</td>
<td style="text-align: right;">7.4</td>
<td style="text-align: right;">10.1</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>basicUnsafeIndexM</code></td>
<td style="text-align: left;">Data/Vector.hs:278:3-62</td>
<td style="text-align: right;">7.3</td>
<td style="text-align: right;">0.5</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCells.pruneCell</code></td>
<td style="text-align: left;">Sudoku.hs:(120,5)-(121,83)</td>
<td style="text-align: right;">6.8</td>
<td style="text-align: right;">2.0</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities</code></td>
<td style="text-align: left;">Sudoku.hs:(94,1)-(104,26)</td>
<td style="text-align: right;">6.5</td>
<td style="text-align: right;">9.7</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCells.pruneCell.\</code></td>
<td style="text-align: left;">Sudoku.hs:121:48-83</td>
<td style="text-align: right;">6.1</td>
<td style="text-align: right;">2.0</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>cellIndicesList.\</code></td>
<td style="text-align: left;">Sudoku.hs:(83,42)-(90,37)</td>
<td style="text-align: right;">5.5</td>
<td style="text-align: right;">3.5</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCells.cells</code></td>
<td style="text-align: left;">Sudoku.hs:115:5-40</td>
<td style="text-align: right;">5.0</td>
<td style="text-align: right;">10.4</td>
</tr>
</tbody>
</table>
</div>
<p>The run time is spread quite evenly over all the functions now and there are no hotspots anymore. We stop optimizating at this point<a href="#fn10" class="footnote-ref" id="fnref10"><sup>10</sup></a>. Let’s see how far we have come up.</p>
<h2 id="comparison-of-implementations" data-track-content data-content-name="comparison-of-implementations" data-content-piece="fast-sudoku-solver-in-haskell-3">Comparison of Implementations<a href="#comparison-of-implementations" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Below is a table showing the speedups we got with each new implementation:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Implementation</th>
<th style="text-align: right;">Run Time (s)</th>
<th style="text-align: right;">Incremental Speedup</th>
<th style="text-align: right;">Cumulative Speedup</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Simple</td>
<td style="text-align: right;">47450</td>
<td style="text-align: right;">1x</td>
<td style="text-align: right;">1x</td>
</tr>
<tr class="even">
<td style="text-align: left;">Exclusive Pruning</td>
<td style="text-align: right;">258.97</td>
<td style="text-align: right;">183.23x</td>
<td style="text-align: right;">183x</td>
</tr>
<tr class="odd">
<td style="text-align: left;">BitSet</td>
<td style="text-align: right;">69.44</td>
<td style="text-align: right;">3.73x</td>
<td style="text-align: right;">683x</td>
</tr>
<tr class="even">
<td style="text-align: left;">Vector</td>
<td style="text-align: right;">57.67</td>
<td style="text-align: right;">1.20x</td>
<td style="text-align: right;">823x</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Mutable Vector</td>
<td style="text-align: right;">35.04</td>
<td style="text-align: right;">1.65x</td>
<td style="text-align: right;">1354x</td>
</tr>
</tbody>
</table>
</div>
<p>The first improvement over the simple solution got us the most major speedup of 183x. After that, we followed the profiler, fixing bottlenecks by using the right data structures. We got quite significant speedup over the naive list-based solution, leading to drop in the run time from 259 seconds to 35 seconds. In total, we have done more than a thousand times improvement in the run time since the first solution!</p>
<h2 id="conclusion" data-track-content data-content-name="conclusion" data-content-piece="fast-sudoku-solver-in-haskell-3">Conclusion<a href="#conclusion" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>In this post, we improved upon our list-based Sudoku solution from the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/">last time</a>. We profiled the code at each step, found the bottlenecks and fixed them by choosing the right data structure for the case. We ended up using BitSets and Vectors — both immutable and mutable varieties — for the different parts of the code. Finally, we sped up our program by 7.4 times. Can we go even faster? How about using all those other CPU cores which have been lying idle? Come back for the next post in this series where we’ll explore the parallel programming facilities in Haskell. The code till now is available <a href="https://code.abhinavsarkar.net/abhin4v/hasdoku/src/commit/4a9a1531d5780e7abc7d5ab2a26dccbf34382031" target="_blank" rel="noopener">here</a>. Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/96y0xa/fast_sudoku_solver_in_haskell_3_picking_the_right/" target="_blank" rel="noopener">r/haskell</a> or <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-3/#comment-container">leave a comment</a>.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>All the runs were done on my MacBook Pro from 2014 with 2.2 GHz Intel Core i7 CPU and 16 GB memory.<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>A lot of the code in this post references the code from the previous posts, including showing diffs. So, please read the previous posts if you have not already done so.<a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p>Notice the British English spelling of the word “Centre”. GHC was originally developed in <a href="https://en.wikipedia.org/wiki/University_of_Glasgow" target="_blank" rel="noopener">University of Glasgow</a> in Scotland.<a href="#fnref3" class="footnote-back">↩</a></p></li>
<li id="fn4"><p>The code for the BitSet based implementa­tion can be found <a href="https://code.abhinavsarkar.net/abhin4v/hasdoku/src/commit/5a3044e09cd86dd6154bc50760095c4b38c48c6a" target="_blank" rel="noopener">here</a>.<a href="#fnref4" class="footnote-back">↩</a></p></li>
<li id="fn5"><p><a href="https://web.archive.org/web/20171031080004/https://www.schoolofhaskell.com/user/commercial/content/vector" target="_blank" rel="noopener">This article</a> on School of Haskell goes into details about performance of vectors vs. lists. There are also <a href="https://web.archive.org/web/20180802043644/https://github.com/haskell-perf/sequences/blob/master/README.md" target="_blank" rel="noopener">these</a> benchmarks for sequence data structures in Haskell: lists, vectors, seqs, etc.<a href="#fnref5" class="footnote-back">↩</a></p></li>
<li id="fn6"><p>We see Haskell’s laziness at work here. In the code for the <code>fixM</code> function, the <code>(==)</code> function is nested inside the <code>(&gt;&gt;=)</code> function, but because of laziness, they are actually evaluated in the reverse order. The evaluation of parameters for the <code>(==)</code> function causes the <code>(&gt;&gt;=)</code> function to be evaluated.<a href="#fnref6" class="footnote-back">↩</a></p></li>
<li id="fn7"><p>The code for the vector based implementa­tion can be found <a href="https://code.abhinavsarkar.net/abhin4v/hasdoku/src/commit/a320a7874c6fa0c39665151cc8e073532cc750a1" target="_blank" rel="noopener">here</a>.<a href="#fnref7" class="footnote-back">↩</a></p></li>
<li id="fn8"><p>Unboxed vectors have some <a href="https://hackage.haskell.org/package/vector-0.12.0.1/docs/Data-Vector-Unboxed.html#t:Unbox" target="_blank" rel="noopener">restrictions</a> on the kind of values that can be put into them but <code>Word16</code> already follows those restrictions so we are good.<a href="#fnref8" class="footnote-back">↩</a></p></li>
<li id="fn9"><p>Haskell can be a pretty good imperative programming language using the <code>ST</code> monad. <a href="https://web.archive.org/web/20180628054717/https://vaibhavsagar.com/blog/2017/05/29/imperative-haskell/" target="_blank" rel="noopener">This article</a> shows how to implement some algorithms which require mutable data structures in Haskell.<a href="#fnref9" class="footnote-back">↩</a></p></li>
<li id="fn10"><p>The code for the mutable vector based implementation can be found <a href="https://code.abhinavsarkar.net/abhin4v/hasdoku/src/commit/4a9a1531d5780e7abc7d5ab2a26dccbf34382031" target="_blank" rel="noopener">here</a>.<a href="#fnref10" class="footnote-back">↩</a></p></li>
</ol>
</section><p>If you liked this post, please <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-3/#comment-container">leave a comment</a>.</p><img src="https://anna.abhinavsarkar.net/piwik.php?idsite=1&amp;rec=1" style="border:0; display: none;" />]]></summary>
</entry>
<entry>
    <title>Fast Sudoku Solver in Haskell #2: A 200x Faster Solution</title>
    <link rel="alternate" href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/" />
    <id>https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/</id>
    <published>2018-07-11T00:00:00Z</published>
    <updated>2018-07-11T00:00:00Z</updated>
    
    <author>
        <name>Abhinav Sarkar</name>
        <email>abhinav@abhinavsarkar.net</email>
        <uri>https://abhinavsarkar.net/about/</uri>
    </author>
    
    
    <category term="haskell" />
    
    <category term="sudoku" />
    
    <category term="programming" />
    
    <category term="puzzle" />
    
    <category term="nilenso" />
    
    <summary type="html"><![CDATA[<p>In the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/">first part</a> of this series of posts, we wrote a simple <a href="https://en.wikipedia.org/wiki/Sudoku" target="_blank" rel="noopener">Sudoku</a> solver in <a href="https://www.haskell.org/" target="_blank" rel="noopener">Haskell</a>. It used a <a href="https://en.wikipedia.org/wiki/Constraint_satisfaction_problem" target="_blank" rel="noopener">constraint satisfaction</a> algorithm with <a href="https://en.wikipedia.org/wiki/Depth-first_search" target="_blank" rel="noopener">backtracking</a>. The solution worked well but was very slow. In this post, we are going to improve it and make it <strong>fast</strong>.</p>
<!--more-->
<p>This is the second post in a series of posts:</p>
<ol type="1">
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/">Fast Sudoku Solver in Haskell #1: A Simple Solution</a></li>
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/">Fast Sudoku Solver in Haskell #2: A 200x Faster Solution</a></li>
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-3/">Fast Sudoku Solver in Haskell #3: Picking the Right Data Structures</a></li>
</ol>
<p>Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/8xyfad/fast_sudoku_solver_in_haskell_2_a_200x_faster/" target="_blank" rel="noopener">r/haskell</a>.</p>
<nav id="toc" class="right-toc"><h3>Contents</h3><ol><li><a href="#quick-recap">Quick Recap</a></li><li><a href="#constraints-and-corollaries">Constraints and Corollaries</a></li><li><a href="#singles-twins-and-triplets">Singles, Twins and Triplets</a></li><li><a href="#a-little-forward-a-little-backward">A Little Forward, a Little Backward</a></li><li><a href="#pruning-the-cells-exclusively">Pruning the Cells, Exclusively</a></li><li><a href="#faster-than-a-speeding-bullet">Faster than a Speeding Bullet!</a><ol><li><a href="#update">Update</a></li></ol></li><li><a href="#conclusion">Conclusion</a></li></ol></nav>
<h2 id="quick-recap" data-track-content data-content-name="quick-recap" data-content-piece="fast-sudoku-solver-in-haskell-2">Quick Recap<a href="#quick-recap" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p><a href="https://en.wikipedia.org/wiki/Sudoku" target="_blank" rel="noopener">Sudoku</a> is a number placement puzzle. It consists of a 9x9 grid which is to be filled with digits from 1 to 9 such that each row, each column and each of the nine 3x3 sub-grids contain all the digits. Some of the cells of the grid come pre-filled and the player has to fill the rest.</p>
<p>In the previous post, we implemented a simple Sudoku solver without paying much attention to its performance characteristics. We ran<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a> some of <a href="https://abhinavsarkar.net/files/sudoku17.txt.bz2">17-clue puzzles</a><a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a> through our program to see how fast it was:</p>
<pre class="plain"><code>$ head -n100 sudoku17.txt | time stack exec sudoku
... output omitted ...
      116.70 real       198.09 user        94.46 sys</code></pre>
<p>So, it took about 117 seconds to solve one hundred puzzles. At this speed, it would take about 16 hours to solve all the 49151 puzzles contained in the file. This is way too slow. We need to find ways to make it faster. Let’s go back to the drawing board.</p>
<div class="page-break">

</div>
<h2 id="constraints-and-corollaries" data-track-content data-content-name="constraints-and-corollaries" data-content-piece="fast-sudoku-solver-in-haskell-2">Constraints and Corollaries<a href="#constraints-and-corollaries" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>In a Sudoku puzzle, we have a partially filled 9x9 grid which we have to fill completely while following the constraints of the game.</p>
<pre class="plain low-line-height"><code>+-------+-------+-------+
| . . . | . . . | . 1 . |
| 4 . . | . . . | . . . |
| . 2 . | . . . | . . . |
+-------+-------+-------+
| . . . | . 5 . | 4 . 7 |
| . . 8 | . . . | 3 . . |
| . . 1 | . 9 . | . . . |
+-------+-------+-------+
| 3 . . | 4 . . | 2 . . |
| . 5 . | 1 . . | . . . |
| . . . | 8 . 6 | . . . |
+-------+-------+-------+
    A sample puzzle

+-------+-------+-------+
| 6 9 3 | 7 8 4 | 5 1 2 |
| 4 8 7 | 5 1 2 | 9 3 6 |
| 1 2 5 | 9 6 3 | 8 7 4 |
+-------+-------+-------+
| 9 3 2 | 6 5 1 | 4 8 7 |
| 5 6 8 | 2 4 7 | 3 9 1 |
| 7 4 1 | 3 9 8 | 6 2 5 |
+-------+-------+-------+
| 3 1 9 | 4 7 5 | 2 6 8 |
| 8 5 6 | 1 2 9 | 7 4 3 |
| 2 7 4 | 8 3 6 | 1 5 9 |
+-------+-------+-------+
    and its solution</code></pre>
<p>Earlier, we followed a simple pruning algorithm which removed all the solved (or <em>fixed</em>) digits from neighbours of the fixed cells. We repeated the pruning till the fixed and non-fixed values in the grid stopped changing (or the grid <em>settled</em>). Here’s an example of a grid before pruning:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] | [123456789] 1           [123456789] |
| 4           [123456789] [123456789] | [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] |
| [123456789] 2           [123456789] | [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [123456789] [123456789] [123456789] | [123456789] 5           [123456789] | 4           [123456789] 7           |
| [123456789] [123456789] 8           | [123456789] [123456789] [123456789] | 3           [123456789] [123456789] |
| [123456789] [123456789] 1           | [123456789] 9           [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [123456789] [123456789] | 4           [123456789] [123456789] | 2           [123456789] [123456789] |
| [123456789] 5           [123456789] | 1           [123456789] [123456789] | [123456789] [123456789] [123456789] |
| [123456789] [123456789] [123456789] | 8           [123456789] 6           | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>And here’s the same grid when it settles after repeated pruning:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [    56789] [  3  6789] [  3 567 9] | [ 23 567 9] [ 234 6 8 ] [ 2345 789] | [    56789] 1           [ 23456 89] |
| 4           [1 3  6789] [  3 567 9] | [ 23 567 9] [123  6 8 ] [123 5 789] | [    56789] [ 23 56789] [ 23 56 89] |
| [1   56789] 2           [  3 567 9] | [  3 567 9] [1 34 6 8 ] [1 345 789] | [    56789] [  3456789] [  3456 89] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [ 2   6  9] [  3  6  9] [ 23  6  9] | [ 23  6   ] 5           [123    8 ] | 4           [ 2   6 89] 7           |
| [ 2  567 9] [   4 67 9] 8           | [ 2   67  ] [12 4 6   ] [12 4  7  ] | 3           [ 2  56  9] [12  56  9] |
| [ 2  567  ] [  34 67  ] 1           | [ 23  67  ] 9           [ 234  78 ] | [    56 8 ] [ 2  56 8 ] [ 2  56 8 ] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [1    6 89] [     6  9] | 4           7           [    5   9] | 2           [    56 89] [1   56 89] |
| [ 2   6789] 5           [ 2 4 67 9] | 1           [ 23      ] [ 23     9] | [     6789] [  34 6789] [  34 6 89] |
| [12    7 9] [1  4  7 9] [ 2 4  7 9] | 8           [ 23      ] 6           | [1   5 7 9] [  345 7 9] [1 345   9] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>We see how the possibilities conflicting with the fixed values are removed. We also see how some of the non-fixed cells turn into fixed ones as all their other possible values get eliminated.</p>
<p>This simple strategy follows directly from the constraints of Sudoku. But, are there more complex strategies which are implied indirectly?</p>
<div class="page-break">

</div>
<h2 id="singles-twins-and-triplets" data-track-content data-content-name="singles-twins-and-triplets" data-content-piece="fast-sudoku-solver-in-haskell-2">Singles, Twins and Triplets<a href="#singles-twins-and-triplets" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Let’s have a look at this sample row captured from a solution in progress:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| 4           [ 2   6 89] 7           | 3           [ 2  56  9] [12  56  9] | [    56 8 ] [ 2  56 8 ] [ 2  56 8 ] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>Notice how the sixth cell is the only one with <code>1</code> as a possibility in it. It is obvious that we should fix the sixth cell to <code>1</code> as we cannot place <code>1</code> in any other cell in the row. Let’s call this the <em>Singles</em><a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a> scenario.</p>
<p>But, our current solution will not fix the sixth cell to <code>1</code> till one of these cases arise:</p>
<ol type="a">
<li>all other possibilities of the cell are pruned away, or,</li>
<li>the cell is chosen as pivot in the <code>nextGrids</code> function and <code>1</code> is chosen as the value to fix.</li>
</ol>
<p>This may take very long and lead to a longer solution time. Let’s assume that we recognize the Singles scenario while pruning cells and fix the cell to <code>1</code> right then. That would cut down the search tree by a lot and make the solution much faster.</p>
<p>It turns out, we can generalize this pattern. Let’s check out this sample row from middle of a solution:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [1  4    9] 3           [1  4567 9] | [1  4   89] [1  4 6 89] [1  4 6 89] | [1  4   89] 2           [1  456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>It is a bit difficult to notice with the naked eye but there’s something special here too. The digits <code>5</code> and <code>7</code> occur only in the third and the ninth cells. Though they are accompanied by other digits in those cells, they are not present in any other cells. This means, we can place <code>5</code> and <code>7</code> either in the third or the ninth cell and no other cells. This implies that we can prune the third and ninth cells to have only <code>5</code> and <code>7</code> like this:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [1  4    9] 3           [    5 7  ] | [1  4   89] [1  4 6 89] [1  4 6 89] | [1  4   89] 2           [    5 7  ] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>This is the <em>Twins</em> scenario. As we can imagine, this pattern extends to groups of three digits and beyond. When three digits can be found only in three cells in a block, it is the <em>Triplets</em> scenario, as in the example below:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [   45 7  ] [   45 7  ] [    5 7  ] | 2           [  3 5  89] 6           | 1           [  34   89] [  34   89] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>In this case, the triplet digits are <code>3</code>, <code>8</code> and <code>9</code>. And as before, we can prune the block by fixing these digits in their cells:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [   45 7  ] [   45 7  ] [    5 7  ] | 2           [  3    89] 6           | 1           [  3    89] [  3    89] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>Let’s call these three scenarios <em>Exclusives</em> in general.</p>
<p>We can extend this to <em>Quadruplets</em> scenario and further. But such scenarios occur rarely in a 9x9 Sudoku puzzle. Trying to find them may end up being more computationally expensive than the benefit we may get in solution time speedup by finding them.</p>
<p>Now that we have discovered these new strategies to prune cells, let’s implement them in Haskell.</p>
<h2 id="a-little-forward-a-little-backward" data-track-content data-content-name="a-little-forward-a-little-backward" data-content-piece="fast-sudoku-solver-in-haskell-2">A Little Forward, a Little Backward<a href="#a-little-forward-a-little-backward" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>We can implement the three new strategies to prune cells as one function for each. However, we can actually implement all these strategies in a single function. But, this function is a bit more complex than the previous pruning function. So first, let’s try to understand its working using tables. Let’s take this sample row:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [   4 6  9] 1           5           | [     6  9] 7           [ 23  6 89] | [     6  9] [ 23  6 89] [ 23  6 89] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>First, we make a table mapping the digits to the cells in which they occur, excluding the fixed cells:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Digit</th>
<th style="text-align: right;">Cells</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">2</td>
<td style="text-align: right;">6, 8, 9</td>
</tr>
<tr class="even">
<td style="text-align: left;">3</td>
<td style="text-align: right;">6, 8, 9</td>
</tr>
<tr class="odd">
<td style="text-align: left;">4</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td style="text-align: left;">6</td>
<td style="text-align: right;">1, 4, 6, 7, 8, 9</td>
</tr>
<tr class="odd">
<td style="text-align: left;">8</td>
<td style="text-align: right;">6, 8, 9</td>
</tr>
<tr class="even">
<td style="text-align: left;">9</td>
<td style="text-align: right;">1, 4, 6, 7, 8, 9</td>
</tr>
</tbody>
</table>
</div>
<p>Then, we flip this table and collect all the digits that occur in the same set of cells:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cells</th>
<th style="text-align: right;">Digits</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">1</td>
<td style="text-align: right;">4</td>
</tr>
<tr class="even">
<td style="text-align: left;">6, 8, 9</td>
<td style="text-align: right;">2, 3, 8</td>
</tr>
<tr class="odd">
<td style="text-align: left;">1, 4, 6, 7, 8, 9</td>
<td style="text-align: right;">6, 9</td>
</tr>
</tbody>
</table>
</div>
<p>And finally, we remove the rows of the table in which the count of the cells is not the same as the count of the digits:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cells</th>
<th style="text-align: right;">Digits</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">1</td>
<td style="text-align: right;">4</td>
</tr>
<tr class="even">
<td style="text-align: left;">6, 8, 9</td>
<td style="text-align: right;">2, 3, 8</td>
</tr>
</tbody>
</table>
</div>
<p>Voilà! We have found a Single <code>4</code> and a set of Triplets <code>2</code>, <code>3</code> and <code>8</code>. You can go over the puzzle row and verify that this indeed is the case.</p>
<p>Translating this logic to Haskell is quite easy now:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" title="1"><span class="ot">isPossible ::</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb11-2" title="2">isPossible (<span class="dt">Possible</span> _) <span class="fu">=</span> <span class="dt">True</span></a>
<a class="sourceLine" id="cb11-3" title="3">isPossible _            <span class="fu">=</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb11-4" title="4"></a>
<a class="sourceLine" id="cb11-5" title="5"><span class="ot">exclusivePossibilities ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> [[<span class="dt">Int</span>]]</a>
<a class="sourceLine" id="cb11-6" title="6">exclusivePossibilities row <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-7" title="7">  <span class="co">-- input</span></a>
<a class="sourceLine" id="cb11-8" title="8">  row</a>
<a class="sourceLine" id="cb11-9" title="9">  <span class="co">-- [Possible [4,6,9], Fixed 1, Fixed 5, Possible [6,9], Fixed 7, Possible [2,3,6,8,9],</span></a>
<a class="sourceLine" id="cb11-10" title="10">  <span class="co">-- Possible [6,9], Possible [2,3,6,8,9], Possible [2,3,6,8,9]]</span></a>
<a class="sourceLine" id="cb11-11" title="11"></a>
<a class="sourceLine" id="cb11-12" title="12">  <span class="co">-- step 1</span></a>
<a class="sourceLine" id="cb11-13" title="13">  <span class="fu">&amp;</span> <span class="fu">zip</span> [<span class="dv">1</span><span class="fu">..</span><span class="dv">9</span>]</a>
<a class="sourceLine" id="cb11-14" title="14">  <span class="co">-- [(1,Possible [4,6,9]),(2,Fixed 1),(3,Fixed 5),(4,Possible [6,9]),(5,Fixed 7),</span></a>
<a class="sourceLine" id="cb11-15" title="15">  <span class="co">-- (6,Possible [2,3,6,8,9]),(7,Possible [6,9]),(8,Possible [2,3,6,8,9]),</span></a>
<a class="sourceLine" id="cb11-16" title="16">  <span class="co">-- (9,Possible [2,3,6,8,9])]</span></a>
<a class="sourceLine" id="cb11-17" title="17"></a>
<a class="sourceLine" id="cb11-18" title="18">  <span class="co">-- step 2</span></a>
<a class="sourceLine" id="cb11-19" title="19">  <span class="fu">&amp;</span> <span class="fu">filter</span> (isPossible <span class="fu">.</span> <span class="fu">snd</span>)</a>
<a class="sourceLine" id="cb11-20" title="20">  <span class="co">-- [(1,Possible [4,6,9]),(4,Possible [6,9]),(6,Possible [2,3,6,8,9]),</span></a>
<a class="sourceLine" id="cb11-21" title="21">  <span class="co">-- (7,Possible [6,9]), (8,Possible [2,3,6,8,9]),(9,Possible [2,3,6,8,9])]</span></a>
<a class="sourceLine" id="cb11-22" title="22"></a>
<a class="sourceLine" id="cb11-23" title="23">  <span class="co">-- step 3</span></a>
<a class="sourceLine" id="cb11-24" title="24">  <span class="fu">&amp;</span> Data.List.foldl'</a>
<a class="sourceLine" id="cb11-25" title="25">      (\acc <span class="fu">~</span>(i, <span class="dt">Possible</span> xs) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb11-26" title="26">        Data.List.foldl' (\acc' x <span class="ot">-&gt;</span> Map.insertWith prepend x [i] acc') acc xs)</a>
<a class="sourceLine" id="cb11-27" title="27">      Map.empty</a>
<a class="sourceLine" id="cb11-28" title="28">  <span class="co">-- fromList [(2,[9,8,6]),(3,[9,8,6]),(4,[1]),(6,[9,8,7,6,4,1]),(8,[9,8,6]),</span></a>
<a class="sourceLine" id="cb11-29" title="29">  <span class="co">-- (9,[9,8,7,6,4,1])]</span></a>
<a class="sourceLine" id="cb11-30" title="30"></a>
<a class="sourceLine" id="cb11-31" title="31">  <span class="co">-- step 4</span></a>
<a class="sourceLine" id="cb11-32" title="32">  <span class="fu">&amp;</span> Map.filter ((<span class="fu">&lt;</span> <span class="dv">4</span>) <span class="fu">.</span> <span class="fu">length</span>)</a>
<a class="sourceLine" id="cb11-33" title="33">  <span class="co">-- fromList [(2,[9,8,6]),(3,[9,8,6]),(4,[1]),(8,[9,8,6])]</span></a>
<a class="sourceLine" id="cb11-34" title="34"></a>
<a class="sourceLine" id="cb11-35" title="35">  <span class="co">-- step 5</span></a>
<a class="sourceLine" id="cb11-36" title="36">  <span class="fu">&amp;</span> Map.foldlWithKey'(\acc x is <span class="ot">-&gt;</span> Map.insertWith prepend is [x] acc) Map.empty</a>
<a class="sourceLine" id="cb11-37" title="37">  <span class="co">-- fromList [([1],[4]),([9,8,6],[8,3,2])]</span></a>
<a class="sourceLine" id="cb11-38" title="38"></a>
<a class="sourceLine" id="cb11-39" title="39">  <span class="co">-- step 6</span></a>
<a class="sourceLine" id="cb11-40" title="40">  <span class="fu">&amp;</span> Map.filterWithKey (\is xs <span class="ot">-&gt;</span> <span class="fu">length</span> is <span class="fu">==</span> <span class="fu">length</span> xs)</a>
<a class="sourceLine" id="cb11-41" title="41">  <span class="co">-- fromList [([1],[4]),([9,8,6],[8,3,2])]</span></a>
<a class="sourceLine" id="cb11-42" title="42"></a>
<a class="sourceLine" id="cb11-43" title="43">  <span class="co">-- step 7</span></a>
<a class="sourceLine" id="cb11-44" title="44">  <span class="fu">&amp;</span> Map.elems</a>
<a class="sourceLine" id="cb11-45" title="45">  <span class="co">-- [[4],[8,3,2]]</span></a>
<a class="sourceLine" id="cb11-46" title="46">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-47" title="47">    prepend <span class="fu">~</span>[y] ys <span class="fu">=</span> y<span class="fu">:</span>ys</a></code></pre></div>
<p>We extract the <code>isPossible</code> function to the top level from the <code>nextGrids</code> function for reuse. Then we write the <code>exclusivePossibilities</code> function which finds the Exclusives in the input row. This function is written using the reverse application operator <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Function.html#v:-38-" target="_blank" rel="noopener"><code>(&amp;)</code></a><a href="#fn4" class="footnote-ref" id="fnref4"><sup>4</sup></a> instead of the usual <code>($)</code> operator so that we can read it from top to bottom. We also show the intermediate values for a sample input after every step in the function chain.</p>
<p>The nub of the function lies in step 3 (pun intended). We do a nested fold over all the non-fixed cells and all the possible digits in them to compute the map<a href="#fn5" class="footnote-ref" id="fnref5"><sup>5</sup></a> which represents the first table. Thereafter, we filter the map to keep only the entries with length less than four (step 4). Then we flip it to create a new map which represents the second table (step 5). Finally, we filter the flipped map for the entries where the cell count is same as the digit count (step 6) to arrive at the final table. The step 7 just gets the values in the map which is the list of all the Exclusives in the input row.</p>
<h2 id="pruning-the-cells-exclusively" data-track-content data-content-name="pruning-the-cells-exclusively" data-content-piece="fast-sudoku-solver-in-haskell-2">Pruning the Cells, Exclusively<a href="#pruning-the-cells-exclusively" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>To start with, we extract some reusable code from the previous <code>pruneCells</code> function and rename it to <code>pruneCellsByFixed</code>:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" title="1"><span class="ot">makeCell ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cell</span></a>
<a class="sourceLine" id="cb12-2" title="2">makeCell ys <span class="fu">=</span> <span class="kw">case</span> ys <span class="kw">of</span></a>
<a class="sourceLine" id="cb12-3" title="3">  []  <span class="ot">-&gt;</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb12-4" title="4">  [y] <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="fu">$</span> <span class="dt">Fixed</span> y</a>
<a class="sourceLine" id="cb12-5" title="5">  _   <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="fu">$</span> <span class="dt">Possible</span> ys</a>
<a class="sourceLine" id="cb12-6" title="6"></a>
<a class="sourceLine" id="cb12-7" title="7"><span class="ot">pruneCellsByFixed ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Cell</span>]</a>
<a class="sourceLine" id="cb12-8" title="8">pruneCellsByFixed cells <span class="fu">=</span> <span class="fu">traverse</span> pruneCell cells</a>
<a class="sourceLine" id="cb12-9" title="9">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-10" title="10">    fixeds <span class="fu">=</span> [x <span class="fu">|</span> <span class="dt">Fixed</span> x <span class="ot">&lt;-</span> cells]</a>
<a class="sourceLine" id="cb12-11" title="11"></a>
<a class="sourceLine" id="cb12-12" title="12">    pruneCell (<span class="dt">Possible</span> xs) <span class="fu">=</span> makeCell (xs <span class="dt">Data.List</span><span class="fu">.</span>\\ fixeds)</a>
<a class="sourceLine" id="cb12-13" title="13">    pruneCell x             <span class="fu">=</span> <span class="dt">Just</span> x</a></code></pre></div>
<p>Now we write the <code>pruneCellsByExclusives</code> function which uses the <code>exclusivePossibilities</code> function to prune the cells:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" title="1"><span class="ot">pruneCellsByExclusives ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Cell</span>]</a>
<a class="sourceLine" id="cb13-2" title="2">pruneCellsByExclusives cells <span class="fu">=</span> <span class="kw">case</span> exclusives <span class="kw">of</span></a>
<a class="sourceLine" id="cb13-3" title="3">  [] <span class="ot">-&gt;</span> <span class="dt">Just</span> cells</a>
<a class="sourceLine" id="cb13-4" title="4">  _  <span class="ot">-&gt;</span> <span class="fu">traverse</span> pruneCell cells</a>
<a class="sourceLine" id="cb13-5" title="5">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-6" title="6">    exclusives    <span class="fu">=</span> exclusivePossibilities cells</a>
<a class="sourceLine" id="cb13-7" title="7">    allExclusives <span class="fu">=</span> <span class="fu">concat</span> exclusives</a>
<a class="sourceLine" id="cb13-8" title="8"></a>
<a class="sourceLine" id="cb13-9" title="9">    pruneCell cell<span class="fu">@</span>(<span class="dt">Fixed</span> _) <span class="fu">=</span> <span class="dt">Just</span> cell</a>
<a class="sourceLine" id="cb13-10" title="10">    pruneCell cell<span class="fu">@</span>(<span class="dt">Possible</span> xs)</a>
<a class="sourceLine" id="cb13-11" title="11">      <span class="fu">|</span> intersection <span class="ot">`elem`</span> exclusives <span class="fu">=</span> makeCell intersection</a>
<a class="sourceLine" id="cb13-12" title="12">      <span class="fu">|</span> <span class="fu">otherwise</span>                      <span class="fu">=</span> <span class="dt">Just</span> cell</a>
<a class="sourceLine" id="cb13-13" title="13">      <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-14" title="14">        intersection <span class="fu">=</span> xs <span class="ot">`Data.List.intersect`</span> allExclusives</a></code></pre></div>
<p><code>pruneCellsByExclusives</code> works exactly as shown in the examples above. We first find the list of Exclusives in the given cells. If there are no Exclusives, there’s nothing to do and we just return the cells. If we find any Exclusives, we <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Traversable.html#v:traverse" target="_blank" rel="noopener"><code>traverse</code></a> the cells, pruning each cell to only the intersection of the possible digits in the cell and Exclusive digits. That’s it! We reuse the <code>makeCell</code> function to create a new cell with the intersection.</p>
<p>As the final step, we rewrite the <code>pruneCells</code> function by combining both the functions.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" title="1"><span class="ot">fixM ::</span> (<span class="dt">Eq</span> t, <span class="dt">Monad</span> m) <span class="ot">=&gt;</span> (t <span class="ot">-&gt;</span> m t) <span class="ot">-&gt;</span> t <span class="ot">-&gt;</span> m t</a>
<a class="sourceLine" id="cb14-2" title="2">fixM f x <span class="fu">=</span> f x <span class="fu">&gt;&gt;=</span> \x' <span class="ot">-&gt;</span> <span class="kw">if</span> x' <span class="fu">==</span> x <span class="kw">then</span> <span class="fu">return</span> x <span class="kw">else</span> fixM f x'</a>
<a class="sourceLine" id="cb14-3" title="3"></a>
<a class="sourceLine" id="cb14-4" title="4"><span class="ot">pruneCells ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Cell</span>]</a>
<a class="sourceLine" id="cb14-5" title="5">pruneCells cells <span class="fu">=</span> fixM pruneCellsByFixed cells <span class="fu">&gt;&gt;=</span> fixM pruneCellsByExclusives</a></code></pre></div>
<p>We have extracted <code>fixM</code> as a top level function from the <code>pruneGrid</code> function. Just like the <code>pruneGrid'</code> function, we need to use monadic bind (<a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/Control-Monad.html#v:-62--62--61-" target="_blank" rel="noopener"><code>&gt;&gt;=</code></a>) to chain the two pruning steps. We also use <code>fixM</code> to apply each step repeatedly till the pruned cells settle<a href="#fn6" class="footnote-ref" id="fnref6"><sup>6</sup></a>.</p>
<p>No further code changes are required. It is time to check out the improvements.</p>
<h2 id="faster-than-a-speeding-bullet" data-track-content data-content-name="faster-than-a-speeding-bullet" data-content-piece="fast-sudoku-solver-in-haskell-2">Faster than a Speeding Bullet!<a href="#faster-than-a-speeding-bullet" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Let’s build the program and run the exact same number of puzzles as before:</p>
<pre class="plain"><code>$ head -n100 sudoku17.txt | time stack exec sudoku
... output omitted ...
      0.53 real         0.58 user         0.23 sys</code></pre>
<p>Woah! It is way faster than before. Let’s solve all the puzzles now:</p>
<pre class="plain"><code>$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
      282.98 real       407.25 user       109.27 sys</code></pre>
<p>So it is took about 283 seconds to solve all the 49151 puzzles. The speedup is about 200x<a href="#fn7" class="footnote-ref" id="fnref7"><sup>7</sup></a>. That’s about 5.8 milliseconds per puzzle.</p>
<p>Let’s do a quick profiling to see where the time is going:</p>
<pre class="plain"><code>$ stack build --profile
$ head -n1000 sudoku17.txt | stack exec -- sudoku +RTS -p &gt; /dev/null</code></pre>
<p>This generates a file named <code>sudoku.prof</code> with the profiling results. Here are the top five most time-taking functions (cleaned for brevity):</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Center</th>
<th style="text-align: left;">Source</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities</code></td>
<td style="text-align: left;">(49,1)-(62,26)</td>
<td style="text-align: right;">17.6</td>
<td style="text-align: right;">11.4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCellsByFixed.pruneCell</code></td>
<td style="text-align: left;">(75,5)-(76,36)</td>
<td style="text-align: right;">16.9</td>
<td style="text-align: right;">30.8</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities.\.\</code></td>
<td style="text-align: left;">55:38-70</td>
<td style="text-align: right;">12.2</td>
<td style="text-align: right;">20.3</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>fixM.\</code></td>
<td style="text-align: left;">13:27-65</td>
<td style="text-align: right;">10.0</td>
<td style="text-align: right;">0.0</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>==</code></td>
<td style="text-align: left;">15:56-57</td>
<td style="text-align: right;">7.2</td>
<td style="text-align: right;">0.0</td>
</tr>
</tbody>
</table>
</div>
<p>Looking at the report, my guess is that a lot of time is going into list operations. Lists are known to be inefficient in Haskell so maybe we should switch to some other data structures?</p>
<h3 id="update">Update<a href="#update" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<p>As per the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/#comment-97ca7640-8531-11e8-a1d5-1fd7d3dbc496">comment</a> below by Chris Casinghino, I ran both the versions of code without the <code>-threaded</code>, <code>-rtsopts</code> and <code>-with-rtsopts=-N</code> options. The time for previous post’s code:</p>
<pre class="plain"><code>$ head -n100 sudoku17.txt | time stack exec sudoku
... output omitted ...
       96.54 real        95.90 user         0.66 sys</code></pre>
<p>And the time for this post’s code:</p>
<pre class="plain"><code>$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
      258.97 real       257.34 user         1.52 sys</code></pre>
<p>So, both the versions run about 10% faster without the threading options. I suspect this has something to do with GHC’s parallel GC as described in <a href="https://web.archive.org/web/20170612225421/https://inner-haven.net/posts/2017-05-08-speed-up-haskell-programs-weird-trick.html" target="_blank" rel="noopener">this post</a>. So for now, I’ll keep threading disabled.</p>
<h2 id="conclusion" data-track-content data-content-name="conclusion" data-content-piece="fast-sudoku-solver-in-haskell-2">Conclusion<a href="#conclusion" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>In this post, we improved upon our simple Sudoku solution from the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/">last time</a>. We discovered and implemented a new strategy to prune cells, and we achieved a 200x speedup. But profiling shows that we still have many possibilities for improvements. We’ll work on that and more in the upcoming posts in this series. The code till now is available <a href="https://code.abhinavsarkar.net/abhin4v/hasdoku/src/commit/9d6eb18229f905c52cb4c98b569abb70757ba022" target="_blank" rel="noopener">here</a>. Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/8xyfad/fast_sudoku_solver_in_haskell_2_a_200x_faster/" target="_blank" rel="noopener">r/haskell</a> or <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/#comment-container">leave a comment</a>.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>All the runs were done on my MacBook Pro from 2014 with 2.2 GHz Intel Core i7 CPU and 16 GB memory.<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>At least 17 cells must be pre-filled in a Sudoku puzzle for it to have a unique solution. So 17-clue puzzles are the most difficult of all puzzles. <a href="https://arxiv.org/pdf/1201.0749v2.pdf" target="_blank" rel="noopener">This paper</a> by McGuire, Tugemann and Civario gives the proof of the same.<a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p>“Single” as in <a href="https://en.wikipedia.org/wiki/Single_child" target="_blank" rel="noopener">“Single child”</a><a href="#fnref3" class="footnote-back">↩</a></p></li>
<li id="fn4"><p>Reverse application operation is not used much in Haskell. But it is the preferred way of function chaining in some other functional programming languages like <a href="https://clojuredocs.org/clojure.core/-%3E" target="_blank" rel="noopener">Clojure</a>, <a href="https://msdn.microsoft.com/en-us/visualfsharpdocs/conceptual/operators.%5b-h%5d-%5d%5b't1,'u%5d-function-%5bfsharp%5d" target="_blank" rel="noopener">FSharp</a>, and <a href="https://hexdocs.pm/elixir/Kernel.html#%7C%3E/2" target="_blank" rel="noopener">Elixir</a>.<a href="#fnref4" class="footnote-back">↩</a></p></li>
<li id="fn5"><p>We use <a href="https://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-Map-Strict.html" target="_blank" rel="noopener">Data.Map.Strict</a> as the map imple­mentation.<a href="#fnref5" class="footnote-back">↩</a></p></li>
<li id="fn6"><p>We need to run <code>pruneCellsByFixed</code> and <code>pruneCellsByExclusives</code> repeatedly using <code>fixM</code> because an unsettled row can lead to wrong solutions.</p>
<p>Imagine a row which just got a <code>9</code> fixed because of <code>pruneCellsByFixed</code>. If we don’t run the function again, the row may be left with one non-fixed cell with a <code>9</code>. When we run this row through <code>pruneCellsByExclusives</code>, it’ll consider the <code>9</code> in the non-fixed cell as a Single and fix it. This will lead to two <code>9</code>s in the same row, causing the solution to fail.<a href="#fnref6" class="footnote-back">↩</a></p></li>
<li id="fn7"><p>Speedup calculation: 116.7 / 100 * 49151 / 282.98 = 202.7<a href="#fnref7" class="footnote-back">↩</a></p></li>
</ol>
</section><p>If you liked this post, please <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/#comment-container">leave a comment</a>.</p><img src="https://anna.abhinavsarkar.net/piwik.php?idsite=1&amp;rec=1" style="border:0; display: none;" />]]></summary>
</entry>
<entry>
    <title>Fast Sudoku Solver in Haskell #1: A Simple Solution</title>
    <link rel="alternate" href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/" />
    <id>https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/</id>
    <published>2018-06-28T00:00:00Z</published>
    <updated>2018-06-28T00:00:00Z</updated>
    
    <author>
        <name>Abhinav Sarkar</name>
        <email>abhinav@abhinavsarkar.net</email>
        <uri>https://abhinavsarkar.net/about/</uri>
    </author>
    
    
    <category term="haskell" />
    
    <category term="sudoku" />
    
    <category term="programming" />
    
    <category term="puzzle" />
    
    <category term="nilenso" />
    
    <summary type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Sudoku" target="_blank" rel="noopener">Sudoku</a> is a number placement puzzle. It consists of a 9x9 grid which is to be filled with digits from 1 to 9. Some of the cells of the grid come pre-filled and the player has to fill the rest.</p>
<p><a href="https://www.haskell.org/" target="_blank" rel="noopener">Haskell</a> is a purely functional programming language. It is a good choice to solve Sudoku given the problem’s <a href="https://en.wikipedia.org/wiki/Combinatorics" target="_blank" rel="noopener">combinatorial</a> nature. The aim of this series of posts is to write a <strong>fast</strong> Sudoku solver in Haskell. We’ll focus on both implementing the solution and making it efficient, step-by-step, starting with a slow but simple solution in this post<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>.</p>
<!--more-->
<p>This is the first post in a series of posts:</p>
<ol type="1">
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/">Fast Sudoku Solver in Haskell #1: A Simple Solution</a></li>
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/">Fast Sudoku Solver in Haskell #2: A 200x Faster Solution</a></li>
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-3/">Fast Sudoku Solver in Haskell #3: Picking the Right Data Structures</a></li>
</ol>
<p>Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/8uapij/fast_sudoku_solver_in_haskell/" target="_blank" rel="noopener">r/haskell</a>.</p>
<nav id="toc" class="right-toc"><h3>Contents</h3><ol><li><a href="#constraint-satisfaction-problem">Constraint Satisfaction Problem</a></li><li><a href="#setting-up">Setting up</a></li><li><a href="#pruning-the-cells">Pruning the Cells</a></li><li><a href="#pruning-the-grid">Pruning the Grid</a></li><li><a href="#making-the-choice">Making the Choice</a></li><li><a href="#solving-the-puzzle">Solving the Puzzle</a></li><li><a href="#conclusion">Conclusion</a></li></ol></nav>
<h2 id="constraint-satisfaction-problem" data-track-content data-content-name="constraint-satisfaction-problem" data-content-piece="fast-sudoku-solver-in-haskell-1">Constraint Satisfaction Problem<a href="#constraint-satisfaction-problem" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Solving Sudoku is a <a href="https://en.wikipedia.org/wiki/Constraint_satisfaction_problem" target="_blank" rel="noopener">constraint satisfaction problem</a>. We are given a partially filled grid which we have to fill completely such that each of the following constraints are satisfied:</p>
<ol type="1">
<li>Each of the nine rows must have all the digits, from 1 to 9.</li>
<li>Each of the nine columns must have all the digits, from 1 to 9.</li>
<li>Each of the nine 3x3 sub-grids must have all the digits, from 1 to 9.</li>
</ol>
<pre class="plain low-line-height"><code>+-------+-------+-------+
| . . . | . . . | . 1 . |
| 4 . . | . . . | . . . |
| . 2 . | . . . | . . . |
+-------+-------+-------+
| . . . | . 5 . | 4 . 7 |
| . . 8 | . . . | 3 . . |
| . . 1 | . 9 . | . . . |
+-------+-------+-------+
| 3 . . | 4 . . | 2 . . |
| . 5 . | 1 . . | . . . |
| . . . | 8 . 6 | . . . |
+-------+-------+-------+
    A sample puzzle

+-------+-------+-------+
| 6 9 3 | 7 8 4 | 5 1 2 |
| 4 8 7 | 5 1 2 | 9 3 6 |
| 1 2 5 | 9 6 3 | 8 7 4 |
+-------+-------+-------+
| 9 3 2 | 6 5 1 | 4 8 7 |
| 5 6 8 | 2 4 7 | 3 9 1 |
| 7 4 1 | 3 9 8 | 6 2 5 |
+-------+-------+-------+
| 3 1 9 | 4 7 5 | 2 6 8 |
| 8 5 6 | 1 2 9 | 7 4 3 |
| 2 7 4 | 8 3 6 | 1 5 9 |
+-------+-------+-------+
    and its solution</code></pre>
<p>Each cell in the grid is member of one row, one column and one sub-grid (called <em>block</em> in general). Digits in the pre-filled cells impose constraints on the rows, columns, and sub-grids they are part of. For example, if a cell contains <code>1</code> then no other cell in that cell’s row, column or sub-grid can contain <code>1</code>. Given these constraints, we can devise a simple algorithm to solve Sudoku:</p>
<ol type="1">
<li>Each cell contains either a single digit or has a set of possible digits. For example, a grid showing the possibilities of all non-filled cells for the sample puzzle above: <small></li>
</ol>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] | [123456789] 1           [123456789] |
| 4           [123456789] [123456789] | [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] |
| [123456789] 2           [123456789] | [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [123456789] [123456789] [123456789] | [123456789] 5           [123456789] | 4           [123456789] 7           |
| [123456789] [123456789] 8           | [123456789] [123456789] [123456789] | 3           [123456789] [123456789] |
| [123456789] [123456789] 1           | [123456789] 9           [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [123456789] [123456789] | 4           [123456789] [123456789] | 2           [123456789] [123456789] |
| [123456789] 5           [123456789] | 1           [123456789] [123456789] | [123456789] [123456789] [123456789] |
| [123456789] [123456789] [123456789] | 8           [123456789] 6           | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<ol start="2" type="1">
<li>If a cell contains a digit, remove that digit from the list of the possible digits from all its neighboring cells. Neighboring cells are the other cells in the given cell’s row, column and sub-grid. For example, the grid after removing the fixed value <code>4</code> of the row-2-column-1 cell from its neighboring cells:</li>
</ol>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [123 56789] [123 56789] [123 56789] | [123456789] [123456789] [123456789] | [123456789] 1           [123456789] |
| 4           [123 56789] [123 56789] | [123 56789] [123 56789] [123 56789] | [123 56789] [123 56789] [123 56789] |
| [123 56789] 2           [123 56789] | [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [123 56789] [123456789] [123456789] | [123456789] 5           [123456789] | 4           [123456789] 7           |
| [123 56789] [123456789] 8           | [123456789] [123456789] [123456789] | 3           [123456789] [123456789] |
| [123 56789] [123456789] 1           | [123456789] 9           [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [123456789] [123456789] | 4           [123456789] [123456789] | 2           [123456789] [123456789] |
| [123 56789] 5           [123456789] | 1           [123456789] [123456789] | [123456789] [123456789] [123456789] |
| [123 56789] [123456789] [123456789] | 8           [123456789] 6           | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<ol start="3" type="1">
<li>Repeat the previous step for all the cells that are have been solved (or <em>fixed</em>), either pre-filled or filled in the previous iteration of the solution. For example, the grid after removing all fixed values from all non-fixed cells: <small></li>
</ol>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [    56789] [  3  6789] [  3 567 9] | [ 23 567 9] [ 234 678 ] [ 2345 789] | [    56789] 1           [ 23456 89] |
| 4           [1 3  6789] [  3 567 9] | [ 23 567 9] [123  678 ] [123 5 789] | [    56789] [ 23 56789] [ 23 56 89] |
| [1   56789] 2           [  3 567 9] | [  3 567 9] [1 34 678 ] [1 345 789] | [    56789] [  3456789] [  3456 89] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [ 2   6  9] [  3  6  9] [ 23  6  9] | [ 23  6   ] 5           [123    8 ] | 4           [ 2   6 89] 7           |
| [ 2  567 9] [   4 67 9] 8           | [ 2   67  ] [12 4 67  ] [12 4  7  ] | 3           [ 2  56  9] [12  56  9] |
| [ 2  567  ] [  34 67  ] 1           | [ 23  67  ] 9           [ 234  78 ] | [    56 8 ] [ 2  56 8 ] [ 2  56 8 ] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [1    6789] [     67 9] | 4           7           [    5 7 9] | 2           [    56789] [1   56 89] |
| [ 2   6789] 5           [ 2 4 67 9] | 1           [ 23   7  ] [ 23   7 9] | [     6789] [  34 6789] [  34 6 89] |
| [12    7 9] [1  4  7 9] [ 2 4  7 9] | 8           [ 23   7  ] 6           | [1   5 7 9] [  345 7 9] [1 345   9] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<ol start="4" type="1">
<li>Continue till the grid <em>settles</em>, that is, there are no more changes in the possibilities of any cells. For example, the settled grid for the current iteration: <small></li>
</ol>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [    56789] [  3  6789] [  3 567 9] | [ 23 567 9] [ 234 6 8 ] [ 2345 789] | [    56789] 1           [ 23456 89] |
| 4           [1 3  6789] [  3 567 9] | [ 23 567 9] [123  6 8 ] [123 5 789] | [    56789] [ 23 56789] [ 23 56 89] |
| [1   56789] 2           [  3 567 9] | [  3 567 9] [1 34 6 8 ] [1 345 789] | [    56789] [  3456789] [  3456 89] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [ 2   6  9] [  3  6  9] [ 23  6  9] | [ 23  6   ] 5           [123    8 ] | 4           [ 2   6 89] 7           |
| [ 2  567 9] [   4 67 9] 8           | [ 2   67  ] [12 4 6   ] [12 4  7  ] | 3           [ 2  56  9] [12  56  9] |
| [ 2  567  ] [  34 67  ] 1           | [ 23  67  ] 9           [ 234  78 ] | [    56 8 ] [ 2  56 8 ] [ 2  56 8 ] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [1    6 89] [     6  9] | 4           7           [    5   9] | 2           [    56 89] [1   56 89] |
| [ 2   6789] 5           [ 2 4 67 9] | 1           [ 23      ] [ 23     9] | [     6789] [  34 6789] [  34 6 89] |
| [12    7 9] [1  4  7 9] [ 2 4  7 9] | 8           [ 23      ] 6           | [1   5 7 9] [  345 7 9] [1 345   9] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<ol start="5" type="1">
<li>Once the grid settles, choose one of the non-fixed cells following some strategy. Select one of the digits from all the possibilities of the cell, and fix (assume) the cell to have that digit. Go back to step 1 and repeat.</li>
<li>The elimination of possibilities may result in inconsistencies. For example, you may end up with a cell with no possibilities. In such a case, discard that branch of solution, and backtrack to last point where you fixed a cell. Choose a different possibility to fix and repeat.</li>
<li>If at any point the grid is completely filled, you’ve found the solution!</li>
<li>If you exhaust all branches of the solution then the puzzle is unsolvable. This can happen if it starts with cells pre-filled wrongly.</li>
</ol>
<p>This algorithm is actually a <a href="https://en.wikipedia.org/wiki/Depth-first_search" target="_blank" rel="noopener">Depth-First Search</a> on the <a href="https://en.wikipedia.org/wiki/State_space_search" target="_blank" rel="noopener">state space</a> of the grid configurations. It guarantees to either find a solution or prove a puzzle to be unsolvable.</p>
<h2 id="setting-up" data-track-content data-content-name="setting-up" data-content-piece="fast-sudoku-solver-in-haskell-1">Setting up<a href="#setting-up" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>We start with writing types to represent the cells and the grid:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">data</span> <span class="dt">Cell</span> <span class="fu">=</span> <span class="dt">Fixed</span> <span class="dt">Int</span> <span class="fu">|</span> <span class="dt">Possible</span> [<span class="dt">Int</span>] <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</a>
<a class="sourceLine" id="cb6-2" title="2"><span class="kw">type</span> <span class="dt">Row</span>  <span class="fu">=</span> [<span class="dt">Cell</span>]</a>
<a class="sourceLine" id="cb6-3" title="3"><span class="kw">type</span> <span class="dt">Grid</span> <span class="fu">=</span> [<span class="dt">Row</span>]</a></code></pre></div>
<p>A cell is either fixed with a particular digit or has a set of digits as possibilities. So it is natural to represent it as a <a href="https://en.wikipedia.org/wiki/Algebraic_data_type" target="_blank" rel="noopener">sum type</a> with <code>Fixed</code> and <code>Possible</code> constructors. A row is a list of cells and a grid is a list of rows.</p>
<p>We’ll take the input puzzle as a string of 81 characters representing the cells, left-to-right and top-to-bottom. An example is:</p>
<pre class="plain"><code>.......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...</code></pre>
<p>Here, <code>.</code> represents an non-filled cell. Let’s write a function to read this input and parse it to our <code>Grid</code> data structure:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1"><span class="ot">readGrid ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb8-2" title="2">readGrid s</a>
<a class="sourceLine" id="cb8-3" title="3">  <span class="fu">|</span> <span class="fu">length</span> s <span class="fu">==</span> <span class="dv">81</span> <span class="fu">=</span> <span class="fu">traverse</span> (<span class="fu">traverse</span> readCell) <span class="fu">.</span> Data.List.Split.chunksOf <span class="dv">9</span> <span class="fu">$</span> s</a>
<a class="sourceLine" id="cb8-4" title="4">  <span class="fu">|</span> <span class="fu">otherwise</span>      <span class="fu">=</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb8-5" title="5">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-6" title="6">    readCell <span class="ch">'.'</span> <span class="fu">=</span> <span class="dt">Just</span> <span class="fu">$</span> <span class="dt">Possible</span> [<span class="dv">1</span><span class="fu">..</span><span class="dv">9</span>]</a>
<a class="sourceLine" id="cb8-7" title="7">    readCell c</a>
<a class="sourceLine" id="cb8-8" title="8">      <span class="fu">|</span> Data.Char.isDigit c <span class="fu">&amp;&amp;</span> c <span class="fu">&gt;</span> <span class="ch">'0'</span> <span class="fu">=</span> <span class="dt">Just</span> <span class="fu">.</span> <span class="dt">Fixed</span> <span class="fu">.</span> Data.Char.digitToInt <span class="fu">$</span> c</a>
<a class="sourceLine" id="cb8-9" title="9">      <span class="fu">|</span> <span class="fu">otherwise</span> <span class="fu">=</span> <span class="dt">Nothing</span></a></code></pre></div>
<p><code>readGrid</code> return a <code>Just grid</code> if the input is correct, else it returns a <code>Nothing</code>. It parses a <code>.</code> to a <code>Possible</code> cell with all digits as possibilities, and a digit char to a <code>Fixed</code> cell with that digit. Let’s try it out in the <em>REPL</em>:</p>
<p><small></p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;.......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb9-2" title="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">mapM_</span> <span class="fu">print</span> grid</a>
<a class="sourceLine" id="cb9-3" title="3">[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">1</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a>
<a class="sourceLine" id="cb9-4" title="4">[<span class="dt">Fixed</span> <span class="dv">4</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a>
<a class="sourceLine" id="cb9-5" title="5">[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">2</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a>
<a class="sourceLine" id="cb9-6" title="6">[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">5</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">4</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">7</span>]</a>
<a class="sourceLine" id="cb9-7" title="7">[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">8</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">3</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a>
<a class="sourceLine" id="cb9-8" title="8">[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">1</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">9</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a>
<a class="sourceLine" id="cb9-9" title="9">[<span class="dt">Fixed</span> <span class="dv">3</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">4</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">2</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a>
<a class="sourceLine" id="cb9-10" title="10">[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">5</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">1</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a>
<a class="sourceLine" id="cb9-11" title="11">[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">8</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">6</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a></code></pre></div>
<p></small></p>
<p>The output is a bit unreadable but correct. We can write a few functions to clean it up:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" title="1"><span class="ot">showGrid ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb10-2" title="2">showGrid <span class="fu">=</span> <span class="fu">unlines</span> <span class="fu">.</span> <span class="fu">map</span> (<span class="fu">unwords</span> <span class="fu">.</span> <span class="fu">map</span> showCell)</a>
<a class="sourceLine" id="cb10-3" title="3">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-4" title="4">    showCell (<span class="dt">Fixed</span> x) <span class="fu">=</span> <span class="fu">show</span> x</a>
<a class="sourceLine" id="cb10-5" title="5">    showCell _ <span class="fu">=</span> <span class="st">&quot;.&quot;</span></a>
<a class="sourceLine" id="cb10-6" title="6"></a>
<a class="sourceLine" id="cb10-7" title="7"><span class="ot">showGridWithPossibilities ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb10-8" title="8">showGridWithPossibilities <span class="fu">=</span> <span class="fu">unlines</span> <span class="fu">.</span> <span class="fu">map</span> (<span class="fu">unwords</span> <span class="fu">.</span> <span class="fu">map</span> showCell)</a>
<a class="sourceLine" id="cb10-9" title="9">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-10" title="10">    showCell (<span class="dt">Fixed</span> x)     <span class="fu">=</span> <span class="fu">show</span> x <span class="fu">++</span> <span class="st">&quot;          &quot;</span></a>
<a class="sourceLine" id="cb10-11" title="11">    showCell (<span class="dt">Possible</span> xs) <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-12" title="12">      (<span class="fu">++</span> <span class="st">&quot;]&quot;</span>)</a>
<a class="sourceLine" id="cb10-13" title="13">      <span class="fu">.</span> Data.List.foldl' (\acc x <span class="ot">-&gt;</span> acc <span class="fu">++</span> <span class="kw">if</span> x <span class="ot">`elem`</span> xs <span class="kw">then</span> <span class="fu">show</span> x <span class="kw">else</span> <span class="st">&quot; &quot;</span>) <span class="st">&quot;[&quot;</span></a>
<a class="sourceLine" id="cb10-14" title="14">      <span class="fu">$</span> [<span class="dv">1</span><span class="fu">..</span><span class="dv">9</span>]</a></code></pre></div>
<p>Back to the <em>REPL</em> again:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;.......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb11-2" title="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStrLn</span> <span class="fu">$</span> showGrid grid</a>
<a class="sourceLine" id="cb11-3" title="3"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb11-4" title="4"><span class="dv">4</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb11-5" title="5"><span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb11-6" title="6"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">4</span> <span class="fu">.</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb11-7" title="7"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb11-8" title="8"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="dv">9</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb11-9" title="9"><span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">4</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb11-10" title="10"><span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb11-11" title="11"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="dv">6</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a></code></pre></div>
<p><small></p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStrLn</span> <span class="fu">$</span> showGridWithPossibilities grid</a>
<a class="sourceLine" id="cb12-2" title="2">[<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">1</span>           [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb12-3" title="3"><span class="dv">4</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb12-4" title="4">[<span class="dv">123456789</span>] <span class="dv">2</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb12-5" title="5">[<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">5</span>           [<span class="dv">123456789</span>] <span class="dv">4</span>           [<span class="dv">123456789</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb12-6" title="6">[<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">8</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">3</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb12-7" title="7">[<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">1</span>           [<span class="dv">123456789</span>] <span class="dv">9</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb12-8" title="8"><span class="dv">3</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">4</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">2</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb12-9" title="9">[<span class="dv">123456789</span>] <span class="dv">5</span>           [<span class="dv">123456789</span>] <span class="dv">1</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb12-10" title="10">[<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">8</span>           [<span class="dv">123456789</span>] <span class="dv">6</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</a></code></pre></div>
<p></small></p>
<p>The output is more readable now. We see that, at the start, all the non-filled cells have all the digits as possible values. We’ll use these functions for debugging as we go forward. We can now start solving the puzzle.</p>
<div class="page-break">

</div>
<h2 id="pruning-the-cells" data-track-content data-content-name="pruning-the-cells" data-content-piece="fast-sudoku-solver-in-haskell-1">Pruning the Cells<a href="#pruning-the-cells" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>We can remove the digits of fixed cells from their neighboring cells, one cell as a time. But, it is faster to find all the fixed digits in a row of cells and remove them from the possibilities of all the non-fixed cells of the row, at once. Then we can repeat this <em>pruning</em> step for all the rows of the grid (and columns and sub-grids too! We’ll see how).</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" title="1"><span class="ot">pruneCells ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Cell</span>]</a>
<a class="sourceLine" id="cb13-2" title="2">pruneCells cells <span class="fu">=</span> <span class="fu">traverse</span> pruneCell cells</a>
<a class="sourceLine" id="cb13-3" title="3">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-4" title="4">    fixeds <span class="fu">=</span> [x <span class="fu">|</span> <span class="dt">Fixed</span> x <span class="ot">&lt;-</span> cells]</a>
<a class="sourceLine" id="cb13-5" title="5"></a>
<a class="sourceLine" id="cb13-6" title="6">    pruneCell (<span class="dt">Possible</span> xs) <span class="fu">=</span> <span class="kw">case</span> xs <span class="dt">Data.List</span><span class="fu">.</span>\\ fixeds <span class="kw">of</span></a>
<a class="sourceLine" id="cb13-7" title="7">      []  <span class="ot">-&gt;</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb13-8" title="8">      [y] <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="fu">$</span> <span class="dt">Fixed</span> y</a>
<a class="sourceLine" id="cb13-9" title="9">      ys  <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="fu">$</span> <span class="dt">Possible</span> ys</a>
<a class="sourceLine" id="cb13-10" title="10">    pruneCell x <span class="fu">=</span> <span class="dt">Just</span> x</a></code></pre></div>
<p><code>pruneCells</code> prunes a list of cells as described before. We start with finding the fixed digits in the list of cells. Then we go over each non-fixed cells, removing the fixed digits we found, from their possible values. Two special cases arise:</p>
<ul>
<li>If pruning results in a cell with no possible digits, it is a sign that this branch of search has no solution and hence, we return a <code>Nothing</code> in that case.</li>
<li>If only one possible digit remains after pruning, then we turn that cell into a fixed cell with that digit.</li>
</ul>
<p>We use the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Traversable.html#v:traverse" target="_blank" rel="noopener"><code>traverse</code></a> function for pruning the cells so that a <code>Nothing</code> resulting from pruning one cell propagates to the entire list.</p>
<p>Let’s take it for a spin in the <em>REPL</em>:</p>
<p><small></p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb14-2" title="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGridWithPossibilities <span class="fu">$</span> [<span class="fu">head</span> grid] <span class="co">-- first row of the grid</span></a>
<a class="sourceLine" id="cb14-3" title="3"><span class="dv">6</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">1</span>           [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb14-4" title="4"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGridWithPossibilities [fromJust <span class="fu">$</span> pruneCells <span class="fu">$</span> <span class="fu">head</span> grid] <span class="co">-- same row after pruning</span></a>
<a class="sourceLine" id="cb14-5" title="5"><span class="dv">6</span>           [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span> <span class="dv">789</span>]</a></code></pre></div>
<p></small></p>
<p>It works! <code>6</code> and <code>1</code> are removed from the possibilities of the other cells. Now we are ready for …</p>
<h2 id="pruning-the-grid" data-track-content data-content-name="pruning-the-grid" data-content-piece="fast-sudoku-solver-in-haskell-1">Pruning the Grid<a href="#pruning-the-grid" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Pruning a grid requires us to prune each row, each column and each sub-grid. Let’s try to solve it in the <em>REPL</em> first:</p>
<p><small></p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb15-2" title="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid' <span class="fu">=</span> <span class="fu">traverse</span> pruneCells grid</a>
<a class="sourceLine" id="cb15-3" title="3"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGridWithPossibilities grid'</a>
<a class="sourceLine" id="cb15-4" title="4"><span class="dv">6</span>           [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span> <span class="dv">789</span>]</a>
<a class="sourceLine" id="cb15-5" title="5"><span class="dv">4</span>           [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>]</a>
<a class="sourceLine" id="cb15-6" title="6">[<span class="dv">1</span> <span class="dv">3456789</span>] <span class="dv">2</span>           [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>]</a>
<a class="sourceLine" id="cb15-7" title="7">[<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">5</span>           [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">4</span>           [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb15-8" title="8">[<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] <span class="dv">8</span>           [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] <span class="dv">3</span>           [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb15-9" title="9">[ <span class="dv">2345678</span> ] [ <span class="dv">2345678</span> ] <span class="dv">1</span>           [ <span class="dv">2345678</span> ] <span class="dv">9</span>           [ <span class="dv">2345678</span> ] [ <span class="dv">2345678</span> ] [ <span class="dv">2345678</span> ] [ <span class="dv">2345678</span> ]</a>
<a class="sourceLine" id="cb15-10" title="10"><span class="dv">3</span>           [<span class="dv">1</span>   <span class="dv">56789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] <span class="dv">4</span>           [<span class="dv">1</span>   <span class="dv">56789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] <span class="dv">2</span>           [<span class="dv">1</span>   <span class="dv">56789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>]</a>
<a class="sourceLine" id="cb15-11" title="11">[ <span class="dv">234</span> <span class="dv">6789</span>] <span class="dv">5</span>           [ <span class="dv">234</span> <span class="dv">6789</span>] <span class="dv">1</span>           [ <span class="dv">234</span> <span class="dv">6789</span>] [ <span class="dv">234</span> <span class="dv">6789</span>] [ <span class="dv">234</span> <span class="dv">6789</span>] [ <span class="dv">234</span> <span class="dv">6789</span>] [ <span class="dv">234</span> <span class="dv">6789</span>]</a>
<a class="sourceLine" id="cb15-12" title="12">[<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">6</span>           [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>]</a></code></pre></div>
<p></small></p>
<p>By <code>traverse</code>-ing the grid with <code>pruneCells</code>, we are able to prune each row, one-by-one. Since pruning a row doesn’t affect another row, we don’t have to pass the resulting rows between each pruning step. That is to say, <code>traverse</code> is enough for us, we don’t need <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Foldable.html#v:foldl" target="_blank" rel="noopener"><code>foldl</code></a> here.</p>
<p>How do we do the same thing for columns now? Since our representation for the grid is rows-first, we first need to convert it to a columns-first representation. Luckily, that’s what <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-List.html#v:transpose" target="_blank" rel="noopener"><code>Data.List.transpose</code></a> function does:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;693784512487512936125963874932651487568247391741398625319475268856129743274836159&quot;</span></a>
<a class="sourceLine" id="cb16-2" title="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGrid grid</a>
<a class="sourceLine" id="cb16-3" title="3"><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb16-4" title="4"><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span></a>
<a class="sourceLine" id="cb16-5" title="5"><span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb16-6" title="6"><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb16-7" title="7"><span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb16-8" title="8"><span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb16-9" title="9"><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span></a>
<a class="sourceLine" id="cb16-10" title="10"><span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb16-11" title="11"><span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></a>
<a class="sourceLine" id="cb16-12" title="12"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGrid <span class="fu">$</span> Data.List.transpose grid</a>
<a class="sourceLine" id="cb16-13" title="13"><span class="dv">6</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb16-14" title="14"><span class="dv">9</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb16-15" title="15"><span class="dv">3</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">8</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb16-16" title="16"><span class="dv">7</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">3</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">8</span></a>
<a class="sourceLine" id="cb16-17" title="17"><span class="dv">8</span> <span class="dv">1</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">4</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">2</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb16-18" title="18"><span class="dv">4</span> <span class="dv">2</span> <span class="dv">3</span> <span class="dv">1</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span></a>
<a class="sourceLine" id="cb16-19" title="19"><span class="dv">5</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">7</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb16-20" title="20"><span class="dv">1</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">9</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">4</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb16-21" title="21"><span class="dv">2</span> <span class="dv">6</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">9</span></a></code></pre></div>
<p>Pruning columns is easy now:</p>
<p><small></p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb17-2" title="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid' <span class="fu">=</span> <span class="fu">fmap</span> Data.List.transpose <span class="fu">.</span> <span class="fu">traverse</span> pruneCells <span class="fu">.</span> Data.List.transpose <span class="fu">$</span> grid</a>
<a class="sourceLine" id="cb17-3" title="3"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGridWithPossibilities grid'</a>
<a class="sourceLine" id="cb17-4" title="4"><span class="dv">6</span>           [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] <span class="dv">1</span>           [<span class="dv">123456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb17-5" title="5"><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb17-6" title="6">[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb17-7" title="7">[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] <span class="dv">5</span>           [<span class="dv">12345</span> <span class="dv">789</span>] <span class="dv">4</span>           [ <span class="dv">23456789</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb17-8" title="8">[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] <span class="dv">8</span>           [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] <span class="dv">3</span>           [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb17-9" title="9">[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] <span class="dv">1</span>           [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] <span class="dv">9</span>           [<span class="dv">12345</span> <span class="dv">789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb17-10" title="10"><span class="dv">3</span>           [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] <span class="dv">4</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] <span class="dv">2</span>           [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb17-11" title="11">[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">234567</span> <span class="dv">9</span>] <span class="dv">1</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb17-12" title="12">[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] <span class="dv">8</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">56789</span>] [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</a></code></pre></div>
<p></small></p>
<p>First, we <code>transpose</code> the grid to convert the columns into rows. Then, we prune the rows by <code>traverse</code>-ing <code>pruneCells</code> over them. And finally, we turn the rows back into columns by <code>transpose</code>-ing the grid back again. The last <code>transpose</code> needs to be <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Prelude.html#v:fmap" target="_blank" rel="noopener"><code>fmap</code></a>-ped because <code>traverse pruneCells</code> returns a <code>Maybe</code>.</p>
<p>Pruning sub-grids is a bit trickier. Following the same idea as pruning columns, we need two functions to transform the sub-grids into rows and back. Let’s write the first one:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" title="1"><span class="ot">subGridsToRows ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb18-2" title="2">subGridsToRows <span class="fu">=</span></a>
<a class="sourceLine" id="cb18-3" title="3">  <span class="fu">concatMap</span> (\rows <span class="ot">-&gt;</span> <span class="kw">let</span> [r1, r2, r3] <span class="fu">=</span> <span class="fu">map</span> (Data.List.Split.chunksOf <span class="dv">3</span>) rows</a>
<a class="sourceLine" id="cb18-4" title="4">                      <span class="kw">in</span> <span class="fu">zipWith3</span> (\a b c <span class="ot">-&gt;</span> a <span class="fu">++</span> b <span class="fu">++</span> c) r1 r2 r3)</a>
<a class="sourceLine" id="cb18-5" title="5">  <span class="fu">.</span> Data.List.Split.chunksOf <span class="dv">3</span></a></code></pre></div>
<p>And try it out:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;693784512487512936125963874932651487568247391741398625319475268856129743274836159&quot;</span></a>
<a class="sourceLine" id="cb19-2" title="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGrid grid</a>
<a class="sourceLine" id="cb19-3" title="3"><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb19-4" title="4"><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span></a>
<a class="sourceLine" id="cb19-5" title="5"><span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb19-6" title="6"><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb19-7" title="7"><span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb19-8" title="8"><span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb19-9" title="9"><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span></a>
<a class="sourceLine" id="cb19-10" title="10"><span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb19-11" title="11"><span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></a>
<a class="sourceLine" id="cb19-12" title="12"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGrid <span class="fu">$</span> subGridsToRows grid</a>
<a class="sourceLine" id="cb19-13" title="13"><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb19-14" title="14"><span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb19-15" title="15"><span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb19-16" title="16"><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb19-17" title="17"><span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span></a>
<a class="sourceLine" id="cb19-18" title="18"><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb19-19" title="19"><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb19-20" title="20"><span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span></a>
<a class="sourceLine" id="cb19-21" title="21"><span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></a></code></pre></div>
<p>You can go over the code and the output and make yourself sure that it works. Also, it turns out that we don’t need to write the back-transform function. <code>subGridsToRows</code> is its own back-transform:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGrid grid</a>
<a class="sourceLine" id="cb20-2" title="2"><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb20-3" title="3"><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span></a>
<a class="sourceLine" id="cb20-4" title="4"><span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb20-5" title="5"><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb20-6" title="6"><span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb20-7" title="7"><span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb20-8" title="8"><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span></a>
<a class="sourceLine" id="cb20-9" title="9"><span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb20-10" title="10"><span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></a>
<a class="sourceLine" id="cb20-11" title="11"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGrid <span class="fu">$</span> subGridsToRows <span class="fu">$</span> subGridsToRows <span class="fu">$</span> grid</a>
<a class="sourceLine" id="cb20-12" title="12"><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb20-13" title="13"><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span></a>
<a class="sourceLine" id="cb20-14" title="14"><span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb20-15" title="15"><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb20-16" title="16"><span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb20-17" title="17"><span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb20-18" title="18"><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span></a>
<a class="sourceLine" id="cb20-19" title="19"><span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb20-20" title="20"><span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></a></code></pre></div>
<p>Nice! Now writing the sub-grid pruning function is easy:</p>
<p><small></p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb21-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb21-2" title="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid' <span class="fu">=</span> <span class="fu">fmap</span> subGridsToRows <span class="fu">.</span> <span class="fu">traverse</span> pruneCells <span class="fu">.</span> subGridsToRows <span class="fu">$</span> grid</a>
<a class="sourceLine" id="cb21-3" title="3"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGridWithPossibilities grid'</a>
<a class="sourceLine" id="cb21-4" title="4"><span class="dv">6</span>           [<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [ <span class="dv">23456789</span>] <span class="dv">1</span>           [ <span class="dv">23456789</span>]</a>
<a class="sourceLine" id="cb21-5" title="5"><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [ <span class="dv">23456789</span>] [ <span class="dv">23456789</span>] [ <span class="dv">23456789</span>]</a>
<a class="sourceLine" id="cb21-6" title="6">[<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [ <span class="dv">23456789</span>] [ <span class="dv">23456789</span>] [ <span class="dv">23456789</span>]</a>
<a class="sourceLine" id="cb21-7" title="7">[ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] [<span class="dv">1234</span> <span class="dv">678</span> ] <span class="dv">5</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] <span class="dv">4</span>           [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb21-8" title="8">[ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] <span class="dv">8</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">1234</span> <span class="dv">678</span> ] <span class="dv">3</span>           [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb21-9" title="9">[ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] <span class="dv">1</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] <span class="dv">9</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb21-10" title="10"><span class="dv">3</span>           [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] <span class="dv">4</span>           [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">2</span>           [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>]</a>
<a class="sourceLine" id="cb21-11" title="11">[<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] <span class="dv">5</span>           [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] <span class="dv">1</span>           [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>]</a>
<a class="sourceLine" id="cb21-12" title="12">[<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] <span class="dv">8</span>           [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">6</span>           [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>]</a></code></pre></div>
<p></small></p>
<p>It works well. Now we can string together these three steps to prune the entire grid. We also have to make sure that result of pruning each step is fed into the next step. This is so that the fixed cells created into one step cause more pruning in the further steps. We use monadic bind (<a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/Control-Monad.html#v:-62--62--61-" target="_blank" rel="noopener"><code>&gt;&gt;=</code></a>) for that. Here’s the final code:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb22-1" title="1"><span class="ot">pruneGrid' ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb22-2" title="2">pruneGrid' grid <span class="fu">=</span></a>
<a class="sourceLine" id="cb22-3" title="3">  <span class="fu">traverse</span> pruneCells grid</a>
<a class="sourceLine" id="cb22-4" title="4">  <span class="fu">&gt;&gt;=</span> <span class="fu">fmap</span> Data.List.transpose <span class="fu">.</span> <span class="fu">traverse</span> pruneCells <span class="fu">.</span> Data.List.transpose</a>
<a class="sourceLine" id="cb22-5" title="5">  <span class="fu">&gt;&gt;=</span> <span class="fu">fmap</span> subGridsToRows <span class="fu">.</span> <span class="fu">traverse</span> pruneCells <span class="fu">.</span> subGridsToRows</a></code></pre></div>
<p>And the test: <small></p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb23-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb23-2" title="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid' <span class="fu">=</span> pruneGrid' grid</a>
<a class="sourceLine" id="cb23-3" title="3"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGridWithPossibilities grid'</a>
<a class="sourceLine" id="cb23-4" title="4"><span class="dv">6</span>           [  <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">234</span>  <span class="dv">78</span> ] [ <span class="dv">2345</span> <span class="dv">789</span>] [    <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span>  <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb23-5" title="5"><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">123</span>  <span class="dv">678</span> ] [<span class="dv">123</span> <span class="dv">5</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb23-6" title="6">[<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">3</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">678</span> ] [<span class="dv">1</span> <span class="dv">345</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [  <span class="dv">3456789</span>] [  <span class="dv">3456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb23-7" title="7">[ <span class="dv">2</span>      <span class="dv">9</span>] [  <span class="dv">3</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>   ] <span class="dv">5</span>           [<span class="dv">123</span>    <span class="dv">8</span> ] <span class="dv">4</span>           [ <span class="dv">2</span>   <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb23-8" title="8">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [   <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">2</span>   <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span>  <span class="dv">7</span>  ] <span class="dv">3</span>           [ <span class="dv">2</span>  <span class="dv">56</span>  <span class="dv">9</span>] [<span class="dv">12</span>  <span class="dv">56</span>  <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb23-9" title="9">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span>  ] [  <span class="dv">34</span> <span class="dv">67</span>  ] <span class="dv">1</span>           [ <span class="dv">23</span>  <span class="dv">67</span>  ] <span class="dv">9</span>           [ <span class="dv">234</span>  <span class="dv">78</span> ] [    <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ]</a>
<a class="sourceLine" id="cb23-10" title="10"><span class="dv">3</span>           [<span class="dv">1</span>    <span class="dv">6789</span>] [     <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">4</span>           <span class="dv">7</span>           [    <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">2</span>           [    <span class="dv">56789</span>] [<span class="dv">1</span>   <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb23-11" title="11">[ <span class="dv">2</span>    <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">2</span> <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">1</span>           [ <span class="dv">23</span>   <span class="dv">7</span>  ] [ <span class="dv">23</span>   <span class="dv">7</span> <span class="dv">9</span>] [     <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb23-12" title="12">[<span class="dv">12</span>    <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span>  <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">2</span> <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">23</span>   <span class="dv">7</span>  ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">345</span>   <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb23-13" title="13"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGrid grid</a>
<a class="sourceLine" id="cb23-14" title="14"><span class="dv">6</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-15" title="15"><span class="dv">4</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-16" title="16"><span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-17" title="17"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">4</span> <span class="fu">.</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb23-18" title="18"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-19" title="19"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="dv">9</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-20" title="20"><span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">4</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-21" title="21"><span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-22" title="22"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="dv">6</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-23" title="23"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGrid grid'</a>
<a class="sourceLine" id="cb23-24" title="24"><span class="dv">6</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-25" title="25"><span class="dv">4</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-26" title="26"><span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-27" title="27"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">4</span> <span class="fu">.</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb23-28" title="28"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-29" title="29"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="dv">9</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-30" title="30"><span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">4</span> <span class="dv">7</span> <span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-31" title="31"><span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-32" title="32"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="dv">6</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a></code></pre></div>
<p></small></p>
<p>We can clearly see the massive pruning of possibilities all around the grid. We also see a <code>7</code> pop up in the row-7-column-5 cell. This means that we can prune the grid further, until it settles. If you are familiar with Haskell, you may recognize this as trying to find a <a href="https://en.wikipedia.org/wiki/Fixed_point_%28mathematics%29" target="_blank" rel="noopener">fixed point</a> for the <code>pruneGrid'</code> function, except in a monadic context. It is simple to implement:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb24-1" title="1"><span class="ot">pruneGrid ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb24-2" title="2">pruneGrid <span class="fu">=</span> fixM pruneGrid'</a>
<a class="sourceLine" id="cb24-3" title="3">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb24-4" title="4">    fixM f x <span class="fu">=</span> f x <span class="fu">&gt;&gt;=</span> \x' <span class="ot">-&gt;</span> <span class="kw">if</span> x' <span class="fu">==</span> x <span class="kw">then</span> <span class="fu">return</span> x <span class="kw">else</span> fixM f x'</a></code></pre></div>
<p>The crux of this code is the <code>fixM</code> function. It takes a monadic function <code>f</code> and an initial value, and recursively calls itself till the return value settles. Let’s do another round in the <em>REPL</em>:</p>
<p><small></p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb25-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb25-2" title="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid' <span class="fu">=</span> pruneGrid grid</a>
<a class="sourceLine" id="cb25-3" title="3"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGridWithPossibilities grid'</a>
<a class="sourceLine" id="cb25-4" title="4"><span class="dv">6</span>           [  <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">234</span>   <span class="dv">8</span> ] [ <span class="dv">2345</span> <span class="dv">789</span>] [    <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span>  <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb25-5" title="5"><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">123</span> <span class="dv">5</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb25-6" title="6">[<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">3</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">1</span> <span class="dv">345</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [  <span class="dv">3456789</span>] [  <span class="dv">3456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb25-7" title="7">[ <span class="dv">2</span>      <span class="dv">9</span>] [  <span class="dv">3</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>   ] <span class="dv">5</span>           [<span class="dv">123</span>    <span class="dv">8</span> ] <span class="dv">4</span>           [ <span class="dv">2</span>   <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb25-8" title="8">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [   <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">2</span>   <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6</span>   ] [<span class="dv">12</span> <span class="dv">4</span>  <span class="dv">7</span>  ] <span class="dv">3</span>           [ <span class="dv">2</span>  <span class="dv">56</span>  <span class="dv">9</span>] [<span class="dv">12</span>  <span class="dv">56</span>  <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb25-9" title="9">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span>  ] [  <span class="dv">34</span> <span class="dv">67</span>  ] <span class="dv">1</span>           [ <span class="dv">23</span>  <span class="dv">67</span>  ] <span class="dv">9</span>           [ <span class="dv">234</span>  <span class="dv">78</span> ] [    <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ]</a>
<a class="sourceLine" id="cb25-10" title="10"><span class="dv">3</span>           [<span class="dv">1</span>    <span class="dv">6</span> <span class="dv">89</span>] [     <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">4</span>           <span class="dv">7</span>           [    <span class="dv">5</span>   <span class="dv">9</span>] <span class="dv">2</span>           [    <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">1</span>   <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb25-11" title="11">[ <span class="dv">2</span>    <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">2</span> <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">1</span>           [ <span class="dv">23</span>      ] [ <span class="dv">23</span>     <span class="dv">9</span>] [     <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb25-12" title="12">[<span class="dv">12</span>    <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span>  <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">2</span> <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">23</span>      ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">345</span>   <span class="dv">9</span>]</a></code></pre></div>
<p></small></p>
<p>We see that <code>7</code> in the row-7-column-5 cell is eliminated from all its neighboring cells. We can’t prune the grid anymore. Now it is time to make the choice.</p>
<h2 id="making-the-choice" data-track-content data-content-name="making-the-choice" data-content-piece="fast-sudoku-solver-in-haskell-1">Making the Choice<a href="#making-the-choice" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>One the grid is settled, we need to choose a non-fixed cell and make it fixed by assuming one of its possible values. This gives us two grids, next in the state-space of the solution search:</p>
<ul>
<li>one which has this chosen cell fixed to this chosen digit, and,</li>
<li>the other in which the chosen cell has all the other possibilities except the one we chose to fix.</li>
</ul>
<p>We call this function, <code>nextGrids</code>:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb26-1" title="1"><span class="ot">nextGrids ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> (<span class="dt">Grid</span>, <span class="dt">Grid</span>)</a>
<a class="sourceLine" id="cb26-2" title="2">nextGrids grid <span class="fu">=</span></a>
<a class="sourceLine" id="cb26-3" title="3">  <span class="kw">let</span> (i, first<span class="fu">@</span>(<span class="dt">Fixed</span> _), rest) <span class="fu">=</span></a>
<a class="sourceLine" id="cb26-4" title="4">        fixCell</a>
<a class="sourceLine" id="cb26-5" title="5">        <span class="fu">.</span> Data.List.minimumBy (<span class="fu">compare</span> <span class="ot">`Data.Function.on`</span> (possibilityCount <span class="fu">.</span> <span class="fu">snd</span>))</a>
<a class="sourceLine" id="cb26-6" title="6">        <span class="fu">.</span> <span class="fu">filter</span> (isPossible <span class="fu">.</span> <span class="fu">snd</span>)</a>
<a class="sourceLine" id="cb26-7" title="7">        <span class="fu">.</span> <span class="fu">zip</span> [<span class="dv">0</span><span class="fu">..</span>]</a>
<a class="sourceLine" id="cb26-8" title="8">        <span class="fu">.</span> <span class="fu">concat</span></a>
<a class="sourceLine" id="cb26-9" title="9">        <span class="fu">$</span> grid</a>
<a class="sourceLine" id="cb26-10" title="10">  <span class="kw">in</span> (replace2D i first grid, replace2D i rest grid)</a>
<a class="sourceLine" id="cb26-11" title="11">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb26-12" title="12">    isPossible (<span class="dt">Possible</span> _) <span class="fu">=</span> <span class="dt">True</span></a>
<a class="sourceLine" id="cb26-13" title="13">    isPossible _            <span class="fu">=</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb26-14" title="14"></a>
<a class="sourceLine" id="cb26-15" title="15">    possibilityCount (<span class="dt">Possible</span> xs) <span class="fu">=</span> <span class="fu">length</span> xs</a>
<a class="sourceLine" id="cb26-16" title="16">    possibilityCount (<span class="dt">Fixed</span> _)     <span class="fu">=</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb26-17" title="17"></a>
<a class="sourceLine" id="cb26-18" title="18">    fixCell (i, <span class="dt">Possible</span> [x, y]) <span class="fu">=</span> (i, <span class="dt">Fixed</span> x, <span class="dt">Fixed</span> y)</a>
<a class="sourceLine" id="cb26-19" title="19">    fixCell (i, <span class="dt">Possible</span> (x<span class="fu">:</span>xs)) <span class="fu">=</span> (i, <span class="dt">Fixed</span> x, <span class="dt">Possible</span> xs)</a>
<a class="sourceLine" id="cb26-20" title="20">    fixCell _                    <span class="fu">=</span> <span class="fu">error</span> <span class="st">&quot;Impossible case&quot;</span></a>
<a class="sourceLine" id="cb26-21" title="21"></a>
<a class="sourceLine" id="cb26-22" title="22"><span class="ot">    replace2D ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> [[a]] <span class="ot">-&gt;</span> [[a]]</a>
<a class="sourceLine" id="cb26-23" title="23">    replace2D i v <span class="fu">=</span></a>
<a class="sourceLine" id="cb26-24" title="24">      <span class="kw">let</span> (x, y) <span class="fu">=</span> (i <span class="ot">`quot`</span> <span class="dv">9</span>, i <span class="ot">`mod`</span> <span class="dv">9</span>) <span class="kw">in</span> replace x (replace y (<span class="fu">const</span> v))</a>
<a class="sourceLine" id="cb26-25" title="25">    replace p f xs <span class="fu">=</span> [<span class="kw">if</span> i <span class="fu">==</span> p <span class="kw">then</span> f x <span class="kw">else</span> x <span class="fu">|</span> (x, i) <span class="ot">&lt;-</span> <span class="fu">zip</span> xs [<span class="dv">0</span><span class="fu">..</span>]]</a></code></pre></div>
<p>We choose the non-fixed cell with least count of possibilities as the pivot. This strategy make sense intuitively, as with a cell with fewest possibilities, we have the most chance of being right when assuming one. Fixing a non-fixed cell leads to one of the two cases:</p>
<ol type="a">
<li>the cell has only two possible values, resulting in two fixed cells, or,</li>
<li>the cell has more than two possible values, resulting in one fixed and one non-fixed cell.</li>
</ol>
<p>Then all we are left with is replacing the non-fixed cell with its fixed and fixed/non-fixed choices, which we do with some math and some list traversal. A quick check on the <em>REPL</em>:</p>
<p><small></p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb27-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb27-2" title="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid' <span class="fu">=</span> pruneGrid grid</a>
<a class="sourceLine" id="cb27-3" title="3"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGridWithPossibilities grid'</a>
<a class="sourceLine" id="cb27-4" title="4"><span class="dv">6</span>           [  <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">234</span>   <span class="dv">8</span> ] [ <span class="dv">2345</span> <span class="dv">789</span>] [    <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span>  <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-5" title="5"><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">123</span> <span class="dv">5</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-6" title="6">[<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">3</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">1</span> <span class="dv">345</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [  <span class="dv">3456789</span>] [  <span class="dv">3456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-7" title="7">[ <span class="dv">2</span>      <span class="dv">9</span>] [  <span class="dv">3</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>   ] <span class="dv">5</span>           [<span class="dv">123</span>    <span class="dv">8</span> ] <span class="dv">4</span>           [ <span class="dv">2</span>   <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb27-8" title="8">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [   <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">2</span>   <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6</span>   ] [<span class="dv">12</span> <span class="dv">4</span>  <span class="dv">7</span>  ] <span class="dv">3</span>           [ <span class="dv">2</span>  <span class="dv">56</span>  <span class="dv">9</span>] [<span class="dv">12</span>  <span class="dv">56</span>  <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb27-9" title="9">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span>  ] [  <span class="dv">34</span> <span class="dv">67</span>  ] <span class="dv">1</span>           [ <span class="dv">23</span>  <span class="dv">67</span>  ] <span class="dv">9</span>           [ <span class="dv">234</span>  <span class="dv">78</span> ] [    <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ]</a>
<a class="sourceLine" id="cb27-10" title="10"><span class="dv">3</span>           [<span class="dv">1</span>    <span class="dv">6</span> <span class="dv">89</span>] [     <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">4</span>           <span class="dv">7</span>           [    <span class="dv">5</span>   <span class="dv">9</span>] <span class="dv">2</span>           [    <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">1</span>   <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-11" title="11">[ <span class="dv">2</span>    <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">2</span> <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">1</span>           [ <span class="dv">23</span>      ] [ <span class="dv">23</span>     <span class="dv">9</span>] [     <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-12" title="12">[<span class="dv">12</span>    <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span>  <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">2</span> <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">23</span>      ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">345</span>   <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb27-13" title="13"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="co">-- the row-4-column-1 cell is the first cell with only two possibilities, [2, 9].</span></a>
<a class="sourceLine" id="cb27-14" title="14"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="co">-- it is chosen as the pivot cell to find the next grids.</span></a>
<a class="sourceLine" id="cb27-15" title="15"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> (grid1, grid2) <span class="fu">=</span> nextGrids grid'</a>
<a class="sourceLine" id="cb27-16" title="16"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGridWithPossibilities grid1</a>
<a class="sourceLine" id="cb27-17" title="17"><span class="dv">6</span>           [  <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">234</span>   <span class="dv">8</span> ] [ <span class="dv">2345</span> <span class="dv">789</span>] [    <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span>  <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-18" title="18"><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">123</span> <span class="dv">5</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-19" title="19">[<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">3</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">1</span> <span class="dv">345</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [  <span class="dv">3456789</span>] [  <span class="dv">3456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-20" title="20"><span class="dv">2</span>           [  <span class="dv">3</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>   ] <span class="dv">5</span>           [<span class="dv">123</span>    <span class="dv">8</span> ] <span class="dv">4</span>           [ <span class="dv">2</span>   <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb27-21" title="21">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [   <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">2</span>   <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6</span>   ] [<span class="dv">12</span> <span class="dv">4</span>  <span class="dv">7</span>  ] <span class="dv">3</span>           [ <span class="dv">2</span>  <span class="dv">56</span>  <span class="dv">9</span>] [<span class="dv">12</span>  <span class="dv">56</span>  <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb27-22" title="22">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span>  ] [  <span class="dv">34</span> <span class="dv">67</span>  ] <span class="dv">1</span>           [ <span class="dv">23</span>  <span class="dv">67</span>  ] <span class="dv">9</span>           [ <span class="dv">234</span>  <span class="dv">78</span> ] [    <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ]</a>
<a class="sourceLine" id="cb27-23" title="23"><span class="dv">3</span>           [<span class="dv">1</span>    <span class="dv">6</span> <span class="dv">89</span>] [     <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">4</span>           <span class="dv">7</span>           [    <span class="dv">5</span>   <span class="dv">9</span>] <span class="dv">2</span>           [    <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">1</span>   <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-24" title="24">[ <span class="dv">2</span>    <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">2</span> <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">1</span>           [ <span class="dv">23</span>      ] [ <span class="dv">23</span>     <span class="dv">9</span>] [     <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-25" title="25">[<span class="dv">12</span>    <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span>  <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">2</span> <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">23</span>      ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">345</span>   <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb27-26" title="26"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGridWithPossibilities grid2</a>
<a class="sourceLine" id="cb27-27" title="27"><span class="dv">6</span>           [  <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">234</span>   <span class="dv">8</span> ] [ <span class="dv">2345</span> <span class="dv">789</span>] [    <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span>  <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-28" title="28"><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">123</span> <span class="dv">5</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-29" title="29">[<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">3</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">1</span> <span class="dv">345</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [  <span class="dv">3456789</span>] [  <span class="dv">3456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-30" title="30"><span class="dv">9</span>           [  <span class="dv">3</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>   ] <span class="dv">5</span>           [<span class="dv">123</span>    <span class="dv">8</span> ] <span class="dv">4</span>           [ <span class="dv">2</span>   <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb27-31" title="31">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [   <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">2</span>   <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6</span>   ] [<span class="dv">12</span> <span class="dv">4</span>  <span class="dv">7</span>  ] <span class="dv">3</span>           [ <span class="dv">2</span>  <span class="dv">56</span>  <span class="dv">9</span>] [<span class="dv">12</span>  <span class="dv">56</span>  <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb27-32" title="32">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span>  ] [  <span class="dv">34</span> <span class="dv">67</span>  ] <span class="dv">1</span>           [ <span class="dv">23</span>  <span class="dv">67</span>  ] <span class="dv">9</span>           [ <span class="dv">234</span>  <span class="dv">78</span> ] [    <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ]</a>
<a class="sourceLine" id="cb27-33" title="33"><span class="dv">3</span>           [<span class="dv">1</span>    <span class="dv">6</span> <span class="dv">89</span>] [     <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">4</span>           <span class="dv">7</span>           [    <span class="dv">5</span>   <span class="dv">9</span>] <span class="dv">2</span>           [    <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">1</span>   <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-34" title="34">[ <span class="dv">2</span>    <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">2</span> <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">1</span>           [ <span class="dv">23</span>      ] [ <span class="dv">23</span>     <span class="dv">9</span>] [     <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-35" title="35">[<span class="dv">12</span>    <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span>  <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">2</span> <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">23</span>      ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">345</span>   <span class="dv">9</span>]</a></code></pre></div>
<p></small></p>
<h2 id="solving-the-puzzle" data-track-content data-content-name="solving-the-puzzle" data-content-piece="fast-sudoku-solver-in-haskell-1">Solving the Puzzle<a href="#solving-the-puzzle" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>We have implemented parts of our algorithm till now. Now we’ll put everything together to solve the puzzle. First, we need to know if we are done or have messed up:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb28-1" title="1"><span class="ot">isGridFilled ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb28-2" title="2">isGridFilled grid <span class="fu">=</span> <span class="fu">null</span> [ () <span class="fu">|</span> <span class="dt">Possible</span> _ <span class="ot">&lt;-</span> <span class="fu">concat</span> grid ]</a>
<a class="sourceLine" id="cb28-3" title="3"></a>
<a class="sourceLine" id="cb28-4" title="4"><span class="ot">isGridInvalid ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb28-5" title="5">isGridInvalid grid <span class="fu">=</span></a>
<a class="sourceLine" id="cb28-6" title="6">  <span class="fu">any</span> isInvalidRow grid</a>
<a class="sourceLine" id="cb28-7" title="7">  <span class="fu">||</span> <span class="fu">any</span> isInvalidRow (Data.List.transpose grid)</a>
<a class="sourceLine" id="cb28-8" title="8">  <span class="fu">||</span> <span class="fu">any</span> isInvalidRow (subGridsToRows grid)</a>
<a class="sourceLine" id="cb28-9" title="9">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb28-10" title="10">    isInvalidRow row <span class="fu">=</span></a>
<a class="sourceLine" id="cb28-11" title="11">      <span class="kw">let</span> fixeds         <span class="fu">=</span> [x <span class="fu">|</span> <span class="dt">Fixed</span> x <span class="ot">&lt;-</span> row]</a>
<a class="sourceLine" id="cb28-12" title="12">          emptyPossibles <span class="fu">=</span> [x <span class="fu">|</span> <span class="dt">Possible</span> x <span class="ot">&lt;-</span> row, <span class="fu">null</span> x]</a>
<a class="sourceLine" id="cb28-13" title="13">      <span class="kw">in</span> hasDups fixeds <span class="fu">||</span> <span class="fu">not</span> (<span class="fu">null</span> emptyPossibles)</a>
<a class="sourceLine" id="cb28-14" title="14"></a>
<a class="sourceLine" id="cb28-15" title="15">    hasDups l <span class="fu">=</span> hasDups' l []</a>
<a class="sourceLine" id="cb28-16" title="16"></a>
<a class="sourceLine" id="cb28-17" title="17">    hasDups' [] _ <span class="fu">=</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb28-18" title="18">    hasDups' (y<span class="fu">:</span>ys) xs</a>
<a class="sourceLine" id="cb28-19" title="19">      <span class="fu">|</span> y <span class="ot">`elem`</span> xs <span class="fu">=</span> <span class="dt">True</span></a>
<a class="sourceLine" id="cb28-20" title="20">      <span class="fu">|</span> <span class="fu">otherwise</span>   <span class="fu">=</span> hasDups' ys (y<span class="fu">:</span>xs)</a></code></pre></div>
<p><code>isGridFilled</code> returns whether a grid is filled completely by checking it for any <code>Possible</code> cells. <code>isGridInvalid</code> checks if a grid is invalid because it either has duplicate fixed cells in any block or has any non-fixed cell with no possibilities.</p>
<p>Writing the <code>solve</code> function is almost trivial now:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb29-1" title="1"><span class="ot">solve ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb29-2" title="2">solve grid <span class="fu">=</span> pruneGrid grid <span class="fu">&gt;&gt;=</span> solve'</a>
<a class="sourceLine" id="cb29-3" title="3">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb29-4" title="4">    solve' g</a>
<a class="sourceLine" id="cb29-5" title="5">      <span class="fu">|</span> isGridInvalid g <span class="fu">=</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb29-6" title="6">      <span class="fu">|</span> isGridFilled g  <span class="fu">=</span> <span class="dt">Just</span> g</a>
<a class="sourceLine" id="cb29-7" title="7">      <span class="fu">|</span> <span class="fu">otherwise</span>       <span class="fu">=</span></a>
<a class="sourceLine" id="cb29-8" title="8">          <span class="kw">let</span> (grid1, grid2) <span class="fu">=</span> nextGrids g</a>
<a class="sourceLine" id="cb29-9" title="9">          <span class="kw">in</span> solve grid1 <span class="fu">&lt;|&gt;</span> solve grid2</a></code></pre></div>
<p>We prune the grid as before and pipe it to the helper function <code>solve'</code>. <code>solve'</code> bails with a <code>Nothing</code> if the grid is invalid, or returns the solved grid if it is filled completely. Otherwise, it finds the next two grids in the search tree and solves them recursively with backtracking by calling the <code>solve</code> function. Backtracking here is implemented by the using the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Control-Applicative.html#g:2" target="_blank" rel="noopener"><code>Alternative</code></a> (<code>&lt;|&gt;</code>) implementation of the <code>Maybe</code> type<a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a>. It takes the second branch in the computation if the first branch returns a <code>Nothing</code>.</p>
<p>Whew! That took us long. Let’s put it to the final test now:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb31-1" title="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span></a>
<a class="sourceLine" id="cb31-2" title="2">  readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb31-3" title="3"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGrid grid</a>
<a class="sourceLine" id="cb31-4" title="4"><span class="dv">6</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb31-5" title="5"><span class="dv">4</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb31-6" title="6"><span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb31-7" title="7"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">4</span> <span class="fu">.</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb31-8" title="8"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb31-9" title="9"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="dv">9</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb31-10" title="10"><span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">4</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb31-11" title="11"><span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb31-12" title="12"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="dv">6</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb31-13" title="13"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid' <span class="fu">=</span> solve grid</a>
<a class="sourceLine" id="cb31-14" title="14"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">putStr</span> <span class="fu">$</span> showGrid grid'</a>
<a class="sourceLine" id="cb31-15" title="15"><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb31-16" title="16"><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span></a>
<a class="sourceLine" id="cb31-17" title="17"><span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb31-18" title="18"><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb31-19" title="19"><span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb31-20" title="20"><span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb31-21" title="21"><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span></a>
<a class="sourceLine" id="cb31-22" title="22"><span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb31-23" title="23"><span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></a></code></pre></div>
<p>It works! Let’s put a quick <code>main</code> wrapper around <code>solve</code> to call it from the command line:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb32-1" title="1"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb32-2" title="2">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb32-3" title="3">  inputs <span class="ot">&lt;-</span> <span class="fu">lines</span> <span class="fu">&lt;$&gt;</span> <span class="fu">getContents</span></a>
<a class="sourceLine" id="cb32-4" title="4">  Control.Monad.forM_ inputs <span class="fu">$</span> \input <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb32-5" title="5">    <span class="kw">case</span> readGrid input <span class="kw">of</span></a>
<a class="sourceLine" id="cb32-6" title="6">      <span class="dt">Nothing</span>   <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="st">&quot;Invalid input&quot;</span></a>
<a class="sourceLine" id="cb32-7" title="7">      <span class="dt">Just</span> grid <span class="ot">-&gt;</span> <span class="kw">case</span> solve grid <span class="kw">of</span></a>
<a class="sourceLine" id="cb32-8" title="8">        <span class="dt">Nothing</span>    <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="st">&quot;No solution found&quot;</span></a>
<a class="sourceLine" id="cb32-9" title="9">        <span class="dt">Just</span> grid' <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="fu">$</span> showGrid grid'</a></code></pre></div>
<p>And now, we can invoke it from the command line:</p>
<pre class="plain"><code>$ echo &quot;.......12.5.4............3.7..6..4....1..........8....92....8.....51.7.......3...&quot; | stack exec sudoku
3 6 4 9 7 8 5 1 2
1 5 2 4 3 6 9 7 8
8 7 9 1 2 5 6 3 4
7 3 8 6 5 1 4 2 9
6 9 1 2 4 7 3 8 5
2 4 5 3 8 9 1 6 7
9 2 3 7 6 4 8 5 1
4 8 6 5 1 2 7 9 3
5 1 7 8 9 3 2 4 6</code></pre>
<p>And, we are done.</p>
<p>If you want to play with different puzzles, the file <a href="https://abhinavsarkar.net/files/sudoku17.txt.bz2">here</a> lists some of the toughest ones. Let’s run<a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a> some of them through our program to see how fast it is:</p>
<pre class="plain"><code>$ head -n100 sudoku17.txt | time stack exec sudoku
... output omitted ...
      116.70 real       198.09 user        94.46 sys</code></pre>
<p>It took about 117 seconds to solve a hundred puzzles, so, about 1.2 seconds per puzzle. This is pretty slow but we’ll get around to making it faster in the subsequent posts.</p>
<h2 id="conclusion" data-track-content data-content-name="conclusion" data-content-piece="fast-sudoku-solver-in-haskell-1">Conclusion<a href="#conclusion" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>In this rather verbose article, we learned how to write a simple Sudoku solver in Haskell step-by-step. In the later parts of this series, we’ll delve into profiling the solution and figuring out better algorithms and data structures to solve Sudoku more efficiently. The code till now is available <a href="https://code.abhinavsarkar.net/abhin4v/hasdoku/src/commit/0ef77341a10fcc25926301ee47b931d92959c0fa" target="_blank" rel="noopener">here</a>. Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/8uapij/fast_sudoku_solver_in_haskell/" target="_blank" rel="noopener">r/haskell</a> or <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/#comment-container">leave a comment</a>.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>This exercise was originally done as a part of <a href="https://github.com/pratul/haskell-classes/" target="_blank" rel="noopener">the</a> <a href="https://github.com/ford-prefect/haskell-classes/" target="_blank" rel="noopener">Haskell</a> <a href="https://github.com/bnvinay92/haskell-classes/" target="_blank" rel="noopener">classes</a> I taught at <a href="https://nilenso.com" target="_blank" rel="noopener">nilenso</a>.<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p><code>Alternative</code> implementation of <code>Maybe</code>:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb30-1" title="1"><span class="kw">instance</span> <span class="dt">Alternative</span> <span class="dt">Maybe</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb30-2" title="2">  empty <span class="fu">=</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb30-3" title="3">  <span class="dt">Nothing</span> <span class="fu">&lt;|&gt;</span> r <span class="fu">=</span> r</a>
<a class="sourceLine" id="cb30-4" title="4">  l       <span class="fu">&lt;|&gt;</span> _ <span class="fu">=</span> l</a></code></pre></div>
<a href="#fnref2" class="footnote-back">↩</a></li>
<li id="fn3"><p>All the runs were done on my MacBook Pro from 2014 with 2.2 GHz Intel Core i7 CPU and 16 GB memory.<a href="#fnref3" class="footnote-back">↩</a></p></li>
</ol>
</section><p>If you liked this post, please <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/#comment-container">leave a comment</a>.</p><img src="https://anna.abhinavsarkar.net/piwik.php?idsite=1&amp;rec=1" style="border:0; display: none;" />]]></summary>
</entry>
<entry>
    <title>Writing a Simple REST Web Service in PureScript - Part 2</title>
    <link rel="alternate" href="https://abhinavsarkar.net/posts/ps-simple-rest-service-2/" />
    <id>https://abhinavsarkar.net/posts/ps-simple-rest-service-2/</id>
    <published>2017-10-01T00:00:00Z</published>
    <updated>2017-10-01T00:00:00Z</updated>
    
    <author>
        <name>Abhinav Sarkar</name>
        <email>abhinav@abhinavsarkar.net</email>
        <uri>https://abhinavsarkar.net/about/</uri>
    </author>
    
    
    <category term="purescript" />
    
    <category term="REST" />
    
    <category term="programming" />
    
    <category term="nilenso" />
    
    <summary type="html"><![CDATA[<p>To recap, in the <a href="https://abhinavsarkar.net/posts/ps-simple-rest-service/">first</a> part of this two-part tutorial, we built a simple JSON <a href="https://en.wikipedia.org/wiki/REST" target="_blank" rel="noopener">REST</a> web service in <a href="http://purescript.org" target="_blank" rel="noopener">PureScript</a> to create, update, get, list and delete users, backed by a Postgres database. In this part we’ll work on the rest of the features. <!--more--> The requirements are:</p>
<ol type="1">
<li>validation of API requests.</li>
<li>reading the server and database configs from environment variables.</li>
<li>logging HTTP requests and debugging info.</li>
</ol>
<nav id="toc" class="right-toc"><h3>Contents</h3><ol><li><a href="#bugs">Bugs!</a></li><li><a href="#validation">Validation</a></li><li><a href="#configuration">Configuration</a></li><li><a href="#logging">Logging</a></li><li><a href="#conclusion">Conclusion</a></li></ol></nav>
<p>But first,</p>
<h2 id="bugs" data-track-content data-content-name="bugs" data-content-piece="ps-simple-rest-service-2">Bugs!<a href="#bugs" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>What happens if we hit a URL on our server which does not exist? Let’s fire up the server and test it:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb1-1" title="1">$ <span class="ex">pulp</span> --watch run</a></code></pre></div>
<pre class="http"><code>$ http GET http://localhost:4000/v1/random
HTTP/1.1 404 Not Found
Connection: keep-alive
Content-Length: 148
Content-Security-Policy: default-src 'self'
Content-Type: text/html; charset=utf-8
Date: Sat, 30 Sep 2017 08:23:20 GMT
X-Content-Type-Options: nosniff
X-Powered-By: Express

&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Error&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;pre&gt;Cannot GET /v1/random&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>We get back a default HTML response with a 404 status from <a href="https://expressjs.com" target="_blank" rel="noopener">Express</a>. Since we are writing a JSON API, we should return a JSON response in this case too. We add the following code in the <code>src/SimpleService/Server.purs</code> file to add a catch-all route and send a 404 status with a JSON error message:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="kw">import</span> <span class="dt">Data.Either</span> (fromRight)</a>
<a class="sourceLine" id="cb3-3" title="3"><span class="kw">import</span> <span class="dt">Data.String.Regex</span> (<span class="dt">Regex</span>, regex) <span class="kw">as</span> <span class="dt">Re</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="kw">import</span> <span class="dt">Data.String.Regex.Flags</span> (noFlags) <span class="kw">as</span> <span class="dt">Re</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="kw">import</span> <span class="dt">Node.Express.App</span> (<span class="dt">App</span>, all, delete, get, http, listenHttp, post, useExternal)</a>
<a class="sourceLine" id="cb3-6" title="6"><span class="kw">import</span> <span class="dt">Node.Express.Response</span> (sendJson, setStatus)</a>
<a class="sourceLine" id="cb3-7" title="7"><span class="kw">import</span> <span class="dt">Partial.Unsafe</span> (unsafePartial)</a>
<a class="sourceLine" id="cb3-8" title="8"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb3-9" title="9"></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="ot">allRoutePattern ::</span> <span class="dt">Re.Regex</span></a>
<a class="sourceLine" id="cb3-11" title="11">allRoutePattern <span class="fu">=</span> unsafePartial <span class="fu">$</span> fromRight <span class="fu">$</span> Re.regex <span class="st">&quot;/.*&quot;</span> Re.noFlags</a>
<a class="sourceLine" id="cb3-12" title="12"></a>
<a class="sourceLine" id="cb3-13" title="13"><span class="ot">app ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb3-14" title="14">app pool <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-15" title="15">  useExternal jsonBodyParser</a>
<a class="sourceLine" id="cb3-16" title="16"></a>
<a class="sourceLine" id="cb3-17" title="17">  get <span class="st">&quot;/v1/user/:id&quot;</span>    <span class="fu">$</span> getUser pool</a>
<a class="sourceLine" id="cb3-18" title="18">  delete <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> deleteUser pool</a>
<a class="sourceLine" id="cb3-19" title="19">  post <span class="st">&quot;/v1/users&quot;</span>      <span class="fu">$</span> createUser pool</a>
<a class="sourceLine" id="cb3-20" title="20">  patch <span class="st">&quot;/v1/user/:id&quot;</span>  <span class="fu">$</span> updateUser pool</a>
<a class="sourceLine" id="cb3-21" title="21">  get <span class="st">&quot;/v1/users&quot;</span>       <span class="fu">$</span> listUsers pool</a>
<a class="sourceLine" id="cb3-22" title="22"></a>
<a class="sourceLine" id="cb3-23" title="23">  <span class="fu">all</span> allRoutePattern <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-24" title="24">    setStatus <span class="dv">404</span></a>
<a class="sourceLine" id="cb3-25" title="25">    sendJson {<span class="fu">error:</span> <span class="st">&quot;Route not found&quot;</span>}</a>
<a class="sourceLine" id="cb3-26" title="26">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-27" title="27">    patch <span class="fu">=</span> http (<span class="dt">CustomMethod</span> <span class="st">&quot;patch&quot;</span>)</a></code></pre></div>
<p><code>allRoutePattern</code> matches all routes because it uses a <code>"/.*"</code> <a href="https://en.wikipedia.org/wiki/Regular_expression" target="_blank" rel="noopener">regular expression</a>. We place it as the last route to match all the otherwise unrouted requests. Let’s see what is the result:</p>
<pre class="http"><code>$ http GET http://localhost:4000/v1/random
HTTP/1.1 404 Not Found
Connection: keep-alive
Content-Length: 27
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 08:46:46 GMT
ETag: W/&quot;1b-772e0u4nrE48ogbR0KmKfSvrHUE&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;Route not found&quot;
}</code></pre>
<p>Now we get a nicely formatted JSON response.</p>
<p>Another scenario is when our application throws some uncaught error. To simulate this, we shut down our postgres database and hit the server for listing users:</p>
<pre class="http"><code>$ http GET http://localhost:4000/v1/users
HTTP/1.1 500 Internal Server Error
Connection: keep-alive
Content-Length: 372
Content-Security-Policy: default-src 'self'
Content-Type: text/html; charset=utf-8
Date: Sat, 30 Sep 2017 08:53:40 GMT
X-Content-Type-Options: nosniff
X-Powered-By: Express

&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Error&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;pre&gt;Error: connect ECONNREFUSED 127.0.0.1:5432&lt;br&gt; &amp;nbsp; &amp;nbsp;at Object._errnoException (util.js:1026:11)&lt;br&gt; &amp;nbsp; &amp;nbsp;at _exceptionWithHostPort (util.js:1049:20)&lt;br&gt; &amp;nbsp; &amp;nbsp;at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1174:14)&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>We get another default HTML response from Express with a 500 status. Again, in this case we’d like to return a JSON response. We add the following code to the <code>src/SimpleService/Server.purs</code> file:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" title="1"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb6-2" title="2"><span class="kw">import</span> <span class="dt">Control.Monad.Eff.Exception</span> (message)</a>
<a class="sourceLine" id="cb6-3" title="3"><span class="kw">import</span> <span class="dt">Node.Express.App</span> (<span class="dt">App</span>, all, delete, get, http, listenHttp, post, useExternal, useOnError)</a>
<a class="sourceLine" id="cb6-4" title="4"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb6-5" title="5"></a>
<a class="sourceLine" id="cb6-6" title="6"><span class="ot">app ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb6-7" title="7">app pool <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb6-8" title="8">  <span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb6-9" title="9">  useOnError \err <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb6-10" title="10">    setStatus <span class="dv">500</span></a>
<a class="sourceLine" id="cb6-11" title="11">    sendJson {<span class="fu">error:</span> message err}</a>
<a class="sourceLine" id="cb6-12" title="12">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-13" title="13">    patch <span class="fu">=</span> http (<span class="dt">CustomMethod</span> <span class="st">&quot;patch&quot;</span>)</a></code></pre></div>
<p>We add the <code>useOnError</code> handler which comes with <a href="https://pursuit.purescript.org/packages/purescript-express" target="_blank" rel="noopener"><code>purescript-express</code></a> to return the error message as a JSON response. Back on the command-line:</p>
<pre class="http"><code>$ http GET http://localhost:4000/v1/users
HTTP/1.1 500 Internal Server Error
Connection: keep-alive
Content-Length: 47
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 09:01:37 GMT
ETag: W/&quot;2f-cJuIW6961YCpo9TWDSZ9VWHLGHE&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;connect ECONNREFUSED 127.0.0.1:5432&quot;
}</code></pre>
<p>It works! Bugs are fixed now. We proceed to add next features.</p>
<h2 id="validation" data-track-content data-content-name="validation" data-content-piece="ps-simple-rest-service-2">Validation<a href="#validation" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Let’s recall the code to update a user from the <code>src/SimpleService/Handler.purs</code> file:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1"><span class="ot">updateUser ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb8-2" title="2">updateUser pool <span class="fu">=</span> getRouteParam <span class="st">&quot;id&quot;</span> <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb8-3" title="3">  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { <span class="fu">error:</span> <span class="st">&quot;User ID is required&quot;</span> }</a>
<a class="sourceLine" id="cb8-4" title="4">  <span class="dt">Just</span> sUserId <span class="ot">-&gt;</span> <span class="kw">case</span> fromString sUserId <span class="kw">of</span></a>
<a class="sourceLine" id="cb8-5" title="5">    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { <span class="fu">error:</span> <span class="st">&quot;User ID must be positive: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }</a>
<a class="sourceLine" id="cb8-6" title="6">    <span class="dt">Just</span> userId <span class="ot">-&gt;</span> getBody <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb8-7" title="7">      <span class="dt">Left</span> errs <span class="ot">-&gt;</span> respond <span class="dv">422</span> { <span class="fu">error:</span> intercalate <span class="st">&quot;, &quot;</span> <span class="fu">$</span> <span class="fu">map</span> renderForeignError errs}</a>
<a class="sourceLine" id="cb8-8" title="8">      <span class="dt">Right</span> (<span class="dt">UserPatch</span> userPatch) <span class="ot">-&gt;</span> <span class="kw">case</span> unNullOrUndefined userPatch<span class="fu">.</span>name <span class="kw">of</span></a>
<a class="sourceLine" id="cb8-9" title="9">        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respondNoContent <span class="dv">204</span></a>
<a class="sourceLine" id="cb8-10" title="10">        <span class="dt">Just</span> userName <span class="ot">-&gt;</span> <span class="kw">if</span> userName <span class="fu">==</span> <span class="st">&quot;&quot;</span></a>
<a class="sourceLine" id="cb8-11" title="11">          <span class="kw">then</span> respond <span class="dv">422</span> { <span class="fu">error:</span> <span class="st">&quot;User name must not be empty&quot;</span> }</a>
<a class="sourceLine" id="cb8-12" title="12">          <span class="kw">else</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-13" title="13">            savedUser <span class="ot">&lt;-</span> liftAff <span class="fu">$</span> PG.withConnection pool \conn <span class="ot">-&gt;</span> PG.withTransaction conn <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-14" title="14">              P.findUser conn userId <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb8-15" title="15">                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">pure</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb8-16" title="16">                <span class="dt">Just</span> (<span class="dt">User</span> user) <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-17" title="17">                  <span class="kw">let</span> user' <span class="fu">=</span> <span class="dt">User</span> (user { name <span class="fu">=</span> userName })</a>
<a class="sourceLine" id="cb8-18" title="18">                  P.updateUser conn user'</a>
<a class="sourceLine" id="cb8-19" title="19">                  <span class="fu">pure</span> <span class="fu">$</span> <span class="dt">Just</span> user'</a>
<a class="sourceLine" id="cb8-20" title="20">            <span class="kw">case</span> savedUser <span class="kw">of</span></a>
<a class="sourceLine" id="cb8-21" title="21">              <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">404</span> { <span class="fu">error:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }</a>
<a class="sourceLine" id="cb8-22" title="22">              <span class="dt">Just</span> user <span class="ot">-&gt;</span> respond <span class="dv">200</span> (encode user)</a></code></pre></div>
<p>As we can see, the actual request handling logic is obfuscated by the request validation logic for the user id and the user name patch parameters. We also notice that we are using three constructs for validation here: <code>Maybe</code>, <code>Either</code> and <code>if-then-else</code>. However, we can use just <code>Either</code> to subsume all these cases as it can “carry” a failure as well as a success case. <code>Either</code> also comes with a nice monad transformer <a href="https://pursuit.purescript.org/packages/purescript-transformers/3.4.0/docs/Control.Monad.Except.Trans#t:ExceptT" target="_blank" rel="noopener"><code>ExceptT</code></a> which provides the <code>do</code> syntax for failure propagation. So we choose <code>ExceptT</code> as the base construct for our validation framework and write functions to upgrade <code>Maybe</code> and <code>if-then-else</code> to it. We add the following code to the <code>src/SimpleService/Validation.purs</code> file:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" title="1"><span class="kw">module</span> <span class="dt">SimpleService.Validation</span></a>
<a class="sourceLine" id="cb9-2" title="2">  (<span class="kw">module</span> <span class="dt">MoreExports</span>, <span class="kw">module</span> <span class="dt">SimpleService.Validation</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-3" title="3"></a>
<a class="sourceLine" id="cb9-4" title="4"><span class="kw">import</span> <span class="dt">Prelude</span></a>
<a class="sourceLine" id="cb9-5" title="5"></a>
<a class="sourceLine" id="cb9-6" title="6"><span class="kw">import</span> <span class="dt">Control.Monad.Except</span> (<span class="dt">ExceptT</span>, except, runExceptT)</a>
<a class="sourceLine" id="cb9-7" title="7"><span class="kw">import</span> <span class="dt">Data.Either</span> (<span class="dt">Either</span>(..))</a>
<a class="sourceLine" id="cb9-8" title="8"><span class="kw">import</span> <span class="dt">Data.Maybe</span> (<span class="dt">Maybe</span>(..))</a>
<a class="sourceLine" id="cb9-9" title="9"><span class="kw">import</span> <span class="dt">Node.Express.Handler</span> (<span class="dt">HandlerM</span>, <span class="dt">Handler</span>)</a>
<a class="sourceLine" id="cb9-10" title="10"><span class="kw">import</span> <span class="dt">Node.Express.Response</span> (sendJson, setStatus)</a>
<a class="sourceLine" id="cb9-11" title="11"><span class="kw">import</span> <span class="dt">Node.Express.Types</span> (<span class="dt">EXPRESS</span>)</a>
<a class="sourceLine" id="cb9-12" title="12"><span class="kw">import</span> <span class="dt">Control.Monad.Except</span> (except) <span class="kw">as</span> <span class="dt">MoreExports</span></a>
<a class="sourceLine" id="cb9-13" title="13"></a>
<a class="sourceLine" id="cb9-14" title="14"><span class="kw">type</span> <span class="dt">Validation</span> eff a <span class="fu">=</span> <span class="dt">ExceptT</span> <span class="dt">String</span> (<span class="dt">HandlerM</span> (<span class="ot">express ::</span> <span class="dt">EXPRESS</span> <span class="fu">|</span> eff)) a</a>
<a class="sourceLine" id="cb9-15" title="15"></a>
<a class="sourceLine" id="cb9-16" title="16"><span class="ot">exceptMaybe ::</span> <span class="kw">forall</span> e m a<span class="fu">.</span> <span class="dt">Applicative</span> m <span class="ot">=&gt;</span> e <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">ExceptT</span> e m a</a>
<a class="sourceLine" id="cb9-17" title="17">exceptMaybe e a <span class="fu">=</span> except <span class="fu">$</span> <span class="kw">case</span> a <span class="kw">of</span></a>
<a class="sourceLine" id="cb9-18" title="18">  <span class="dt">Just</span> x  <span class="ot">-&gt;</span> <span class="dt">Right</span> x</a>
<a class="sourceLine" id="cb9-19" title="19">  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Left</span> e</a>
<a class="sourceLine" id="cb9-20" title="20"></a>
<a class="sourceLine" id="cb9-21" title="21"><span class="ot">exceptCond ::</span> <span class="kw">forall</span> e m a<span class="fu">.</span> <span class="dt">Applicative</span> m <span class="ot">=&gt;</span> e <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Boolean</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">ExceptT</span> e m a</a>
<a class="sourceLine" id="cb9-22" title="22">exceptCond e cond a <span class="fu">=</span> except <span class="fu">$</span> <span class="kw">if</span> cond a <span class="kw">then</span> <span class="dt">Right</span> a <span class="kw">else</span> <span class="dt">Left</span> e</a>
<a class="sourceLine" id="cb9-23" title="23"></a>
<a class="sourceLine" id="cb9-24" title="24"><span class="ot">withValidation ::</span> <span class="kw">forall</span> eff a<span class="fu">.</span> <span class="dt">Validation</span> eff a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Handler</span> eff) <span class="ot">-&gt;</span> <span class="dt">Handler</span> eff</a>
<a class="sourceLine" id="cb9-25" title="25">withValidation action handler <span class="fu">=</span> runExceptT action <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb9-26" title="26">  <span class="dt">Left</span> err <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb9-27" title="27">    setStatus <span class="dv">422</span></a>
<a class="sourceLine" id="cb9-28" title="28">    sendJson {<span class="fu">error:</span> err}</a>
<a class="sourceLine" id="cb9-29" title="29">  <span class="dt">Right</span> x  <span class="ot">-&gt;</span> handler x</a></code></pre></div>
<p>We re-export <code>except</code> from the <code>Control.Monad.Except</code> module. We also add a <code>withValidation</code> function which runs an <code>ExceptT</code> based validation and either returns an error response with a 422 status in case of a failed validation or runs the given action with the valid value in case of a successful validation.</p>
<p>Using these functions, we now write <code>updateUser</code> in the <code>src/SimpleService/Handler.purs</code> file as:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" title="1"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb10-2" title="2"><span class="kw">import</span> <span class="dt">Control.Monad.Trans.Class</span> (lift)</a>
<a class="sourceLine" id="cb10-3" title="3"><span class="kw">import</span> <span class="dt">Data.Bifunctor</span> (lmap)</a>
<a class="sourceLine" id="cb10-4" title="4"><span class="kw">import</span> <span class="dt">Data.Foreign</span> (<span class="dt">ForeignError</span>, renderForeignError)</a>
<a class="sourceLine" id="cb10-5" title="5"><span class="kw">import</span> <span class="dt">Data.List.NonEmpty</span> (toList)</a>
<a class="sourceLine" id="cb10-6" title="6"><span class="kw">import</span> <span class="dt">Data.List.Types</span> (<span class="dt">NonEmptyList</span>)</a>
<a class="sourceLine" id="cb10-7" title="7"><span class="kw">import</span> <span class="dt">Data.Tuple</span> (<span class="dt">Tuple</span>(..))</a>
<a class="sourceLine" id="cb10-8" title="8"><span class="kw">import</span> <span class="dt">SimpleService.Validation</span> <span class="kw">as</span> <span class="dt">V</span></a>
<a class="sourceLine" id="cb10-9" title="9"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb10-10" title="10"></a>
<a class="sourceLine" id="cb10-11" title="11"><span class="ot">renderForeignErrors ::</span> <span class="kw">forall</span> a<span class="fu">.</span> <span class="dt">Either</span> (<span class="dt">NonEmptyList</span> <span class="dt">ForeignError</span>) a <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">String</span> a</a>
<a class="sourceLine" id="cb10-12" title="12">renderForeignErrors <span class="fu">=</span> lmap (toList <span class="fu">&gt;&gt;&gt;</span> <span class="fu">map</span> renderForeignError <span class="fu">&gt;&gt;&gt;</span> intercalate <span class="st">&quot;, &quot;</span>)</a>
<a class="sourceLine" id="cb10-13" title="13"></a>
<a class="sourceLine" id="cb10-14" title="14"><span class="ot">updateUser ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb10-15" title="15">updateUser pool <span class="fu">=</span> V.withValidation (<span class="dt">Tuple</span> <span class="fu">&lt;$&gt;</span> getUserId <span class="fu">&lt;*&gt;</span> getUserPatch)</a>
<a class="sourceLine" id="cb10-16" title="16">                                   \(<span class="dt">Tuple</span> userId (<span class="dt">UserPatch</span> userPatch)) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb10-17" title="17">    <span class="kw">case</span> unNullOrUndefined userPatch<span class="fu">.</span>name <span class="kw">of</span></a>
<a class="sourceLine" id="cb10-18" title="18">      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respondNoContent <span class="dv">204</span></a>
<a class="sourceLine" id="cb10-19" title="19">      <span class="dt">Just</span> uName <span class="ot">-&gt;</span> V.withValidation (getUserName uName) \userName <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb10-20" title="20">        savedUser <span class="ot">&lt;-</span> liftAff <span class="fu">$</span> PG.withConnection pool \conn <span class="ot">-&gt;</span> PG.withTransaction conn <span class="kw">do</span></a>
<a class="sourceLine" id="cb10-21" title="21">          P.findUser conn userId <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb10-22" title="22">            <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">pure</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb10-23" title="23">            <span class="dt">Just</span> (<span class="dt">User</span> user) <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb10-24" title="24">              <span class="kw">let</span> user' <span class="fu">=</span> <span class="dt">User</span> (user { name <span class="fu">=</span> userName })</a>
<a class="sourceLine" id="cb10-25" title="25">              P.updateUser conn user'</a>
<a class="sourceLine" id="cb10-26" title="26">              <span class="fu">pure</span> <span class="fu">$</span> <span class="dt">Just</span> user'</a>
<a class="sourceLine" id="cb10-27" title="27">        <span class="kw">case</span> savedUser <span class="kw">of</span></a>
<a class="sourceLine" id="cb10-28" title="28">          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">404</span> { <span class="fu">error:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> <span class="fu">show</span> userId }</a>
<a class="sourceLine" id="cb10-29" title="29">          <span class="dt">Just</span> user <span class="ot">-&gt;</span> respond <span class="dv">200</span> (encode user)</a>
<a class="sourceLine" id="cb10-30" title="30">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-31" title="31">    getUserId <span class="fu">=</span> lift (getRouteParam <span class="st">&quot;id&quot;</span>)</a>
<a class="sourceLine" id="cb10-32" title="32">      <span class="fu">&gt;&gt;=</span> V.exceptMaybe <span class="st">&quot;User ID is required&quot;</span></a>
<a class="sourceLine" id="cb10-33" title="33">      <span class="fu">&gt;&gt;=</span> fromString <span class="fu">&gt;&gt;&gt;</span> V.exceptMaybe <span class="st">&quot;User ID must be positive&quot;</span></a>
<a class="sourceLine" id="cb10-34" title="34"></a>
<a class="sourceLine" id="cb10-35" title="35">    getUserPatch <span class="fu">=</span> lift getBody <span class="fu">&gt;&gt;=</span> V.except <span class="fu">&lt;&lt;&lt;</span> renderForeignErrors</a>
<a class="sourceLine" id="cb10-36" title="36"></a>
<a class="sourceLine" id="cb10-37" title="37">    getUserName <span class="fu">=</span> V.exceptCond <span class="st">&quot;User name must not be empty&quot;</span> (_ <span class="fu">==</span> <span class="st">&quot;&quot;</span>)</a></code></pre></div>
<p>The validation logic has been extracted out in separate functions now which are composed using <a href="https://pursuit.purescript.org/packages/purescript-prelude/3.0.0/docs/Control.Applicative#t:Applicative" target="_blank" rel="noopener">Applicative</a>. The validation steps are composed using the <code>ExceptT</code> monad. We are now free to express the core logic of the function clearly. We rewrite the <code>src/SimpleService/Handler.purs</code> file using the validations:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" title="1"><span class="kw">module</span> <span class="dt">SimpleService.Handler</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-2" title="2"></a>
<a class="sourceLine" id="cb11-3" title="3"><span class="kw">import</span> <span class="dt">Prelude</span></a>
<a class="sourceLine" id="cb11-4" title="4"></a>
<a class="sourceLine" id="cb11-5" title="5"><span class="kw">import</span> <span class="dt">Control.Monad.Aff.Class</span> (liftAff)</a>
<a class="sourceLine" id="cb11-6" title="6"><span class="kw">import</span> <span class="dt">Control.Monad.Trans.Class</span> (lift)</a>
<a class="sourceLine" id="cb11-7" title="7"><span class="kw">import</span> <span class="dt">Data.Bifunctor</span> (lmap)</a>
<a class="sourceLine" id="cb11-8" title="8"><span class="kw">import</span> <span class="dt">Data.Either</span> (<span class="dt">Either</span>)</a>
<a class="sourceLine" id="cb11-9" title="9"><span class="kw">import</span> <span class="dt">Data.Foldable</span> (intercalate)</a>
<a class="sourceLine" id="cb11-10" title="10"><span class="kw">import</span> <span class="dt">Data.Foreign</span> (<span class="dt">ForeignError</span>, renderForeignError)</a>
<a class="sourceLine" id="cb11-11" title="11"><span class="kw">import</span> <span class="dt">Data.Foreign.Class</span> (encode)</a>
<a class="sourceLine" id="cb11-12" title="12"><span class="kw">import</span> <span class="dt">Data.Foreign.NullOrUndefined</span> (unNullOrUndefined)</a>
<a class="sourceLine" id="cb11-13" title="13"><span class="kw">import</span> <span class="dt">Data.Int</span> (fromString)</a>
<a class="sourceLine" id="cb11-14" title="14"><span class="kw">import</span> <span class="dt">Data.List.NonEmpty</span> (toList)</a>
<a class="sourceLine" id="cb11-15" title="15"><span class="kw">import</span> <span class="dt">Data.List.Types</span> (<span class="dt">NonEmptyList</span>)</a>
<a class="sourceLine" id="cb11-16" title="16"><span class="kw">import</span> <span class="dt">Data.Maybe</span> (<span class="dt">Maybe</span>(..))</a>
<a class="sourceLine" id="cb11-17" title="17"><span class="kw">import</span> <span class="dt">Data.Tuple</span> (<span class="dt">Tuple</span>(..))</a>
<a class="sourceLine" id="cb11-18" title="18"><span class="kw">import</span> <span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span></a>
<a class="sourceLine" id="cb11-19" title="19"><span class="kw">import</span> <span class="dt">Node.Express.Handler</span> (<span class="dt">Handler</span>)</a>
<a class="sourceLine" id="cb11-20" title="20"><span class="kw">import</span> <span class="dt">Node.Express.Request</span> (getBody, getRouteParam)</a>
<a class="sourceLine" id="cb11-21" title="21"><span class="kw">import</span> <span class="dt">Node.Express.Response</span> (end, sendJson, setStatus)</a>
<a class="sourceLine" id="cb11-22" title="22"><span class="kw">import</span> <span class="dt">SimpleService.Persistence</span> <span class="kw">as</span> <span class="dt">P</span></a>
<a class="sourceLine" id="cb11-23" title="23"><span class="kw">import</span> <span class="dt">SimpleService.Validation</span> <span class="kw">as</span> <span class="dt">V</span></a>
<a class="sourceLine" id="cb11-24" title="24"><span class="kw">import</span> <span class="dt">SimpleService.Types</span></a>
<a class="sourceLine" id="cb11-25" title="25"></a>
<a class="sourceLine" id="cb11-26" title="26"><span class="ot">getUser ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb11-27" title="27">getUser pool <span class="fu">=</span> V.withValidation getUserId \userId <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb11-28" title="28">  liftAff (PG.withConnection pool <span class="fu">$</span> <span class="fu">flip</span> P.findUser userId) <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb11-29" title="29">    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">404</span> { <span class="fu">error:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> <span class="fu">show</span> userId }</a>
<a class="sourceLine" id="cb11-30" title="30">    <span class="dt">Just</span> user <span class="ot">-&gt;</span> respond <span class="dv">200</span> (encode user)</a>
<a class="sourceLine" id="cb11-31" title="31"></a>
<a class="sourceLine" id="cb11-32" title="32"><span class="ot">deleteUser ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb11-33" title="33">deleteUser pool <span class="fu">=</span> V.withValidation getUserId \userId <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb11-34" title="34">  found <span class="ot">&lt;-</span> liftAff <span class="fu">$</span> PG.withConnection pool \conn <span class="ot">-&gt;</span> PG.withTransaction conn <span class="kw">do</span></a>
<a class="sourceLine" id="cb11-35" title="35">    P.findUser conn userId <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb11-36" title="36">      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">pure</span> false</a>
<a class="sourceLine" id="cb11-37" title="37">      <span class="dt">Just</span> _  <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb11-38" title="38">        P.deleteUser conn userId</a>
<a class="sourceLine" id="cb11-39" title="39">        <span class="fu">pure</span> true</a>
<a class="sourceLine" id="cb11-40" title="40">  <span class="kw">if</span> found</a>
<a class="sourceLine" id="cb11-41" title="41">    <span class="kw">then</span> respondNoContent <span class="dv">204</span></a>
<a class="sourceLine" id="cb11-42" title="42">    <span class="kw">else</span> respond <span class="dv">404</span> { <span class="fu">error:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> <span class="fu">show</span> userId }</a>
<a class="sourceLine" id="cb11-43" title="43"></a>
<a class="sourceLine" id="cb11-44" title="44"><span class="ot">createUser ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb11-45" title="45">createUser pool <span class="fu">=</span> V.withValidation getUser \user<span class="fu">@</span>(<span class="dt">User</span> _) <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb11-46" title="46">  liftAff (PG.withConnection pool <span class="fu">$</span> <span class="fu">flip</span> P.insertUser user)</a>
<a class="sourceLine" id="cb11-47" title="47">  respondNoContent <span class="dv">201</span></a>
<a class="sourceLine" id="cb11-48" title="48">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-49" title="49">    getUser <span class="fu">=</span> lift getBody</a>
<a class="sourceLine" id="cb11-50" title="50">      <span class="fu">&gt;&gt;=</span> V.except <span class="fu">&lt;&lt;&lt;</span> renderForeignErrors</a>
<a class="sourceLine" id="cb11-51" title="51">      <span class="fu">&gt;&gt;=</span> V.exceptCond <span class="st">&quot;User ID must be positive&quot;</span> (\(<span class="dt">User</span> user) <span class="ot">-&gt;</span> user<span class="fu">.id</span> <span class="fu">&gt;</span> <span class="dv">0</span>)</a>
<a class="sourceLine" id="cb11-52" title="52">      <span class="fu">&gt;&gt;=</span> V.exceptCond <span class="st">&quot;User name must not be empty&quot;</span> (\(<span class="dt">User</span> user) <span class="ot">-&gt;</span> user<span class="fu">.</span>name <span class="fu">/=</span> <span class="st">&quot;&quot;</span>)</a>
<a class="sourceLine" id="cb11-53" title="53"></a>
<a class="sourceLine" id="cb11-54" title="54"><span class="ot">updateUser ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb11-55" title="55">updateUser pool <span class="fu">=</span> V.withValidation (<span class="dt">Tuple</span> <span class="fu">&lt;$&gt;</span> getUserId <span class="fu">&lt;*&gt;</span> getUserPatch)</a>
<a class="sourceLine" id="cb11-56" title="56">                                   \(<span class="dt">Tuple</span> userId (<span class="dt">UserPatch</span> userPatch)) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb11-57" title="57">    <span class="kw">case</span> unNullOrUndefined userPatch<span class="fu">.</span>name <span class="kw">of</span></a>
<a class="sourceLine" id="cb11-58" title="58">      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respondNoContent <span class="dv">204</span></a>
<a class="sourceLine" id="cb11-59" title="59">      <span class="dt">Just</span> uName <span class="ot">-&gt;</span> V.withValidation (getUserName uName) \userName <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb11-60" title="60">        savedUser <span class="ot">&lt;-</span> liftAff <span class="fu">$</span> PG.withConnection pool \conn <span class="ot">-&gt;</span> PG.withTransaction conn <span class="kw">do</span></a>
<a class="sourceLine" id="cb11-61" title="61">          P.findUser conn userId <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb11-62" title="62">            <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">pure</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb11-63" title="63">            <span class="dt">Just</span> (<span class="dt">User</span> user) <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb11-64" title="64">              <span class="kw">let</span> user' <span class="fu">=</span> <span class="dt">User</span> (user { name <span class="fu">=</span> userName })</a>
<a class="sourceLine" id="cb11-65" title="65">              P.updateUser conn user'</a>
<a class="sourceLine" id="cb11-66" title="66">              <span class="fu">pure</span> <span class="fu">$</span> <span class="dt">Just</span> user'</a>
<a class="sourceLine" id="cb11-67" title="67">        <span class="kw">case</span> savedUser <span class="kw">of</span></a>
<a class="sourceLine" id="cb11-68" title="68">          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">404</span> { <span class="fu">error:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> <span class="fu">show</span> userId }</a>
<a class="sourceLine" id="cb11-69" title="69">          <span class="dt">Just</span> user <span class="ot">-&gt;</span> respond <span class="dv">200</span> (encode user)</a>
<a class="sourceLine" id="cb11-70" title="70">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-71" title="71">    getUserPatch <span class="fu">=</span> lift getBody <span class="fu">&gt;&gt;=</span> V.except <span class="fu">&lt;&lt;&lt;</span> renderForeignErrors</a>
<a class="sourceLine" id="cb11-72" title="72">    getUserName <span class="fu">=</span> V.exceptCond <span class="st">&quot;User name must not be empty&quot;</span> (_ <span class="fu">/=</span> <span class="st">&quot;&quot;</span>)</a>
<a class="sourceLine" id="cb11-73" title="73"></a>
<a class="sourceLine" id="cb11-74" title="74"><span class="ot">listUsers ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb11-75" title="75">listUsers pool <span class="fu">=</span> liftAff (PG.withConnection pool P.listUsers) <span class="fu">&gt;&gt;=</span> encode <span class="fu">&gt;&gt;&gt;</span> respond <span class="dv">200</span></a>
<a class="sourceLine" id="cb11-76" title="76"></a>
<a class="sourceLine" id="cb11-77" title="77"><span class="ot">getUserId ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">V.Validation</span> eff <span class="dt">Int</span></a>
<a class="sourceLine" id="cb11-78" title="78">getUserId <span class="fu">=</span> lift (getRouteParam <span class="st">&quot;id&quot;</span>)</a>
<a class="sourceLine" id="cb11-79" title="79">  <span class="fu">&gt;&gt;=</span> V.exceptMaybe <span class="st">&quot;User ID is required&quot;</span></a>
<a class="sourceLine" id="cb11-80" title="80">  <span class="fu">&gt;&gt;=</span> fromString <span class="fu">&gt;&gt;&gt;</span> V.exceptMaybe <span class="st">&quot;User ID must be an integer&quot;</span></a>
<a class="sourceLine" id="cb11-81" title="81">  <span class="fu">&gt;&gt;=</span> V.exceptCond <span class="st">&quot;User ID must be positive&quot;</span> (_ <span class="fu">&gt;</span> <span class="dv">0</span>)</a>
<a class="sourceLine" id="cb11-82" title="82"></a>
<a class="sourceLine" id="cb11-83" title="83"><span class="ot">renderForeignErrors ::</span> <span class="kw">forall</span> a<span class="fu">.</span> <span class="dt">Either</span> (<span class="dt">NonEmptyList</span> <span class="dt">ForeignError</span>) a <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">String</span> a</a>
<a class="sourceLine" id="cb11-84" title="84">renderForeignErrors <span class="fu">=</span> lmap (toList <span class="fu">&gt;&gt;&gt;</span> <span class="fu">map</span> renderForeignError <span class="fu">&gt;&gt;&gt;</span> intercalate <span class="st">&quot;, &quot;</span>)</a>
<a class="sourceLine" id="cb11-85" title="85"></a>
<a class="sourceLine" id="cb11-86" title="86"><span class="ot">respond ::</span> <span class="kw">forall</span> eff a<span class="fu">.</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Handler</span> eff</a>
<a class="sourceLine" id="cb11-87" title="87">respond status body <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb11-88" title="88">  setStatus status</a>
<a class="sourceLine" id="cb11-89" title="89">  sendJson body</a>
<a class="sourceLine" id="cb11-90" title="90"></a>
<a class="sourceLine" id="cb11-91" title="91"><span class="ot">respondNoContent ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> eff</a>
<a class="sourceLine" id="cb11-92" title="92">respondNoContent status <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb11-93" title="93">  setStatus status</a>
<a class="sourceLine" id="cb11-94" title="94">  end</a></code></pre></div>
<p>The code is much cleaner now. Let’s try out a few test cases:</p>
<pre class="http"><code>$ http POST http://localhost:4000/v1/users id:=3 name=roger
HTTP/1.1 201 Created
Connection: keep-alive
Content-Length: 0
Date: Sat, 30 Sep 2017 12:13:37 GMT
X-Powered-By: Express</code></pre>
<pre class="http"><code>$ http POST http://localhost:4000/v1/users id:=3
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 102
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 12:13:50 GMT
ETag: W/&quot;66-/c4cfoquQZGwtDBUzHjJydJAHJ0&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;Error at array index 0: (ErrorAtProperty \&quot;name\&quot; (TypeMismatch \&quot;String\&quot; \&quot;Undefined\&quot;))&quot;
}</code></pre>
<pre class="http"><code>$ http POST http://localhost:4000/v1/users id:=3 name=&quot;&quot;
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 39
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 12:14:02 GMT
ETag: W/&quot;27-JQsh12xu/rEFdWy8REF4NMtBUB4&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User name must not be empty&quot;
}</code></pre>
<pre class="http"><code>$ http POST http://localhost:4000/v1/users id:=0 name=roger
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 36
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 12:14:14 GMT
ETag: W/&quot;24-Pvt1L4eGilBmVtaOGHlSReJ413E&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User ID must be positive&quot;
}</code></pre>
<pre class="http"><code>$ http GET http://localhost:4000/v1/user/3
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 23
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 12:14:28 GMT
ETag: W/&quot;17-1scpiB1FT9DBu9s4I1gNWSjH2go&quot;
X-Powered-By: Express

{
    &quot;id&quot;: 3,
    &quot;name&quot;: &quot;roger&quot;
}</code></pre>
<pre class="http"><code>$ http GET http://localhost:4000/v1/user/asdf
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 38
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 12:14:40 GMT
ETag: W/&quot;26-//tvORl1gGDUMwgSaqbEpJhuadI&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User ID must be an integer&quot;
}</code></pre>
<pre class="http"><code>$ http GET http://localhost:4000/v1/user/-1
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 36
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 12:14:45 GMT
ETag: W/&quot;24-Pvt1L4eGilBmVtaOGHlSReJ413E&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User ID must be positive&quot;
}</code></pre>
<p>It works as expected.</p>
<h2 id="configuration" data-track-content data-content-name="configuration" data-content-piece="ps-simple-rest-service-2">Configuration<a href="#configuration" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Right now our application configuration resides in the <code>main</code> function:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" title="1">main <span class="fu">=</span> runServer port databaseConfig</a>
<a class="sourceLine" id="cb19-2" title="2">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb19-3" title="3">    port <span class="fu">=</span> <span class="dv">4000</span></a>
<a class="sourceLine" id="cb19-4" title="4">    databaseConfig <span class="fu">=</span> { user<span class="fu">:</span> <span class="st">&quot;abhinav&quot;</span></a>
<a class="sourceLine" id="cb19-5" title="5">                     , password<span class="fu">:</span> <span class="st">&quot;&quot;</span></a>
<a class="sourceLine" id="cb19-6" title="6">                     , host<span class="fu">:</span> <span class="st">&quot;localhost&quot;</span></a>
<a class="sourceLine" id="cb19-7" title="7">                     , port<span class="fu">:</span> <span class="dv">5432</span></a>
<a class="sourceLine" id="cb19-8" title="8">                     , database<span class="fu">:</span> <span class="st">&quot;simple_service&quot;</span></a>
<a class="sourceLine" id="cb19-9" title="9">                     , <span class="fu">max:</span> <span class="dv">10</span></a>
<a class="sourceLine" id="cb19-10" title="10">                     , idleTimeoutMillis<span class="fu">:</span> <span class="dv">1000</span></a>
<a class="sourceLine" id="cb19-11" title="11">                     }</a></code></pre></div>
<p>We are going to extract it out of the code and read it from the environment variables using the <a href="https://pursuit.purescript.org/packages/purescript-config" target="_blank" rel="noopener"><code>purescript-config</code></a> package. First, we install the required packages using <a href="http://bower.io" target="_blank" rel="noopener">bower</a>.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb20-1" title="1">$ <span class="ex">bower</span> install --save purescript-node-process purescript-config</a></code></pre></div>
<p>Now, we write the following code in the <code>src/SimpleService/Config.purs</code> file:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb21-1" title="1"><span class="kw">module</span> <span class="dt">SimpleService.Config</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb21-2" title="2"></a>
<a class="sourceLine" id="cb21-3" title="3"><span class="kw">import</span> <span class="dt">Data.Config</span></a>
<a class="sourceLine" id="cb21-4" title="4"><span class="kw">import</span> <span class="dt">Prelude</span></a>
<a class="sourceLine" id="cb21-5" title="5"></a>
<a class="sourceLine" id="cb21-6" title="6"><span class="kw">import</span> <span class="dt">Control.Monad.Eff</span> (<span class="dt">Eff</span>)</a>
<a class="sourceLine" id="cb21-7" title="7"><span class="kw">import</span> <span class="dt">Data.Config.Node</span> (fromEnv)</a>
<a class="sourceLine" id="cb21-8" title="8"><span class="kw">import</span> <span class="dt">Data.Either</span> (<span class="dt">Either</span>)</a>
<a class="sourceLine" id="cb21-9" title="9"><span class="kw">import</span> <span class="dt">Data.Set</span> (<span class="dt">Set</span>)</a>
<a class="sourceLine" id="cb21-10" title="10"><span class="kw">import</span> <span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span></a>
<a class="sourceLine" id="cb21-11" title="11"><span class="kw">import</span> <span class="dt">Node.Process</span> (<span class="dt">PROCESS</span>)</a>
<a class="sourceLine" id="cb21-12" title="12"></a>
<a class="sourceLine" id="cb21-13" title="13"><span class="kw">type</span> <span class="dt">ServerConfig</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb21-14" title="14">  {<span class="ot"> port           ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb21-15" title="15">  ,<span class="ot"> databaseConfig ::</span> <span class="dt">PG.PoolConfiguration</span></a>
<a class="sourceLine" id="cb21-16" title="16">  }</a>
<a class="sourceLine" id="cb21-17" title="17"></a>
<a class="sourceLine" id="cb21-18" title="18"><span class="ot">databaseConfig ::</span> <span class="dt">Config</span> {<span class="ot">name ::</span> <span class="dt">String</span>} <span class="dt">PG.PoolConfiguration</span></a>
<a class="sourceLine" id="cb21-19" title="19">databaseConfig <span class="fu">=</span></a>
<a class="sourceLine" id="cb21-20" title="20">  { user<span class="fu">:</span> _, password<span class="fu">:</span> _, host<span class="fu">:</span> _, port<span class="fu">:</span> _, database<span class="fu">:</span> _, <span class="fu">max:</span> _, idleTimeoutMillis<span class="fu">:</span> _ }</a>
<a class="sourceLine" id="cb21-21" title="21">  <span class="fu">&lt;$&gt;</span> string {name<span class="fu">:</span> <span class="st">&quot;user&quot;</span>}</a>
<a class="sourceLine" id="cb21-22" title="22">  <span class="fu">&lt;*&gt;</span> string {name<span class="fu">:</span> <span class="st">&quot;password&quot;</span>}</a>
<a class="sourceLine" id="cb21-23" title="23">  <span class="fu">&lt;*&gt;</span> string {name<span class="fu">:</span> <span class="st">&quot;host&quot;</span>}</a>
<a class="sourceLine" id="cb21-24" title="24">  <span class="fu">&lt;*&gt;</span> int    {name<span class="fu">:</span> <span class="st">&quot;port&quot;</span>}</a>
<a class="sourceLine" id="cb21-25" title="25">  <span class="fu">&lt;*&gt;</span> string {name<span class="fu">:</span> <span class="st">&quot;database&quot;</span>}</a>
<a class="sourceLine" id="cb21-26" title="26">  <span class="fu">&lt;*&gt;</span> int    {name<span class="fu">:</span> <span class="st">&quot;pool_size&quot;</span>}</a>
<a class="sourceLine" id="cb21-27" title="27">  <span class="fu">&lt;*&gt;</span> int    {name<span class="fu">:</span> <span class="st">&quot;idle_conn_timeout_millis&quot;</span>}</a>
<a class="sourceLine" id="cb21-28" title="28"></a>
<a class="sourceLine" id="cb21-29" title="29"><span class="ot">portConfig ::</span> <span class="dt">Config</span> {<span class="ot">name ::</span> <span class="dt">String</span>} <span class="dt">Int</span></a>
<a class="sourceLine" id="cb21-30" title="30">portConfig <span class="fu">=</span> int {name<span class="fu">:</span> <span class="st">&quot;port&quot;</span>}</a>
<a class="sourceLine" id="cb21-31" title="31"></a>
<a class="sourceLine" id="cb21-32" title="32"><span class="ot">serverConfig ::</span> <span class="dt">Config</span> {<span class="ot">name ::</span> <span class="dt">String</span>} <span class="dt">ServerConfig</span></a>
<a class="sourceLine" id="cb21-33" title="33">serverConfig <span class="fu">=</span></a>
<a class="sourceLine" id="cb21-34" title="34">  { port<span class="fu">:</span> _, databaseConfig<span class="fu">:</span> _}</a>
<a class="sourceLine" id="cb21-35" title="35">  <span class="fu">&lt;$&gt;</span> portConfig</a>
<a class="sourceLine" id="cb21-36" title="36">  <span class="fu">&lt;*&gt;</span> prefix {name<span class="fu">:</span> <span class="st">&quot;db&quot;</span>} databaseConfig</a>
<a class="sourceLine" id="cb21-37" title="37"></a>
<a class="sourceLine" id="cb21-38" title="38"><span class="ot">readServerConfig ::</span> <span class="kw">forall</span> eff<span class="fu">.</span></a>
<a class="sourceLine" id="cb21-39" title="39">                    <span class="dt">Eff</span> (<span class="ot">process ::</span> <span class="dt">PROCESS</span> <span class="fu">|</span> eff) (<span class="dt">Either</span> (<span class="dt">Set</span> <span class="dt">String</span>) <span class="dt">ServerConfig</span>)</a>
<a class="sourceLine" id="cb21-40" title="40">readServerConfig <span class="fu">=</span> fromEnv <span class="st">&quot;SS&quot;</span> serverConfig</a></code></pre></div>
<p>We use the applicative DSL provided in <code>Data.Config</code> module to build a description of our configuration. This description contains the keys and types of the configuration, for consumption by various interpreters. Then we use the <code>fromEnv</code> interpreter to read the config from the environment variables derived from the <code>name</code> fields in the records in the description in the <code>readServerConfig</code> function. We also write a bash script to set those environment variables in the development environment in the <code>setenv.sh</code> file:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb22-1" title="1"><span class="bu">export</span> <span class="va">SS_PORT=</span>4000</a>
<a class="sourceLine" id="cb22-2" title="2"><span class="bu">export</span> <span class="va">SS_DB_USER=</span><span class="st">&quot;abhinav&quot;</span></a>
<a class="sourceLine" id="cb22-3" title="3"><span class="bu">export</span> <span class="va">SS_DB_PASSWORD=</span><span class="st">&quot;&quot;</span></a>
<a class="sourceLine" id="cb22-4" title="4"><span class="bu">export</span> <span class="va">SS_DB_HOST=</span><span class="st">&quot;localhost&quot;</span></a>
<a class="sourceLine" id="cb22-5" title="5"><span class="bu">export</span> <span class="va">SS_DB_PORT=</span>5432</a>
<a class="sourceLine" id="cb22-6" title="6"><span class="bu">export</span> <span class="va">SS_DB_DATABASE=</span><span class="st">&quot;simple_service&quot;</span></a>
<a class="sourceLine" id="cb22-7" title="7"><span class="bu">export</span> <span class="va">SS_DB_POOL_SIZE=</span>10</a>
<a class="sourceLine" id="cb22-8" title="8"><span class="bu">export</span> <span class="va">SS_DB_IDLE_CONN_TIMEOUT_MILLIS=</span>1000</a></code></pre></div>
<p>Now we rewrite our <code>src/Main.purs</code> file to use the <code>readServerConfig</code> function:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb23-1" title="1"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb23-2" title="2"></a>
<a class="sourceLine" id="cb23-3" title="3"><span class="kw">import</span> <span class="dt">Prelude</span></a>
<a class="sourceLine" id="cb23-4" title="4"></a>
<a class="sourceLine" id="cb23-5" title="5"><span class="kw">import</span> <span class="dt">Control.Monad.Eff</span> (<span class="dt">Eff</span>)</a>
<a class="sourceLine" id="cb23-6" title="6"><span class="kw">import</span> <span class="dt">Control.Monad.Eff.Console</span> (<span class="dt">CONSOLE</span>, log)</a>
<a class="sourceLine" id="cb23-7" title="7"><span class="kw">import</span> <span class="dt">Data.Either</span> (<span class="dt">Either</span>(..))</a>
<a class="sourceLine" id="cb23-8" title="8"><span class="kw">import</span> <span class="dt">Data.Set</span> (toUnfoldable)</a>
<a class="sourceLine" id="cb23-9" title="9"><span class="kw">import</span> <span class="dt">Data.String</span> (joinWith)</a>
<a class="sourceLine" id="cb23-10" title="10"><span class="kw">import</span> <span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span></a>
<a class="sourceLine" id="cb23-11" title="11"><span class="kw">import</span> <span class="dt">Node.Express.Types</span> (<span class="dt">EXPRESS</span>)</a>
<a class="sourceLine" id="cb23-12" title="12"><span class="kw">import</span> <span class="dt">Node.Process</span> (<span class="dt">PROCESS</span>)</a>
<a class="sourceLine" id="cb23-13" title="13"><span class="kw">import</span> <span class="dt">Node.Process</span> <span class="kw">as</span> <span class="dt">Process</span></a>
<a class="sourceLine" id="cb23-14" title="14"><span class="kw">import</span> <span class="dt">SimpleService.Config</span> (readServerConfig)</a>
<a class="sourceLine" id="cb23-15" title="15"><span class="kw">import</span> <span class="dt">SimpleService.Server</span> (runServer)</a>
<a class="sourceLine" id="cb23-16" title="16"></a>
<a class="sourceLine" id="cb23-17" title="17"><span class="ot">main ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">Eff</span> (<span class="ot"> console ::</span> <span class="dt">CONSOLE</span></a>
<a class="sourceLine" id="cb23-18" title="18">                        ,<span class="ot"> express ::</span> <span class="dt">EXPRESS</span></a>
<a class="sourceLine" id="cb23-19" title="19">                        ,<span class="ot"> postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span></a>
<a class="sourceLine" id="cb23-20" title="20">                        ,<span class="ot"> process ::</span> <span class="dt">PROCESS</span></a>
<a class="sourceLine" id="cb23-21" title="21">                        <span class="fu">|</span> eff ) <span class="dt">Unit</span></a>
<a class="sourceLine" id="cb23-22" title="22">main <span class="fu">=</span> readServerConfig <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb23-23" title="23">  <span class="dt">Left</span> missingKeys <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb23-24" title="24">    <span class="fu">log</span> <span class="fu">$</span> <span class="st">&quot;Unable to start. Missing Env keys: &quot;</span> <span class="fu">&lt;&gt;</span> joinWith <span class="st">&quot;, &quot;</span> (toUnfoldable missingKeys)</a>
<a class="sourceLine" id="cb23-25" title="25">    Process.exit <span class="dv">1</span></a>
<a class="sourceLine" id="cb23-26" title="26">  <span class="dt">Right</span> { port, databaseConfig } <span class="ot">-&gt;</span> runServer port databaseConfig</a></code></pre></div>
<p>If <code>readServerConfig</code> fails, we print the missing keys to the console and exit the process. Else we run the server with the read config.</p>
<p>To test this, we stop the server we ran in the beginning, source the config, and run it again:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb24-1" title="1">$ <span class="ex">pulp</span> --watch run</a>
<a class="sourceLine" id="cb24-2" title="2"><span class="ex">*</span> Building project in /Users/abhinav/ps-simple-rest-service</a>
<a class="sourceLine" id="cb24-3" title="3"><span class="ex">*</span> Build successful.</a>
<a class="sourceLine" id="cb24-4" title="4"><span class="ex">Server</span> listening on :4000</a>
<a class="sourceLine" id="cb24-5" title="5">^<span class="ex">C</span></a>
<a class="sourceLine" id="cb24-6" title="6">$ <span class="bu">source</span> setenv.sh</a>
<a class="sourceLine" id="cb24-7" title="7">$ <span class="ex">pulp</span> --watch run</a>
<a class="sourceLine" id="cb24-8" title="8"><span class="ex">*</span> Building project in /Users/abhinav/ps-simple-rest-service</a>
<a class="sourceLine" id="cb24-9" title="9"><span class="ex">*</span> Build successful.</a>
<a class="sourceLine" id="cb24-10" title="10"><span class="ex">Server</span> listening on :4000</a></code></pre></div>
<p>It works! We test the failure case by opening another terminal which does not have the environment variables set:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb25-1" title="1">$ <span class="ex">pulp</span> run</a>
<a class="sourceLine" id="cb25-2" title="2"><span class="ex">*</span> Building project in /Users/abhinav/ps-simple-rest-service</a>
<a class="sourceLine" id="cb25-3" title="3"><span class="ex">*</span> Build successful.</a>
<a class="sourceLine" id="cb25-4" title="4"><span class="ex">Unable</span> to start. Missing Env keys: SS_DB_DATABASE, SS_DB_HOST, SS_DB_IDLE_CONN_TIMEOUT_MILLIS, SS_DB_PASSWORD, SS_DB_POOL_SIZE, SS_DB_PORT, SS_DB_USER, SS_PORT</a>
<a class="sourceLine" id="cb25-5" title="5"><span class="ex">*</span> ERROR: Subcommand terminated with exit code 1</a></code></pre></div>
<p>Up next, we add logging to our application.</p>
<h2 id="logging" data-track-content data-content-name="logging" data-content-piece="ps-simple-rest-service-2">Logging<a href="#logging" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>For logging, we use the <a href="https://pursuit.purescript.org/packages/purescript-logging" target="_blank" rel="noopener"><code>purescript-logging</code></a> package. We write a logger which logs to <code>stdout</code>; in the <code>src/SimpleService/Logger.purs</code> file:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb26-1" title="1"><span class="kw">module</span> <span class="dt">SimpleService.Logger</span></a>
<a class="sourceLine" id="cb26-2" title="2">  ( debug</a>
<a class="sourceLine" id="cb26-3" title="3">  , info</a>
<a class="sourceLine" id="cb26-4" title="4">  , warn</a>
<a class="sourceLine" id="cb26-5" title="5">  , <span class="fu">error</span></a>
<a class="sourceLine" id="cb26-6" title="6">  ) <span class="kw">where</span></a>
<a class="sourceLine" id="cb26-7" title="7"></a>
<a class="sourceLine" id="cb26-8" title="8"><span class="kw">import</span> <span class="dt">Prelude</span></a>
<a class="sourceLine" id="cb26-9" title="9"></a>
<a class="sourceLine" id="cb26-10" title="10"><span class="kw">import</span> <span class="dt">Control.Logger</span> <span class="kw">as</span> <span class="dt">L</span></a>
<a class="sourceLine" id="cb26-11" title="11"><span class="kw">import</span> <span class="dt">Control.Monad.Eff.Class</span> (class <span class="dt">MonadEff</span>, liftEff)</a>
<a class="sourceLine" id="cb26-12" title="12"><span class="kw">import</span> <span class="dt">Control.Monad.Eff.Console</span> <span class="kw">as</span> <span class="dt">C</span></a>
<a class="sourceLine" id="cb26-13" title="13"><span class="kw">import</span> <span class="dt">Control.Monad.Eff.Now</span> (<span class="dt">NOW</span>, now)</a>
<a class="sourceLine" id="cb26-14" title="14"><span class="kw">import</span> <span class="dt">Data.DateTime.Instant</span> (toDateTime)</a>
<a class="sourceLine" id="cb26-15" title="15"><span class="kw">import</span> <span class="dt">Data.Either</span> (fromRight)</a>
<a class="sourceLine" id="cb26-16" title="16"><span class="kw">import</span> <span class="dt">Data.Formatter.DateTime</span> (<span class="dt">Formatter</span>, format, parseFormatString)</a>
<a class="sourceLine" id="cb26-17" title="17"><span class="kw">import</span> <span class="dt">Data.Generic.Rep</span> (class <span class="dt">Generic</span>)</a>
<a class="sourceLine" id="cb26-18" title="18"><span class="kw">import</span> <span class="dt">Data.Generic.Rep.Show</span> (genericShow)</a>
<a class="sourceLine" id="cb26-19" title="19"><span class="kw">import</span> <span class="dt">Data.String</span> (toUpper)</a>
<a class="sourceLine" id="cb26-20" title="20"><span class="kw">import</span> <span class="dt">Partial.Unsafe</span> (unsafePartial)</a>
<a class="sourceLine" id="cb26-21" title="21"></a>
<a class="sourceLine" id="cb26-22" title="22"><span class="kw">data</span> <span class="dt">Level</span> <span class="fu">=</span> <span class="dt">Debug</span> <span class="fu">|</span> <span class="dt">Info</span> <span class="fu">|</span> <span class="dt">Warn</span> <span class="fu">|</span> <span class="dt">Error</span></a>
<a class="sourceLine" id="cb26-23" title="23"></a>
<a class="sourceLine" id="cb26-24" title="24">derive <span class="kw">instance</span><span class="ot"> eqLevel ::</span> <span class="dt">Eq</span> <span class="dt">Level</span></a>
<a class="sourceLine" id="cb26-25" title="25">derive <span class="kw">instance</span><span class="ot"> ordLevel ::</span> <span class="dt">Ord</span> <span class="dt">Level</span></a>
<a class="sourceLine" id="cb26-26" title="26">derive <span class="kw">instance</span><span class="ot"> genericLevel ::</span> <span class="dt">Generic</span> <span class="dt">Level</span> _</a>
<a class="sourceLine" id="cb26-27" title="27"></a>
<a class="sourceLine" id="cb26-28" title="28"><span class="kw">instance</span><span class="ot"> showLevel ::</span> <span class="dt">Show</span> <span class="dt">Level</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb26-29" title="29">  <span class="fu">show</span> <span class="fu">=</span> <span class="fu">toUpper</span> <span class="fu">&lt;&lt;&lt;</span> genericShow</a>
<a class="sourceLine" id="cb26-30" title="30"></a>
<a class="sourceLine" id="cb26-31" title="31"><span class="kw">type</span> <span class="dt">Entry</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb26-32" title="32">  {<span class="ot"> level   ::</span> <span class="dt">Level</span></a>
<a class="sourceLine" id="cb26-33" title="33">  ,<span class="ot"> message ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb26-34" title="34">  }</a>
<a class="sourceLine" id="cb26-35" title="35"></a>
<a class="sourceLine" id="cb26-36" title="36"><span class="ot">dtFormatter ::</span> <span class="dt">Formatter</span></a>
<a class="sourceLine" id="cb26-37" title="37">dtFormatter <span class="fu">=</span> unsafePartial <span class="fu">$</span> fromRight <span class="fu">$</span> parseFormatString <span class="st">&quot;YYYY-MM-DD HH:mm:ss.SSS&quot;</span></a>
<a class="sourceLine" id="cb26-38" title="38"></a>
<a class="sourceLine" id="cb26-39" title="39"><span class="ot">logger ::</span> <span class="kw">forall</span> m e<span class="fu">.</span> (</a>
<a class="sourceLine" id="cb26-40" title="40">          <span class="dt">MonadEff</span> (<span class="ot">console ::</span> <span class="dt">C.CONSOLE</span>,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> e) m) <span class="ot">=&gt;</span> <span class="dt">L.Logger</span> m <span class="dt">Entry</span></a>
<a class="sourceLine" id="cb26-41" title="41">logger <span class="fu">=</span> <span class="dt">L.Logger</span> <span class="fu">$</span> \{ level, message } <span class="ot">-&gt;</span> liftEff <span class="kw">do</span></a>
<a class="sourceLine" id="cb26-42" title="42">  time <span class="ot">&lt;-</span> toDateTime <span class="fu">&lt;$&gt;</span> now</a>
<a class="sourceLine" id="cb26-43" title="43">  C.log <span class="fu">$</span> <span class="st">&quot;[&quot;</span> <span class="fu">&lt;&gt;</span> format dtFormatter time <span class="fu">&lt;&gt;</span> <span class="st">&quot;] &quot;</span> <span class="fu">&lt;&gt;</span> <span class="fu">show</span> level <span class="fu">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> message</a>
<a class="sourceLine" id="cb26-44" title="44"></a>
<a class="sourceLine" id="cb26-45" title="45"><span class="fu">log</span><span class="ot"> ::</span> <span class="kw">forall</span> m e<span class="fu">.</span></a>
<a class="sourceLine" id="cb26-46" title="46">        <span class="dt">MonadEff</span> (<span class="ot">console ::</span> <span class="dt">C.CONSOLE</span> ,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> e) m</a>
<a class="sourceLine" id="cb26-47" title="47">     <span class="ot">=&gt;</span> <span class="dt">Entry</span> <span class="ot">-&gt;</span> m <span class="dt">Unit</span></a>
<a class="sourceLine" id="cb26-48" title="48"><span class="fu">log</span> entry<span class="fu">@</span>{level} <span class="fu">=</span> L.log (L.cfilter (\e <span class="ot">-&gt;</span> e<span class="fu">.</span>level <span class="fu">==</span> level) logger) entry</a>
<a class="sourceLine" id="cb26-49" title="49"></a>
<a class="sourceLine" id="cb26-50" title="50"><span class="ot">debug ::</span> <span class="kw">forall</span> m e<span class="fu">.</span></a>
<a class="sourceLine" id="cb26-51" title="51">         <span class="dt">MonadEff</span> (<span class="ot">console ::</span> <span class="dt">C.CONSOLE</span> ,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> e) m <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> m <span class="dt">Unit</span></a>
<a class="sourceLine" id="cb26-52" title="52">debug message <span class="fu">=</span> <span class="fu">log</span> { level<span class="fu">:</span> <span class="dt">Debug</span>, message }</a>
<a class="sourceLine" id="cb26-53" title="53"></a>
<a class="sourceLine" id="cb26-54" title="54"><span class="ot">info ::</span> <span class="kw">forall</span> m e<span class="fu">.</span></a>
<a class="sourceLine" id="cb26-55" title="55">        <span class="dt">MonadEff</span> (<span class="ot">console ::</span> <span class="dt">C.CONSOLE</span> ,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> e) m <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> m <span class="dt">Unit</span></a>
<a class="sourceLine" id="cb26-56" title="56">info message <span class="fu">=</span> <span class="fu">log</span> { level<span class="fu">:</span> <span class="dt">Info</span>, message }</a>
<a class="sourceLine" id="cb26-57" title="57"></a>
<a class="sourceLine" id="cb26-58" title="58"><span class="ot">warn ::</span> <span class="kw">forall</span> m e<span class="fu">.</span></a>
<a class="sourceLine" id="cb26-59" title="59">        <span class="dt">MonadEff</span> (<span class="ot">console ::</span> <span class="dt">C.CONSOLE</span> ,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> e) m <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> m <span class="dt">Unit</span></a>
<a class="sourceLine" id="cb26-60" title="60">warn message <span class="fu">=</span> <span class="fu">log</span> { level<span class="fu">:</span> <span class="dt">Warn</span>, message }</a>
<a class="sourceLine" id="cb26-61" title="61"></a>
<a class="sourceLine" id="cb26-62" title="62"><span class="fu">error</span><span class="ot"> ::</span> <span class="kw">forall</span> m e<span class="fu">.</span></a>
<a class="sourceLine" id="cb26-63" title="63">         <span class="dt">MonadEff</span> (<span class="ot">console ::</span> <span class="dt">C.CONSOLE</span> ,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> e) m <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> m <span class="dt">Unit</span></a>
<a class="sourceLine" id="cb26-64" title="64"><span class="fu">error</span> message <span class="fu">=</span> <span class="fu">log</span> { level<span class="fu">:</span> <span class="dt">Error</span>, message }</a></code></pre></div>
<p><code>purescript-logging</code> lets us define our own logging levels and loggers. We define four log levels, and a log entry type with the log level and the message. Then we write the logger which will print the log entry to <code>stdout</code> along with the current time as a well formatted string. We define convenience functions for each log level.</p>
<p>Before we proceed, let’s install the required dependencies.</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb27-1" title="1">$ <span class="ex">bower</span> install --save purescript-logging purescript-now purescript-formatters</a></code></pre></div>
<p>Now we add a request logger middleware to our server in the <code>src/SimpleService/Server.purs</code> file:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb28-1" title="1"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb28-2" title="2"><span class="kw">import</span> <span class="dt">Control.Monad.Eff.Console</span> (<span class="dt">CONSOLE</span>)</a>
<a class="sourceLine" id="cb28-3" title="3"><span class="kw">import</span> <span class="dt">Control.Monad.Eff.Now</span> (<span class="dt">NOW</span>)</a>
<a class="sourceLine" id="cb28-4" title="4"><span class="kw">import</span> <span class="dt">Data.Maybe</span> (maybe)</a>
<a class="sourceLine" id="cb28-5" title="5"><span class="kw">import</span> <span class="dt">Data.String</span> (toUpper)</a>
<a class="sourceLine" id="cb28-6" title="6"><span class="kw">import</span> <span class="dt">Node.Express.App</span> (<span class="dt">App</span>, all, delete, get, http, listenHttp, post, use, useExternal, useOnError)</a>
<a class="sourceLine" id="cb28-7" title="7"><span class="kw">import</span> <span class="dt">Node.Express.Handler</span> (<span class="dt">Handler</span>, next)</a>
<a class="sourceLine" id="cb28-8" title="8"><span class="kw">import</span> <span class="dt">Node.Express.Request</span> (getMethod, getPath)</a>
<a class="sourceLine" id="cb28-9" title="9"><span class="kw">import</span> <span class="dt">SimpleService.Logger</span> <span class="kw">as</span> <span class="dt">Log</span></a>
<a class="sourceLine" id="cb28-10" title="10"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb28-11" title="11"></a>
<a class="sourceLine" id="cb28-12" title="12"><span class="ot">requestLogger ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">Handler</span> (<span class="ot">console ::</span> <span class="dt">CONSOLE</span>,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb28-13" title="13">requestLogger <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb28-14" title="14">  method <span class="ot">&lt;-</span> getMethod</a>
<a class="sourceLine" id="cb28-15" title="15">  path   <span class="ot">&lt;-</span> getPath</a>
<a class="sourceLine" id="cb28-16" title="16">  Log.debug <span class="fu">$</span> <span class="st">&quot;HTTP: &quot;</span> <span class="fu">&lt;&gt;</span> <span class="fu">maybe</span> <span class="st">&quot;&quot;</span> <span class="fu">id</span> ((<span class="fu">toUpper</span> <span class="fu">&lt;&lt;&lt;</span> <span class="fu">show</span>) <span class="fu">&lt;$&gt;</span> method) <span class="fu">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> path</a>
<a class="sourceLine" id="cb28-17" title="17">  next</a>
<a class="sourceLine" id="cb28-18" title="18"></a>
<a class="sourceLine" id="cb28-19" title="19"><span class="ot">app ::</span> <span class="kw">forall</span> eff<span class="fu">.</span></a>
<a class="sourceLine" id="cb28-20" title="20">       <span class="dt">PG.Pool</span></a>
<a class="sourceLine" id="cb28-21" title="21">    <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span>,<span class="ot"> console ::</span> <span class="dt">CONSOLE</span>,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb28-22" title="22">app pool <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb28-23" title="23">  useExternal jsonBodyParser</a>
<a class="sourceLine" id="cb28-24" title="24">  use requestLogger</a>
<a class="sourceLine" id="cb28-25" title="25">  <span class="co">-- previous code</span></a></code></pre></div>
<p>We also convert all our previous logging statements which used <code>Console.log</code> to use <code>SimpleService.Logger</code> and add logs in our handlers. We can see logging in effect by restarting the server and hitting it:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb29-1" title="1">$ <span class="ex">pulp</span> --watch run</a>
<a class="sourceLine" id="cb29-2" title="2"><span class="ex">*</span> Building project in /Users/abhinav/ps-simple-rest-service</a>
<a class="sourceLine" id="cb29-3" title="3"><span class="ex">*</span> Build successful.</a>
<a class="sourceLine" id="cb29-4" title="4">[<span class="ex">2017-09-30</span> 16:02:41.634] INFO Server listening on :4000</a>
<a class="sourceLine" id="cb29-5" title="5">[<span class="ex">2017-09-30</span> 16:02:43.494] DEBUG HTTP: PATCH /v1/user/3</a>
<a class="sourceLine" id="cb29-6" title="6">[<span class="ex">2017-09-30</span> 16:02:43.517] DEBUG Updated user: 3</a>
<a class="sourceLine" id="cb29-7" title="7">[<span class="ex">2017-09-30</span> 16:03:46.615] DEBUG HTTP: DELETE /v1/user/3</a>
<a class="sourceLine" id="cb29-8" title="8">[<span class="ex">2017-09-30</span> 16:03:46.635] DEBUG Deleted user 3</a>
<a class="sourceLine" id="cb29-9" title="9">[<span class="ex">2017-09-30</span> 16:05:03.805] DEBUG HTTP: GET /v1/users</a></code></pre></div>
<h2 id="conclusion" data-track-content data-content-name="conclusion" data-content-piece="ps-simple-rest-service-2">Conclusion<a href="#conclusion" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>In this tutorial we learned how to create a simple JSON REST web service written in PureScript with persistence, validation, configuration and logging. The complete code for this tutorial can be found in <a href="https://github.com/abhin4v/ps-simple-rest-service" target="_blank" rel="noopener">github</a>. Discuss this post in the <a href="https://abhinavsarkar.net/posts/ps-simple-rest-service-2/#comment-container">comments</a>.</p><p>If you liked this post, please <a href="https://abhinavsarkar.net/posts/ps-simple-rest-service-2/#comment-container">leave a comment</a>.</p><img src="https://anna.abhinavsarkar.net/piwik.php?idsite=1&amp;rec=1" style="border:0; display: none;" />]]></summary>
</entry>
<entry>
    <title>Writing a Simple REST Web Service in PureScript - Part 1</title>
    <link rel="alternate" href="https://abhinavsarkar.net/posts/ps-simple-rest-service/" />
    <id>https://abhinavsarkar.net/posts/ps-simple-rest-service/</id>
    <published>2017-09-29T00:00:00Z</published>
    <updated>2017-09-29T00:00:00Z</updated>
    
    <author>
        <name>Abhinav Sarkar</name>
        <email>abhinav@abhinavsarkar.net</email>
        <uri>https://abhinavsarkar.net/about/</uri>
    </author>
    
    
    <category term="purescript" />
    
    <category term="REST" />
    
    <category term="programming" />
    
    <category term="nilenso" />
    
    <summary type="html"><![CDATA[<p>At <a href="https://nilenso.com" target="_blank" rel="noopener">Nilenso</a>, we’ve been working with a client who has chosen <a href="http://purescript.org" target="_blank" rel="noopener">PureScript</a> as their primary programming language. Since I couldn’t find any canonical documentation on writing a web service in PureScript, I thought I’d jot down the approach that we took.</p>
<p>The aim of this two-part tutorial is to create a simple JSON <a href="https://en.wikipedia.org/wiki/REST" target="_blank" rel="noopener">REST</a> web service written in PureScript, to run on a node.js server. <!--more--> This assumes that you have basic proficiency with PureScript. We have the following requirements:</p>
<ol type="1">
<li>persisting users into a Postgres database.</li>
<li>API endpoints for creating, updating, getting, listing and deleting users.</li>
<li>validation of API requests.</li>
<li>reading the server and database configs from environment variables.</li>
<li>logging HTTP requests and debugging info.</li>
</ol>
<p>In this part we’ll work on setting up the project and on the first two requirements. In the <a href="https://abhinavsarkar.net/posts/ps-simple-rest-service-2/">next</a> part we’ll work on the rest of the requirements.</p>
<nav id="toc" class="right-toc"><h3>Contents</h3><ol><li><a href="#setting-up">Setting Up</a></li><li><a href="#types-first">Types First</a></li><li><a href="#persisting-it">Persisting It</a></li><li><a href="#serving-it">Serving It</a><ol><li><a href="#getting-a-user">Getting a User</a></li><li><a href="#deleting-a-user">Deleting a User</a></li><li><a href="#creating-a-user">Creating a User</a></li><li><a href="#updating-a-user">Updating a User</a></li><li><a href="#listing-all-users">Listing all Users</a></li></ol></li><li><a href="#conclusion">Conclusion</a></li></ol></nav>
<h2 id="setting-up" data-track-content data-content-name="setting-up" data-content-piece="ps-simple-rest-service">Setting Up<a href="#setting-up" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>We start with installing PureScript and the required tools. This assumes that we have <a href="https://nodejs.org" target="_blank" rel="noopener">node</a> and <a href="https://www.npmjs.com" target="_blank" rel="noopener">npm</a> installed on our machine.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb1-1" title="1">$ <span class="fu">mkdir</span> -p ~/.local/</a>
<a class="sourceLine" id="cb1-2" title="2">$ <span class="ex">npm</span> install -g purescript pulp bower --prefix ~/.local/</a></code></pre></div>
<p><a href="https://github.com/purescript-contrib/pulp" target="_blank" rel="noopener">Pulp</a> is a build tool for PureScript projects and <a href="http://bower.io" target="_blank" rel="noopener">bower</a> is a package manager used to get PureScript libraries. We’ll have to add <code>~/.local/bin</code> in our <code>$PATH</code> (if it is not already added) to access the binaries installed.</p>
<p>Let’s create a directory for our project and make Pulp initialize it:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb2-1" title="1">$ <span class="fu">mkdir</span> ps-simple-rest-service</a>
<a class="sourceLine" id="cb2-2" title="2">$ <span class="bu">cd</span> ps-simple-rest-service</a>
<a class="sourceLine" id="cb2-3" title="3">$ <span class="ex">pulp</span> init</a>
<a class="sourceLine" id="cb2-4" title="4">$ <span class="fu">ls</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="ex">bower.json</span>  bower_components  src  test</a>
<a class="sourceLine" id="cb2-6" title="6">$ <span class="fu">cat</span> bower.json</a>
<a class="sourceLine" id="cb2-7" title="7"><span class="kw">{</span></a>
<a class="sourceLine" id="cb2-8" title="8">  <span class="st">&quot;name&quot;</span>: <span class="st">&quot;ps-simple-rest-service&quot;</span>,</a>
<a class="sourceLine" id="cb2-9" title="9">  <span class="st">&quot;ignore&quot;</span>:<span class="bu"> [</span></a>
<a class="sourceLine" id="cb2-10" title="10">    <span class="st">&quot;**/.*&quot;</span>,</a>
<a class="sourceLine" id="cb2-11" title="11">    <span class="st">&quot;node_modules&quot;</span>,</a>
<a class="sourceLine" id="cb2-12" title="12">    <span class="st">&quot;bower_components&quot;</span>,</a>
<a class="sourceLine" id="cb2-13" title="13">    <span class="st">&quot;output&quot;</span></a>
<a class="sourceLine" id="cb2-14" title="14">  ],</a>
<a class="sourceLine" id="cb2-15" title="15">  <span class="st">&quot;dependencies&quot;</span>: {</a>
<a class="sourceLine" id="cb2-16" title="16">    <span class="st">&quot;purescript-prelude&quot;</span>: <span class="st">&quot;^3.1.0&quot;</span>,</a>
<a class="sourceLine" id="cb2-17" title="17">    <span class="st">&quot;purescript-console&quot;</span>: <span class="st">&quot;^3.0.0&quot;</span></a>
<a class="sourceLine" id="cb2-18" title="18">  },</a>
<a class="sourceLine" id="cb2-19" title="19">  <span class="st">&quot;devDependencies&quot;</span>: {</a>
<a class="sourceLine" id="cb2-20" title="20">    <span class="st">&quot;purescript-psci-support&quot;</span>: <span class="st">&quot;^3.0.0&quot;</span></a>
<a class="sourceLine" id="cb2-21" title="21">  }</a>
<a class="sourceLine" id="cb2-22" title="22">}</a>
<a class="sourceLine" id="cb2-23" title="23">$ ls bower_components</a>
<a class="sourceLine" id="cb2-24" title="24">purescript-console  purescript-eff  purescript-prelude purescript-psci-support</a></code></pre></div>
<p>Pulp creates the basic project structure for us. <code>src</code> directory will contain the source while the <code>test</code> directory will contain the tests. <code>bower.json</code> contains the PureScript libraries as dependencies which are downloaded and installed in the <code>bower_components</code> directory.</p>
<div class="page-break">

</div>
<h2 id="types-first" data-track-content data-content-name="types-first" data-content-piece="ps-simple-rest-service">Types First<a href="#types-first" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>First, we create the types needed in <code>src/SimpleService/Types.purs</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">module</span> <span class="dt">SimpleService.Types</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-2" title="2"></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="kw">import</span> <span class="dt">Prelude</span></a>
<a class="sourceLine" id="cb3-4" title="4"></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="kw">import</span> <span class="dt">Data.Foreign.Class</span> (class <span class="dt">Decode</span>, class <span class="dt">Encode</span>)</a>
<a class="sourceLine" id="cb3-6" title="6"><span class="kw">import</span> <span class="dt">Data.Foreign.Generic</span> (defaultOptions, genericDecode, genericEncode)</a>
<a class="sourceLine" id="cb3-7" title="7"><span class="kw">import</span> <span class="dt">Data.Generic.Rep</span> (class <span class="dt">Generic</span>)</a>
<a class="sourceLine" id="cb3-8" title="8"><span class="kw">import</span> <span class="dt">Data.Generic.Rep.Show</span> (genericShow)</a>
<a class="sourceLine" id="cb3-9" title="9"></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="kw">type</span> <span class="dt">UserID</span> <span class="fu">=</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb3-11" title="11"></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="kw">newtype</span> <span class="dt">User</span> <span class="fu">=</span> <span class="dt">User</span></a>
<a class="sourceLine" id="cb3-13" title="13">  {<span class="ot"> id   ::</span> <span class="dt">UserID</span></a>
<a class="sourceLine" id="cb3-14" title="14">  ,<span class="ot"> name ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb3-15" title="15">  }</a>
<a class="sourceLine" id="cb3-16" title="16"></a>
<a class="sourceLine" id="cb3-17" title="17">derive <span class="kw">instance</span><span class="ot"> genericUser ::</span> <span class="dt">Generic</span> <span class="dt">User</span> _</a>
<a class="sourceLine" id="cb3-18" title="18"></a>
<a class="sourceLine" id="cb3-19" title="19"><span class="kw">instance</span><span class="ot"> showUser ::</span> <span class="dt">Show</span> <span class="dt">User</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-20" title="20">  <span class="fu">show</span> <span class="fu">=</span> genericShow</a>
<a class="sourceLine" id="cb3-21" title="21"></a>
<a class="sourceLine" id="cb3-22" title="22"><span class="kw">instance</span><span class="ot"> decodeUser ::</span> <span class="dt">Decode</span> <span class="dt">User</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-23" title="23">  decode <span class="fu">=</span> genericDecode <span class="fu">$</span> defaultOptions { unwrapSingleConstructors <span class="fu">=</span> true }</a>
<a class="sourceLine" id="cb3-24" title="24"></a>
<a class="sourceLine" id="cb3-25" title="25"><span class="kw">instance</span><span class="ot"> encodeUser ::</span> <span class="dt">Encode</span> <span class="dt">User</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-26" title="26">  encode <span class="fu">=</span> genericEncode <span class="fu">$</span> defaultOptions { unwrapSingleConstructors <span class="fu">=</span> true }</a></code></pre></div>
<p>We are using the generic support for PureScript types from the <a href="https://pursuit.purescript.org/packages/purescript-generics-rep" target="_blank" rel="noopener"><code>purescript-generics-rep</code></a> and <a href="https://pursuit.purescript.org/packages/purescript-foreign-generic" target="_blank" rel="noopener"><code>purescript-foreign-generic</code></a> libraries to encode and decode the <code>User</code> type to JSON. We install the library by running the following command:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb4-1" title="1">$ <span class="ex">bower</span> install purescript-foreign-generic --save</a></code></pre></div>
<p>Now we can load up the module in the PureScript REPL and try out the JSON conversion features:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1"><span class="fu">$</span> pulp repl</a>
<a class="sourceLine" id="cb5-2" title="2"><span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">SimpleService.Types</span></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="fu">&gt;</span> user <span class="fu">=</span> <span class="dt">User</span> { <span class="fu">id:</span> <span class="dv">1</span>, name<span class="fu">:</span> <span class="st">&quot;Abhinav&quot;</span>}</a>
<a class="sourceLine" id="cb5-4" title="4"><span class="fu">&gt;</span> user</a>
<a class="sourceLine" id="cb5-5" title="5">(<span class="dt">User</span> { <span class="fu">id:</span> <span class="dv">1</span>, name<span class="fu">:</span> <span class="st">&quot;Abhinav&quot;</span> })</a>
<a class="sourceLine" id="cb5-6" title="6"></a>
<a class="sourceLine" id="cb5-7" title="7"><span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">Data.Foreign.Generic</span></a>
<a class="sourceLine" id="cb5-8" title="8"><span class="fu">&gt;</span> userJSON <span class="fu">=</span> encodeJSON user</a>
<a class="sourceLine" id="cb5-9" title="9"><span class="fu">&gt;</span> userJSON</a>
<a class="sourceLine" id="cb5-10" title="10"><span class="st">&quot;{\&quot;name\&quot;:\&quot;Abhinav\&quot;,\&quot;id\&quot;:1}&quot;</span></a>
<a class="sourceLine" id="cb5-11" title="11"></a>
<a class="sourceLine" id="cb5-12" title="12"><span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">Data.Foreign</span></a>
<a class="sourceLine" id="cb5-13" title="13"><span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">Control.Monad.Except.Trans</span></a>
<a class="sourceLine" id="cb5-14" title="14"><span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">Data.Identity</span></a>
<a class="sourceLine" id="cb5-15" title="15"><span class="fu">&gt;</span> dUser <span class="fu">=</span> decodeJSON<span class="ot"> userJSON ::</span> <span class="dt">F</span> <span class="dt">User</span></a>
<a class="sourceLine" id="cb5-16" title="16"><span class="fu">&gt;</span> eUser <span class="fu">=</span> <span class="kw">let</span> (<span class="dt">Identity</span> eUser) <span class="fu">=</span> runExceptT <span class="fu">$</span> dUser <span class="kw">in</span> eUser</a>
<a class="sourceLine" id="cb5-17" title="17"><span class="fu">&gt;</span> eUser</a>
<a class="sourceLine" id="cb5-18" title="18">(<span class="dt">Right</span> (<span class="dt">User</span> { <span class="fu">id:</span> <span class="dv">1</span>, name<span class="fu">:</span> <span class="st">&quot;Abhinav&quot;</span> }))</a></code></pre></div>
<p>We use <code>encodeJSON</code> and <code>decodeJSON</code> functions from the <a href="https://pursuit.purescript.org/packages/purescript-foreign-generic/4.3.0/docs/Data.Foreign.Generic" target="_blank" rel="noopener"><code>Data.Foreign.Generic</code></a> module to encode and decode the <code>User</code> instance to JSON. The return type of <code>decodeJSON</code> is a bit complicated as it needs to return the parsing errors too. In this case, the decoding returns no errors and we get back a <code>Right</code> with the correctly parsed <code>User</code> instance.</p>
<h2 id="persisting-it" data-track-content data-content-name="persisting-it" data-content-piece="ps-simple-rest-service">Persisting It<a href="#persisting-it" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Next, we add the support for saving a <code>User</code> instance to a Postgres database. First, we install the required libraries using bower and npm: <a href="https://github.com/brianc/node-postgres" target="_blank" rel="noopener"><code>pg</code></a> for Javascript bindings to call Postgres, <a href="https://pursuit.purescript.org/packages/purescript-aff" target="_blank" rel="noopener"><code>purescript-aff</code></a> for asynchronous processing and <a href="https://pursuit.purescript.org/packages/purescript-postgresql-client" target="_blank" rel="noopener"><code>purescript-postgresql-client</code></a> for PureScript wrapper over <code>pg</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb6-1" title="1">$ <span class="ex">npm</span> init -y</a>
<a class="sourceLine" id="cb6-2" title="2">$ <span class="ex">npm</span> install pg@6.4.0 --save</a>
<a class="sourceLine" id="cb6-3" title="3">$ <span class="ex">bower</span> install purescript-aff --save</a>
<a class="sourceLine" id="cb6-4" title="4">$ <span class="ex">bower</span> install purescript-postgresql-client --save</a></code></pre></div>
<p>Before writing the code, we create the database and the <code>users</code> table using the command-line Postgres client:</p>
<pre><code>$ psql postgres
psql (9.5.4)
Type &quot;help&quot; for help.

postgres=# create database simple_service;
CREATE DATABASE
postgres=# \c simple_service
You are now connected to database &quot;simple_service&quot; as user &quot;abhinav&quot;.
simple_service=# create table users (id int primary key, name varchar(100) not null);
CREATE TABLE
simple_service=# \d users
            Table &quot;public.users&quot;
 Column |          Type          | Modifiers
--------+------------------------+-----------
 id     | integer                | not null
 name   | character varying(100) | not null
Indexes:
    &quot;users_pkey&quot; PRIMARY KEY, btree (id)</code></pre>
<p>Now we add support for converting a <code>User</code> instance to-and-from an SQL row by adding the following code in the <code>src/SimpleService/Types.purs</code> file:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1"><span class="kw">import</span> <span class="dt">Data.Array</span> <span class="kw">as</span> <span class="dt">Array</span></a>
<a class="sourceLine" id="cb8-2" title="2"><span class="kw">import</span> <span class="dt">Data.Either</span> (<span class="dt">Either</span>(..))</a>
<a class="sourceLine" id="cb8-3" title="3"><span class="kw">import</span> <span class="dt">Database.PostgreSQL</span> (class <span class="dt">FromSQLRow</span>, class <span class="dt">ToSQLRow</span>, fromSQLValue, toSQLValue)</a>
<a class="sourceLine" id="cb8-4" title="4"></a>
<a class="sourceLine" id="cb8-5" title="5"><span class="co">-- code written earlier</span></a>
<a class="sourceLine" id="cb8-6" title="6"></a>
<a class="sourceLine" id="cb8-7" title="7"><span class="kw">instance</span><span class="ot"> userFromSQLRow ::</span> <span class="dt">FromSQLRow</span> <span class="dt">User</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-8" title="8">  fromSQLRow [<span class="fu">id</span>, name] <span class="fu">=</span></a>
<a class="sourceLine" id="cb8-9" title="9">    <span class="dt">User</span> <span class="fu">&lt;$&gt;</span> ({ <span class="fu">id:</span> _, name<span class="fu">:</span> _} <span class="fu">&lt;$&gt;</span> fromSQLValue <span class="fu">id</span> <span class="fu">&lt;*&gt;</span> fromSQLValue name)</a>
<a class="sourceLine" id="cb8-10" title="10"></a>
<a class="sourceLine" id="cb8-11" title="11">  fromSQLRow xs <span class="fu">=</span> <span class="dt">Left</span> <span class="fu">$</span> <span class="st">&quot;Row has &quot;</span> <span class="fu">&lt;&gt;</span> <span class="fu">show</span> n <span class="fu">&lt;&gt;</span> <span class="st">&quot; fields, expecting 2.&quot;</span></a>
<a class="sourceLine" id="cb8-12" title="12">    <span class="kw">where</span> n <span class="fu">=</span> Array.length xs</a>
<a class="sourceLine" id="cb8-13" title="13"></a>
<a class="sourceLine" id="cb8-14" title="14"><span class="kw">instance</span><span class="ot"> userToSQLRow ::</span> <span class="dt">ToSQLRow</span> <span class="dt">User</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-15" title="15">  toSQLRow (<span class="dt">User</span> {<span class="fu">id</span>, name}) <span class="fu">=</span> [toSQLValue <span class="fu">id</span>, toSQLValue name]</a></code></pre></div>
<p>We can try out the persistence support in the REPL:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" title="1"><span class="fu">$</span> pulp repl</a>
<a class="sourceLine" id="cb9-2" title="2"><span class="dt">PSCi</span>, version <span class="fl">0.11</span><span class="fu">.</span><span class="dv">6</span></a>
<a class="sourceLine" id="cb9-3" title="3"><span class="dt">Type</span> <span class="fu">:?</span> for help</a>
<a class="sourceLine" id="cb9-4" title="4"></a>
<a class="sourceLine" id="cb9-5" title="5"><span class="kw">import</span> <span class="dt">Prelude</span></a>
<a class="sourceLine" id="cb9-6" title="6"><span class="fu">&gt;</span></a>
<a class="sourceLine" id="cb9-7" title="7"><span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">SimpleService.Types</span></a>
<a class="sourceLine" id="cb9-8" title="8"><span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">Control.Monad.Aff</span> (launchAff, liftEff')</a>
<a class="sourceLine" id="cb9-9" title="9"><span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span></a>
<a class="sourceLine" id="cb9-10" title="10"><span class="fu">&gt;</span> user <span class="fu">=</span> <span class="dt">User</span> { <span class="fu">id:</span> <span class="dv">1</span>, name<span class="fu">:</span> <span class="st">&quot;Abhinav&quot;</span> }</a>
<a class="sourceLine" id="cb9-11" title="11"><span class="fu">&gt;</span> databaseConfig <span class="fu">=</span> {user<span class="fu">:</span> <span class="st">&quot;abhinav&quot;</span>, password<span class="fu">:</span> <span class="st">&quot;&quot;</span>, host<span class="fu">:</span> <span class="st">&quot;localhost&quot;</span>, port<span class="fu">:</span> <span class="dv">5432</span>, database<span class="fu">:</span> <span class="st">&quot;simple_service&quot;</span>, <span class="fu">max:</span> <span class="dv">10</span>, idleTimeoutMillis<span class="fu">:</span> <span class="dv">1000</span>}</a>
<a class="sourceLine" id="cb9-12" title="12"></a>
<a class="sourceLine" id="cb9-13" title="13"><span class="fu">&gt;</span> <span class="fu">:</span>paste</a>
<a class="sourceLine" id="cb9-14" title="14">… void <span class="fu">$</span> launchAff <span class="kw">do</span></a>
<a class="sourceLine" id="cb9-15" title="15">…   pool <span class="ot">&lt;-</span> PG.newPool databaseConfig</a>
<a class="sourceLine" id="cb9-16" title="16">…   PG.withConnection pool <span class="fu">$</span> \conn <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb9-17" title="17">…     PG.execute conn (<span class="dt">PG.Query</span> <span class="st">&quot;insert into users (id, name) values ($1, $2)&quot;</span>) user</a>
<a class="sourceLine" id="cb9-18" title="18">…</a>
<a class="sourceLine" id="cb9-19" title="19">unit</a>
<a class="sourceLine" id="cb9-20" title="20"></a>
<a class="sourceLine" id="cb9-21" title="21"><span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">Data.Foldable</span> (for_)</a>
<a class="sourceLine" id="cb9-22" title="22"><span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">Control.Monad.Eff.Console</span> (logShow)</a>
<a class="sourceLine" id="cb9-23" title="23"><span class="fu">&gt;</span> <span class="fu">:</span>paste</a>
<a class="sourceLine" id="cb9-24" title="24">… void <span class="fu">$</span> launchAff <span class="kw">do</span></a>
<a class="sourceLine" id="cb9-25" title="25">…   pool <span class="ot">&lt;-</span> PG.newPool databaseConfig</a>
<a class="sourceLine" id="cb9-26" title="26">…   PG.withConnection pool <span class="fu">$</span> \conn <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb9-27" title="27">…<span class="ot">     users ::</span> <span class="dt">Array</span> <span class="dt">User</span> <span class="ot">&lt;-</span> PG.query conn (<span class="dt">PG.Query</span> <span class="st">&quot;select id, name from users where id = $1&quot;</span>) (<span class="dt">PG.Row1</span> <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb9-28" title="28">…     liftEff' <span class="fu">$</span> void <span class="fu">$</span> for_ users logShow</a>
<a class="sourceLine" id="cb9-29" title="29">…</a>
<a class="sourceLine" id="cb9-30" title="30">unit</a>
<a class="sourceLine" id="cb9-31" title="31">(<span class="dt">User</span> { <span class="fu">id:</span> <span class="dv">1</span>, name<span class="fu">:</span> <span class="st">&quot;Abhinav&quot;</span> })</a></code></pre></div>
<p>We create the <code>databaseConfig</code> record with the configs needed to connect to the database. Using the record, we create a new Postgres connection pool (<code>PG.newPool</code>) and get a connection from it (<code>PG.withConnection</code>). We call <code>PG.execute</code> with the connection, the SQL insert query for the users table and the <code>User</code> instance, to insert the user into the table. All of this is done inside <a href="https://pursuit.purescript.org/packages/purescript-aff/3.1.0/docs/Control.Monad.Aff#v:launchAff" target="_blank" rel="noopener"><code>launchAff</code></a> which takes care of sequencing the callbacks correctly to make the asynchronous code look synchronous.</p>
<p>Similarly, in the second part, we query the table using <code>PG.query</code> function by calling it with a connection, the SQL select query and the <code>User</code> ID as the query parameter. It returns an <code>Array</code> of users which we log to the console using the <code>logShow</code> function.</p>
<p>We use this experiment to write the persistence related code in the <code>src/SimpleService/Persistence.purs</code> file:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" title="1"><span class="kw">module</span> <span class="dt">SimpleService.Persistence</span></a>
<a class="sourceLine" id="cb10-2" title="2">  ( insertUser</a>
<a class="sourceLine" id="cb10-3" title="3">  , findUser</a>
<a class="sourceLine" id="cb10-4" title="4">  , updateUser</a>
<a class="sourceLine" id="cb10-5" title="5">  , deleteUser</a>
<a class="sourceLine" id="cb10-6" title="6">  , listUsers</a>
<a class="sourceLine" id="cb10-7" title="7">  ) <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-8" title="8"></a>
<a class="sourceLine" id="cb10-9" title="9"><span class="kw">import</span> <span class="dt">Prelude</span></a>
<a class="sourceLine" id="cb10-10" title="10"></a>
<a class="sourceLine" id="cb10-11" title="11"><span class="kw">import</span> <span class="dt">Control.Monad.Aff</span> (<span class="dt">Aff</span>)</a>
<a class="sourceLine" id="cb10-12" title="12"><span class="kw">import</span> <span class="dt">Data.Array</span> <span class="kw">as</span> <span class="dt">Array</span></a>
<a class="sourceLine" id="cb10-13" title="13"><span class="kw">import</span> <span class="dt">Data.Maybe</span> (<span class="dt">Maybe</span>)</a>
<a class="sourceLine" id="cb10-14" title="14"><span class="kw">import</span> <span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span></a>
<a class="sourceLine" id="cb10-15" title="15"><span class="kw">import</span> <span class="dt">SimpleService.Types</span> (<span class="dt">User</span>(..), <span class="dt">UserID</span>)</a>
<a class="sourceLine" id="cb10-16" title="16"></a>
<a class="sourceLine" id="cb10-17" title="17"><span class="ot">insertUserQuery ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb10-18" title="18">insertUserQuery <span class="fu">=</span> <span class="st">&quot;insert into users (id, name) values ($1, $2)&quot;</span></a>
<a class="sourceLine" id="cb10-19" title="19"></a>
<a class="sourceLine" id="cb10-20" title="20"><span class="ot">findUserQuery ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb10-21" title="21">findUserQuery <span class="fu">=</span> <span class="st">&quot;select id, name from users where id = $1&quot;</span></a>
<a class="sourceLine" id="cb10-22" title="22"></a>
<a class="sourceLine" id="cb10-23" title="23"><span class="ot">updateUserQuery ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb10-24" title="24">updateUserQuery <span class="fu">=</span> <span class="st">&quot;update users set name = $1 where id = $2&quot;</span></a>
<a class="sourceLine" id="cb10-25" title="25"></a>
<a class="sourceLine" id="cb10-26" title="26"><span class="ot">deleteUserQuery ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb10-27" title="27">deleteUserQuery <span class="fu">=</span> <span class="st">&quot;delete from users where id = $1&quot;</span></a>
<a class="sourceLine" id="cb10-28" title="28"></a>
<a class="sourceLine" id="cb10-29" title="29"><span class="ot">listUsersQuery ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb10-30" title="30">listUsersQuery <span class="fu">=</span> <span class="st">&quot;select id, name from users&quot;</span></a>
<a class="sourceLine" id="cb10-31" title="31"></a>
<a class="sourceLine" id="cb10-32" title="32"><span class="ot">insertUser ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Connection</span> <span class="ot">-&gt;</span> <span class="dt">User</span></a>
<a class="sourceLine" id="cb10-33" title="33">           <span class="ot">-&gt;</span> <span class="dt">Aff</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff) <span class="dt">Unit</span></a>
<a class="sourceLine" id="cb10-34" title="34">insertUser conn user <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-35" title="35">  PG.execute conn (<span class="dt">PG.Query</span> insertUserQuery) user</a>
<a class="sourceLine" id="cb10-36" title="36"></a>
<a class="sourceLine" id="cb10-37" title="37"><span class="ot">findUser ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Connection</span> <span class="ot">-&gt;</span> <span class="dt">UserID</span></a>
<a class="sourceLine" id="cb10-38" title="38">         <span class="ot">-&gt;</span> <span class="dt">Aff</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff) (<span class="dt">Maybe</span> <span class="dt">User</span>)</a>
<a class="sourceLine" id="cb10-39" title="39">findUser conn userID <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-40" title="40">  <span class="fu">map</span> Array.head <span class="fu">$</span> PG.query conn (<span class="dt">PG.Query</span> findUserQuery) (<span class="dt">PG.Row1</span> userID)</a>
<a class="sourceLine" id="cb10-41" title="41"></a>
<a class="sourceLine" id="cb10-42" title="42"><span class="ot">updateUser ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Connection</span> <span class="ot">-&gt;</span> <span class="dt">User</span></a>
<a class="sourceLine" id="cb10-43" title="43">           <span class="ot">-&gt;</span> <span class="dt">Aff</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff) <span class="dt">Unit</span></a>
<a class="sourceLine" id="cb10-44" title="44">updateUser conn (<span class="dt">User</span> {<span class="fu">id</span>, name}) <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-45" title="45">  PG.execute conn (<span class="dt">PG.Query</span> updateUserQuery) (<span class="dt">PG.Row2</span> name <span class="fu">id</span>)</a>
<a class="sourceLine" id="cb10-46" title="46"></a>
<a class="sourceLine" id="cb10-47" title="47"><span class="ot">deleteUser ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Connection</span> <span class="ot">-&gt;</span> <span class="dt">UserID</span></a>
<a class="sourceLine" id="cb10-48" title="48">           <span class="ot">-&gt;</span> <span class="dt">Aff</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff) <span class="dt">Unit</span></a>
<a class="sourceLine" id="cb10-49" title="49">deleteUser conn userID <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-50" title="50">  PG.execute conn (<span class="dt">PG.Query</span> deleteUserQuery) (<span class="dt">PG.Row1</span> userID)</a>
<a class="sourceLine" id="cb10-51" title="51"></a>
<a class="sourceLine" id="cb10-52" title="52"><span class="ot">listUsers ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Connection</span></a>
<a class="sourceLine" id="cb10-53" title="53">          <span class="ot">-&gt;</span> <span class="dt">Aff</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff) (<span class="dt">Array</span> <span class="dt">User</span>)</a>
<a class="sourceLine" id="cb10-54" title="54">listUsers conn <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-55" title="55">  PG.query conn (<span class="dt">PG.Query</span> listUsersQuery) <span class="dt">PG.Row0</span></a></code></pre></div>
<h2 id="serving-it" data-track-content data-content-name="serving-it" data-content-piece="ps-simple-rest-service">Serving It<a href="#serving-it" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>We can now write a simple HTTP API over the persistence layer using <a href="https://expressjs.com" target="_blank" rel="noopener">Express</a> to provide CRUD functionality for users. Let’s install Express and <a href="https://pursuit.purescript.org/packages/purescript-express" target="_blank" rel="noopener">purescript-express</a>, the PureScript wrapper over it:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb11-1" title="1">$ <span class="ex">npm</span> install express --save</a>
<a class="sourceLine" id="cb11-2" title="2">$ <span class="ex">bower</span> install purescript-express --save</a></code></pre></div>
<h3 id="getting-a-user">Getting a User<a href="#getting-a-user" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<p>We do this top-down. First, we change <code>src/Main.purs</code> to run the HTTP server by providing the server port and database configuration:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" title="1"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-2" title="2"></a>
<a class="sourceLine" id="cb12-3" title="3"><span class="kw">import</span> <span class="dt">Prelude</span></a>
<a class="sourceLine" id="cb12-4" title="4"></a>
<a class="sourceLine" id="cb12-5" title="5"><span class="kw">import</span> <span class="dt">Control.Monad.Eff</span> (<span class="dt">Eff</span>)</a>
<a class="sourceLine" id="cb12-6" title="6"><span class="kw">import</span> <span class="dt">Control.Monad.Eff.Console</span> (<span class="dt">CONSOLE</span>)</a>
<a class="sourceLine" id="cb12-7" title="7"><span class="kw">import</span> <span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span></a>
<a class="sourceLine" id="cb12-8" title="8"><span class="kw">import</span> <span class="dt">Node.Express.Types</span> (<span class="dt">EXPRESS</span>)</a>
<a class="sourceLine" id="cb12-9" title="9"><span class="kw">import</span> <span class="dt">SimpleService.Server</span> (runServer)</a>
<a class="sourceLine" id="cb12-10" title="10"></a>
<a class="sourceLine" id="cb12-11" title="11"><span class="ot">main ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">Eff</span> (<span class="ot"> console ::</span> <span class="dt">CONSOLE</span></a>
<a class="sourceLine" id="cb12-12" title="12">                        ,<span class="ot"> express ::</span> <span class="dt">EXPRESS</span></a>
<a class="sourceLine" id="cb12-13" title="13">                        ,<span class="ot"> postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span></a>
<a class="sourceLine" id="cb12-14" title="14">                        <span class="fu">|</span> eff) <span class="dt">Unit</span></a>
<a class="sourceLine" id="cb12-15" title="15">main <span class="fu">=</span> runServer port databaseConfig</a>
<a class="sourceLine" id="cb12-16" title="16">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-17" title="17">    port <span class="fu">=</span> <span class="dv">4000</span></a>
<a class="sourceLine" id="cb12-18" title="18">    databaseConfig <span class="fu">=</span> { user<span class="fu">:</span> <span class="st">&quot;abhinav&quot;</span></a>
<a class="sourceLine" id="cb12-19" title="19">                     , password<span class="fu">:</span> <span class="st">&quot;&quot;</span></a>
<a class="sourceLine" id="cb12-20" title="20">                     , host<span class="fu">:</span> <span class="st">&quot;localhost&quot;</span></a>
<a class="sourceLine" id="cb12-21" title="21">                     , port<span class="fu">:</span> <span class="dv">5432</span></a>
<a class="sourceLine" id="cb12-22" title="22">                     , database<span class="fu">:</span> <span class="st">&quot;simple_service&quot;</span></a>
<a class="sourceLine" id="cb12-23" title="23">                     , <span class="fu">max:</span> <span class="dv">10</span></a>
<a class="sourceLine" id="cb12-24" title="24">                     , idleTimeoutMillis<span class="fu">:</span> <span class="dv">1000</span></a>
<a class="sourceLine" id="cb12-25" title="25">                     }</a></code></pre></div>
<p>Next, we wire up the server routes to the handlers in <code>src/SimpleService/Server.purs</code>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" title="1"><span class="kw">module</span> <span class="dt">SimpleService.Server</span> (runServer) <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-2" title="2"></a>
<a class="sourceLine" id="cb13-3" title="3"><span class="kw">import</span> <span class="dt">Prelude</span></a>
<a class="sourceLine" id="cb13-4" title="4"></a>
<a class="sourceLine" id="cb13-5" title="5"><span class="kw">import</span> <span class="dt">Control.Monad.Aff</span> (runAff)</a>
<a class="sourceLine" id="cb13-6" title="6"><span class="kw">import</span> <span class="dt">Control.Monad.Eff</span> (<span class="dt">Eff</span>)</a>
<a class="sourceLine" id="cb13-7" title="7"><span class="kw">import</span> <span class="dt">Control.Monad.Eff.Class</span> (liftEff)</a>
<a class="sourceLine" id="cb13-8" title="8"><span class="kw">import</span> <span class="dt">Control.Monad.Eff.Console</span> (<span class="dt">CONSOLE</span>, log, logShow)</a>
<a class="sourceLine" id="cb13-9" title="9"><span class="kw">import</span> <span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span></a>
<a class="sourceLine" id="cb13-10" title="10"><span class="kw">import</span> <span class="dt">Node.Express.App</span> (<span class="dt">App</span>, get, listenHttp)</a>
<a class="sourceLine" id="cb13-11" title="11"><span class="kw">import</span> <span class="dt">Node.Express.Types</span> (<span class="dt">EXPRESS</span>)</a>
<a class="sourceLine" id="cb13-12" title="12"><span class="kw">import</span> <span class="dt">SimpleService.Handler</span> (getUser)</a>
<a class="sourceLine" id="cb13-13" title="13"></a>
<a class="sourceLine" id="cb13-14" title="14"><span class="ot">app ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb13-15" title="15">app pool <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb13-16" title="16">  get <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> getUser pool</a>
<a class="sourceLine" id="cb13-17" title="17"></a>
<a class="sourceLine" id="cb13-18" title="18"><span class="ot">runServer ::</span> <span class="kw">forall</span> eff<span class="fu">.</span></a>
<a class="sourceLine" id="cb13-19" title="19">             <span class="dt">Int</span></a>
<a class="sourceLine" id="cb13-20" title="20">          <span class="ot">-&gt;</span> <span class="dt">PG.PoolConfiguration</span></a>
<a class="sourceLine" id="cb13-21" title="21">          <span class="ot">-&gt;</span> <span class="dt">Eff</span> (<span class="ot"> express ::</span> <span class="dt">EXPRESS</span></a>
<a class="sourceLine" id="cb13-22" title="22">                 ,<span class="ot"> postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span></a>
<a class="sourceLine" id="cb13-23" title="23">                 ,<span class="ot"> console ::</span> <span class="dt">CONSOLE</span></a>
<a class="sourceLine" id="cb13-24" title="24">                 <span class="fu">|</span> eff ) <span class="dt">Unit</span></a>
<a class="sourceLine" id="cb13-25" title="25">runServer port databaseConfig <span class="fu">=</span>  void <span class="fu">$</span> runAff logShow <span class="fu">pure</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb13-26" title="26">  pool <span class="ot">&lt;-</span> PG.newPool databaseConfig</a>
<a class="sourceLine" id="cb13-27" title="27">  <span class="kw">let</span> app' <span class="fu">=</span> app pool</a>
<a class="sourceLine" id="cb13-28" title="28">  void <span class="fu">$</span> liftEff <span class="fu">$</span> listenHttp app' port \_ <span class="ot">-&gt;</span> <span class="fu">log</span> <span class="fu">$</span> <span class="st">&quot;Server listening on :&quot;</span> <span class="fu">&lt;&gt;</span> <span class="fu">show</span> port</a></code></pre></div>
<p><code>runServer</code> creates a PostgreSQL connection pool and passes it to the <code>app</code> function which creates the Express application, which in turn, binds it to the handler <code>getUser</code>. Then it launches the HTTP server by calling <code>listenHttp</code>.</p>
<p>Finally, we write the actual <code>getUser</code> handler in <code>src/SimpleService/Handler.purs</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" title="1"><span class="kw">module</span> <span class="dt">SimpleService.Handler</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb14-2" title="2"></a>
<a class="sourceLine" id="cb14-3" title="3"><span class="kw">import</span> <span class="dt">Prelude</span></a>
<a class="sourceLine" id="cb14-4" title="4"></a>
<a class="sourceLine" id="cb14-5" title="5"><span class="kw">import</span> <span class="dt">Control.Monad.Aff.Class</span> (liftAff)</a>
<a class="sourceLine" id="cb14-6" title="6"><span class="kw">import</span> <span class="dt">Data.Foreign.Class</span> (encode)</a>
<a class="sourceLine" id="cb14-7" title="7"><span class="kw">import</span> <span class="dt">Data.Int</span> (fromString)</a>
<a class="sourceLine" id="cb14-8" title="8"><span class="kw">import</span> <span class="dt">Data.Maybe</span> (<span class="dt">Maybe</span>(..))</a>
<a class="sourceLine" id="cb14-9" title="9"><span class="kw">import</span> <span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span></a>
<a class="sourceLine" id="cb14-10" title="10"><span class="kw">import</span> <span class="dt">Node.Express.Handler</span> (<span class="dt">Handler</span>)</a>
<a class="sourceLine" id="cb14-11" title="11"><span class="kw">import</span> <span class="dt">Node.Express.Request</span> (getRouteParam)</a>
<a class="sourceLine" id="cb14-12" title="12"><span class="kw">import</span> <span class="dt">Node.Express.Response</span> (end, sendJson, setStatus)</a>
<a class="sourceLine" id="cb14-13" title="13"><span class="kw">import</span> <span class="dt">SimpleService.Persistence</span> <span class="kw">as</span> <span class="dt">P</span></a>
<a class="sourceLine" id="cb14-14" title="14"></a>
<a class="sourceLine" id="cb14-15" title="15"><span class="ot">getUser ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb14-16" title="16">getUser pool <span class="fu">=</span> getRouteParam <span class="st">&quot;id&quot;</span> <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb14-17" title="17">  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { <span class="fu">error:</span> <span class="st">&quot;User ID is required&quot;</span> }</a>
<a class="sourceLine" id="cb14-18" title="18">  <span class="dt">Just</span> sUserId <span class="ot">-&gt;</span> <span class="kw">case</span> fromString sUserId <span class="kw">of</span></a>
<a class="sourceLine" id="cb14-19" title="19">    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { <span class="fu">error:</span> <span class="st">&quot;User ID must be an integer: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }</a>
<a class="sourceLine" id="cb14-20" title="20">    <span class="dt">Just</span> userId <span class="ot">-&gt;</span> liftAff (PG.withConnection pool <span class="fu">$</span> <span class="fu">flip</span> P.findUser userId) <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb14-21" title="21">      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">404</span> { <span class="fu">error:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }</a>
<a class="sourceLine" id="cb14-22" title="22">      <span class="dt">Just</span> user <span class="ot">-&gt;</span> respond <span class="dv">200</span> (encode user)</a>
<a class="sourceLine" id="cb14-23" title="23"></a>
<a class="sourceLine" id="cb14-24" title="24"><span class="ot">respond ::</span> <span class="kw">forall</span> eff a<span class="fu">.</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Handler</span> eff</a>
<a class="sourceLine" id="cb14-25" title="25">respond status body <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb14-26" title="26">  setStatus status</a>
<a class="sourceLine" id="cb14-27" title="27">  sendJson body</a>
<a class="sourceLine" id="cb14-28" title="28"></a>
<a class="sourceLine" id="cb14-29" title="29"><span class="ot">respondNoContent ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> eff</a>
<a class="sourceLine" id="cb14-30" title="30">respondNoContent status <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb14-31" title="31">  setStatus status</a>
<a class="sourceLine" id="cb14-32" title="32">  end</a></code></pre></div>
<p><code>getUser</code> validates the route parameter for valid user ID, sending error HTTP responses in case of failures. It then calls <code>findUser</code> to find the user and returns appropriate response.</p>
<p>We can test this on the command-line using <a href="https://httpie.org" target="_blank" rel="noopener">HTTPie</a>. We run <code>pulp --watch run</code> in one terminal to start the server with file watching, and test it from another terminal:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb15-1" title="1">$ <span class="ex">pulp</span> --watch run</a>
<a class="sourceLine" id="cb15-2" title="2"><span class="ex">*</span> Building project in ps-simple-rest-service</a>
<a class="sourceLine" id="cb15-3" title="3"><span class="ex">*</span> Build successful.</a>
<a class="sourceLine" id="cb15-4" title="4"><span class="ex">Server</span> listening on :4000</a></code></pre></div>
<pre class="http"><code>$ http GET http://localhost:4000/v1/user/1 # should return the user we created earlier
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 25
Content-Type: application/json; charset=utf-8
Date: Sun, 10 Sep 2017 14:32:52 GMT
ETag: W/&quot;19-qmtK9XY+WDrqHTgqtFlV+h+NGOY&quot;
X-Powered-By: Express

{
    &quot;id&quot;: 1,
    &quot;name&quot;: &quot;Abhinav&quot;
}</code></pre>
<pre class="http"><code>$ http GET http://localhost:4000/v1/user/s
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 38
Content-Type: application/json; charset=utf-8
Date: Sun, 10 Sep 2017 14:36:04 GMT
ETag: W/&quot;26-//tvORl1gGDUMwgSaqbEpJhuadI&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User ID must be an integer: s&quot;
}</code></pre>
<pre class="http"><code>$ http GET http://localhost:4000/v1/user/2
HTTP/1.1 404 Not Found
Connection: keep-alive
Content-Length: 36
Content-Type: application/json; charset=utf-8
Date: Sun, 10 Sep 2017 14:36:11 GMT
ETag: W/&quot;24-IyD5VT4E8/m3kvpwycRBQunI7Uc&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User not found with id: 2&quot;
}</code></pre>
<h3 id="deleting-a-user">Deleting a User<a href="#deleting-a-user" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<p><code>deleteUser</code> handler is similar. We add the route in the <code>app</code> function in the <code>src/SimpleService/Server.purs</code> file:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" title="1"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb19-2" title="2"><span class="kw">import</span> <span class="dt">Node.Express.App</span> (<span class="dt">App</span>, delete, get, listenHttp)</a>
<a class="sourceLine" id="cb19-3" title="3"><span class="kw">import</span> <span class="dt">SimpleService.Handler</span> (deleteUser, getUser)</a>
<a class="sourceLine" id="cb19-4" title="4"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb19-5" title="5"></a>
<a class="sourceLine" id="cb19-6" title="6"><span class="ot">app ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb19-7" title="7">app pool <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb19-8" title="8">  get <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> getUser pool</a>
<a class="sourceLine" id="cb19-9" title="9">  delete <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> deleteUser pool</a>
<a class="sourceLine" id="cb19-10" title="10"></a>
<a class="sourceLine" id="cb19-11" title="11"><span class="co">-- previous code</span></a></code></pre></div>
<p>And we add the handler in the <code>src/SimpleService/Handler.purs</code> file:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" title="1"><span class="ot">deleteUser ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb20-2" title="2">deleteUser pool <span class="fu">=</span> getRouteParam <span class="st">&quot;id&quot;</span> <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb20-3" title="3">  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { <span class="fu">error:</span> <span class="st">&quot;User ID is required&quot;</span> }</a>
<a class="sourceLine" id="cb20-4" title="4">  <span class="dt">Just</span> sUserId <span class="ot">-&gt;</span> <span class="kw">case</span> fromString sUserId <span class="kw">of</span></a>
<a class="sourceLine" id="cb20-5" title="5">    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { <span class="fu">error:</span> <span class="st">&quot;User ID must be an integer: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }</a>
<a class="sourceLine" id="cb20-6" title="6">    <span class="dt">Just</span> userId <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb20-7" title="7">      found <span class="ot">&lt;-</span> liftAff <span class="fu">$</span> PG.withConnection pool \conn <span class="ot">-&gt;</span> PG.withTransaction conn <span class="kw">do</span></a>
<a class="sourceLine" id="cb20-8" title="8">        P.findUser conn userId <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb20-9" title="9">          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">pure</span> false</a>
<a class="sourceLine" id="cb20-10" title="10">          <span class="dt">Just</span> _  <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb20-11" title="11">            P.deleteUser conn userId</a>
<a class="sourceLine" id="cb20-12" title="12">            <span class="fu">pure</span> true</a>
<a class="sourceLine" id="cb20-13" title="13">      <span class="kw">if</span> found</a>
<a class="sourceLine" id="cb20-14" title="14">        <span class="kw">then</span> respondNoContent <span class="dv">204</span></a>
<a class="sourceLine" id="cb20-15" title="15">        <span class="kw">else</span> respond <span class="dv">404</span> { <span class="fu">error:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }</a></code></pre></div>
<p>After the usual validations on the route param, <code>deleteUser</code> tries to find the user by the given user ID and if found, it deletes the user. Both the persistence related functions are run inside a single SQL transaction using <code>PG.withTransaction</code> function. <code>deleteUser</code> return 404 status if the user is not found, else it returns 204 status.</p>
<p>Let’s try it out:</p>
<pre class="http"><code>$ http GET http://localhost:4000/v1/user/1
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 25
Content-Type: application/json; charset=utf-8
Date: Mon, 11 Sep 2017 05:10:50 GMT
ETag: W/&quot;19-GC9FAtbd81t7CtrQgsNuc8HITXU&quot;
X-Powered-By: Express

{
    &quot;id&quot;: 1,
    &quot;name&quot;: &quot;Abhinav&quot;
}</code></pre>
<pre class="http"><code>$ http DELETE http://localhost:4000/v1/user/1
HTTP/1.1 204 No Content
Connection: keep-alive
Date: Mon, 11 Sep 2017 05:10:56 GMT
X-Powered-By: Express</code></pre>
<pre class="http"><code>$ http GET http://localhost:4000/v1/user/1
HTTP/1.1 404 Not Found
Connection: keep-alive
Content-Length: 37
Content-Type: application/json; charset=utf-8
Date: Mon, 11 Sep 2017 05:11:03 GMT
ETag: W/&quot;25-Eoc4ZbEF73CyW8EGh6t2jqI8mLU&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User not found with id: 1&quot;
}</code></pre>
<pre class="http"><code>$ http DELETE http://localhost:4000/v1/user/1
HTTP/1.1 404 Not Found
Connection: keep-alive
Content-Length: 37
Content-Type: application/json; charset=utf-8
Date: Mon, 11 Sep 2017 05:11:05 GMT
ETag: W/&quot;25-Eoc4ZbEF73CyW8EGh6t2jqI8mLU&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User not found with id: 1&quot;
}</code></pre>
<div class="page-break">

</div>
<h3 id="creating-a-user">Creating a User<a href="#creating-a-user" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<p><code>createUser</code> handler is a bit more involved. First, we add an Express middleware to parse the body of the request as JSON. We use <a href="https://github.com/expressjs/body-parser" target="_blank" rel="noopener"><code>body-parser</code></a> for this and access it through PureScript <a href="https://github.com/purescript/documentation/blob/master/guides/FFI.md" target="_blank" rel="noopener">FFI</a>. We create a new file <code>src/SimpleService/Middleware/BodyParser.js</code> with the content:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb25-1" title="1"><span class="st">&quot;use strict&quot;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb25-2" title="2"></a>
<a class="sourceLine" id="cb25-3" title="3"><span class="kw">var</span> bodyParser <span class="op">=</span> <span class="at">require</span>(<span class="st">&quot;body-parser&quot;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb25-4" title="4"></a>
<a class="sourceLine" id="cb25-5" title="5"><span class="va">exports</span>.<span class="at">jsonBodyParser</span> <span class="op">=</span> <span class="va">bodyParser</span>.<span class="at">json</span>(<span class="op">{</span></a>
<a class="sourceLine" id="cb25-6" title="6">  <span class="dt">limit</span><span class="op">:</span> <span class="st">&quot;5mb&quot;</span></a>
<a class="sourceLine" id="cb25-7" title="7"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div>
<p>And write a wrapper for it in the file <code>src/SimpleService/Middleware/BodyParser.purs</code> with the content:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb26-1" title="1"><span class="kw">module</span> <span class="dt">SimpleService.Middleware.BodyParser</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb26-2" title="2"></a>
<a class="sourceLine" id="cb26-3" title="3"><span class="kw">import</span> <span class="dt">Prelude</span></a>
<a class="sourceLine" id="cb26-4" title="4"><span class="kw">import</span> <span class="dt">Data.Function.Uncurried</span> (<span class="dt">Fn3</span>)</a>
<a class="sourceLine" id="cb26-5" title="5"><span class="kw">import</span> <span class="dt">Node.Express.Types</span> (<span class="dt">ExpressM</span>, <span class="dt">Response</span>, <span class="dt">Request</span>)</a>
<a class="sourceLine" id="cb26-6" title="6"></a>
<a class="sourceLine" id="cb26-7" title="7">foreign <span class="kw">import</span> jsonBodyParser ::</a>
<a class="sourceLine" id="cb26-8" title="8">  <span class="kw">forall</span> e<span class="fu">.</span> <span class="dt">Fn3</span> <span class="dt">Request</span> <span class="dt">Response</span> (<span class="dt">ExpressM</span> e <span class="dt">Unit</span>) (<span class="dt">ExpressM</span> e <span class="dt">Unit</span>)</a></code></pre></div>
<p>We also install the <code>body-parser</code> npm dependency:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb27-1" title="1">$ <span class="ex">npm</span> install --save body-parser</a></code></pre></div>
<p>Next, we change the <code>app</code> function in the <code>src/SimpleService/Server.purs</code> file to add the middleware and the route:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb28-1" title="1"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb28-2" title="2"><span class="kw">import</span> <span class="dt">Node.Express.App</span> (<span class="dt">App</span>, delete, get, listenHttp, post, useExternal)</a>
<a class="sourceLine" id="cb28-3" title="3"><span class="kw">import</span> <span class="dt">SimpleService.Handler</span> (createUser, deleteUser, getUser)</a>
<a class="sourceLine" id="cb28-4" title="4"><span class="kw">import</span> <span class="dt">SimpleService.Middleware.BodyParser</span> (jsonBodyParser)</a>
<a class="sourceLine" id="cb28-5" title="5"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb28-6" title="6"></a>
<a class="sourceLine" id="cb28-7" title="7"><span class="ot">app ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb28-8" title="8">app pool <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb28-9" title="9">  useExternal jsonBodyParser</a>
<a class="sourceLine" id="cb28-10" title="10"></a>
<a class="sourceLine" id="cb28-11" title="11">  get <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> getUser pool</a>
<a class="sourceLine" id="cb28-12" title="12">  delete <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> deleteUser pool</a>
<a class="sourceLine" id="cb28-13" title="13">  post <span class="st">&quot;/v1/users&quot;</span> <span class="fu">$</span> createUser pool</a></code></pre></div>
<p>And finally, we write the handler in the <code>src/SimpleService/Handler.purs</code> file:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb29-1" title="1"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb29-2" title="2"><span class="kw">import</span> <span class="dt">Data.Either</span> (<span class="dt">Either</span>(..))</a>
<a class="sourceLine" id="cb29-3" title="3"><span class="kw">import</span> <span class="dt">Data.Foldable</span> (intercalate)</a>
<a class="sourceLine" id="cb29-4" title="4"><span class="kw">import</span> <span class="dt">Data.Foreign</span> (renderForeignError)</a>
<a class="sourceLine" id="cb29-5" title="5"><span class="kw">import</span> <span class="dt">Node.Express.Request</span> (getBody, getRouteParam)</a>
<a class="sourceLine" id="cb29-6" title="6"><span class="kw">import</span> <span class="dt">SimpleService.Types</span></a>
<a class="sourceLine" id="cb29-7" title="7"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb29-8" title="8"></a>
<a class="sourceLine" id="cb29-9" title="9"><span class="ot">createUser ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb29-10" title="10">createUser pool <span class="fu">=</span> getBody <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb29-11" title="11">  <span class="dt">Left</span> errs <span class="ot">-&gt;</span> respond <span class="dv">422</span> { <span class="fu">error:</span> intercalate <span class="st">&quot;, &quot;</span> <span class="fu">$</span> <span class="fu">map</span> renderForeignError errs}</a>
<a class="sourceLine" id="cb29-12" title="12">  <span class="dt">Right</span> u<span class="fu">@</span>(<span class="dt">User</span> user) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb29-13" title="13">    <span class="kw">if</span> user<span class="fu">.id</span> <span class="fu">&lt;=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb29-14" title="14">      <span class="kw">then</span> respond <span class="dv">422</span> { <span class="fu">error:</span> <span class="st">&quot;User ID must be positive: &quot;</span> <span class="fu">&lt;&gt;</span> <span class="fu">show</span> user<span class="fu">.id</span>}</a>
<a class="sourceLine" id="cb29-15" title="15">      <span class="kw">else</span> <span class="kw">if</span> user<span class="fu">.</span>name <span class="fu">==</span> <span class="st">&quot;&quot;</span></a>
<a class="sourceLine" id="cb29-16" title="16">        <span class="kw">then</span> respond <span class="dv">422</span> { <span class="fu">error:</span> <span class="st">&quot;User name must not be empty&quot;</span> }</a>
<a class="sourceLine" id="cb29-17" title="17">        <span class="kw">else</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb29-18" title="18">          liftAff (PG.withConnection pool <span class="fu">$</span> <span class="fu">flip</span> P.insertUser u)</a>
<a class="sourceLine" id="cb29-19" title="19">          respondNoContent <span class="dv">201</span></a></code></pre></div>
<p><code>createUser</code> calls <a href="https://pursuit.purescript.org/packages/purescript-express/0.5.2/docs/Node.Express.Request#v:getBody" target="_blank" rel="noopener"><code>getBody</code></a> which has type signature <code>forall e a. (Decode a) =&gt; HandlerM (express :: EXPRESS | e) (Either MultipleErrors a)</code>. It returns either a list of parsing errors or a parsed instance, which in our case is a <code>User</code>. In case of errors, we just return the errors rendered as string with a 422 status. If we get a parsed <code>User</code> instance, we do some validations on it, returning appropriate error messages. If all validations pass, we create the user in the database by calling <code>insertUser</code> from the persistence layer and respond with a status 201.</p>
<p>We can try it out:</p>
<pre class="http"><code>$ http POST http://localhost:4000/v1/users name=&quot;abhinav&quot;
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 97
Content-Type: application/json; charset=utf-8
Date: Mon, 11 Sep 2017 05:51:28 GMT
ETag: W/&quot;61-BgsrMukZpImcdwAJEKCZ+70WBb8&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;Error at array index 0: (ErrorAtProperty \&quot;id\&quot; (TypeMismatch \&quot;Int\&quot; \&quot;Undefined\&quot;))&quot;
}</code></pre>
<pre class="http"><code>$ http POST http://localhost:4000/v1/users id:=1 name=&quot;&quot;
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 39
Content-Type: application/json; charset=utf-8
Date: Mon, 11 Sep 2017 05:51:42 GMT
ETag: W/&quot;27-JQsh12xu/rEFdWy8REF4NMtBUB4&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User name must not be empty&quot;
}</code></pre>
<pre class="http"><code>$ http POST http://localhost:4000/v1/users id:=1 name=&quot;abhinav&quot;
HTTP/1.1 201 Created
Connection: keep-alive
Content-Length: 0
Date: Mon, 11 Sep 2017 05:52:23 GMT
X-Powered-By: Express</code></pre>
<pre class="http"><code>$ http GET http://localhost:4000/v1/user/1
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 25
Content-Type: application/json; charset=utf-8
Date: Mon, 11 Sep 2017 05:52:30 GMT
ETag: W/&quot;19-GC9FAtbd81t7CtrQgsNuc8HITXU&quot;
X-Powered-By: Express

{
    &quot;id&quot;: 1,
    &quot;name&quot;: &quot;abhinav&quot;
}</code></pre>
<p>First try returns a parsing failure because we didn’t provide the <code>id</code> field. Second try is a validation failure because the name was empty. Third try is a success which we confirm by doing a <code>GET</code> request next.</p>
<h3 id="updating-a-user">Updating a User<a href="#updating-a-user" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<p>We want to allow a user’s name to be updated through the API, but not the user’s ID. So we add a new type to <code>src/SimpleService/Types.purs</code> to represent a possible change in user’s name:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb34-1" title="1"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb34-2" title="2"><span class="kw">import</span> <span class="dt">Data.Foreign.NullOrUndefined</span> (<span class="dt">NullOrUndefined</span>)</a>
<a class="sourceLine" id="cb34-3" title="3"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb34-4" title="4"></a>
<a class="sourceLine" id="cb34-5" title="5"><span class="kw">newtype</span> <span class="dt">UserPatch</span> <span class="fu">=</span> <span class="dt">UserPatch</span> {<span class="ot"> name ::</span> <span class="dt">NullOrUndefined</span> <span class="dt">String</span> }</a>
<a class="sourceLine" id="cb34-6" title="6"></a>
<a class="sourceLine" id="cb34-7" title="7">derive <span class="kw">instance</span><span class="ot"> genericUserPatch ::</span> <span class="dt">Generic</span> <span class="dt">UserPatch</span> _</a>
<a class="sourceLine" id="cb34-8" title="8"></a>
<a class="sourceLine" id="cb34-9" title="9"><span class="kw">instance</span><span class="ot"> decodeUserPatch ::</span> <span class="dt">Decode</span> <span class="dt">UserPatch</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb34-10" title="10">  decode <span class="fu">=</span> genericDecode <span class="fu">$</span> defaultOptions { unwrapSingleConstructors <span class="fu">=</span> true }</a></code></pre></div>
<p><a href="https://pursuit.purescript.org/packages/purescript-foreign-generic/4.3.0/docs/Data.Foreign.NullOrUndefined#t:NullOrUndefined" target="_blank" rel="noopener"><code>NullOrUndefined</code></a> is a wrapper over <code>Maybe</code> with added support for Javascript <code>null</code> and <code>undefined</code> values. We define <code>UserPatch</code> as having a possibly null (or undefined) <code>name</code> field.</p>
<p>Now we can add the corresponding handler in <code>src/SimpleService/Handlers.purs</code>:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb35-1" title="1"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb35-2" title="2"><span class="kw">import</span> <span class="dt">Data.Foreign.NullOrUndefined</span> (unNullOrUndefined)</a>
<a class="sourceLine" id="cb35-3" title="3"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb35-4" title="4"></a>
<a class="sourceLine" id="cb35-5" title="5"><span class="ot">updateUser ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb35-6" title="6">updateUser pool <span class="fu">=</span> getRouteParam <span class="st">&quot;id&quot;</span> <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb35-7" title="7">  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { <span class="fu">error:</span> <span class="st">&quot;User ID is required&quot;</span> }</a>
<a class="sourceLine" id="cb35-8" title="8">  <span class="dt">Just</span> sUserId <span class="ot">-&gt;</span> <span class="kw">case</span> fromString sUserId <span class="kw">of</span></a>
<a class="sourceLine" id="cb35-9" title="9">    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { <span class="fu">error:</span> <span class="st">&quot;User ID must be positive: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }</a>
<a class="sourceLine" id="cb35-10" title="10">    <span class="dt">Just</span> userId <span class="ot">-&gt;</span> getBody <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb35-11" title="11">      <span class="dt">Left</span> errs <span class="ot">-&gt;</span> respond <span class="dv">422</span> { <span class="fu">error:</span> intercalate <span class="st">&quot;, &quot;</span> <span class="fu">$</span> <span class="fu">map</span> renderForeignError errs}</a>
<a class="sourceLine" id="cb35-12" title="12">      <span class="dt">Right</span> (<span class="dt">UserPatch</span> userPatch) <span class="ot">-&gt;</span> <span class="kw">case</span> unNullOrUndefined userPatch<span class="fu">.</span>name <span class="kw">of</span></a>
<a class="sourceLine" id="cb35-13" title="13">        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respondNoContent <span class="dv">204</span></a>
<a class="sourceLine" id="cb35-14" title="14">        <span class="dt">Just</span> userName <span class="ot">-&gt;</span> <span class="kw">if</span> userName <span class="fu">==</span> <span class="st">&quot;&quot;</span></a>
<a class="sourceLine" id="cb35-15" title="15">          <span class="kw">then</span> respond <span class="dv">422</span> { <span class="fu">error:</span> <span class="st">&quot;User name must not be empty&quot;</span> }</a>
<a class="sourceLine" id="cb35-16" title="16">          <span class="kw">else</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb35-17" title="17">            savedUser <span class="ot">&lt;-</span> liftAff <span class="fu">$</span> PG.withConnection pool \conn <span class="ot">-&gt;</span> PG.withTransaction conn <span class="kw">do</span></a>
<a class="sourceLine" id="cb35-18" title="18">              P.findUser conn userId <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span></a>
<a class="sourceLine" id="cb35-19" title="19">                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">pure</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb35-20" title="20">                <span class="dt">Just</span> (<span class="dt">User</span> user) <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb35-21" title="21">                  <span class="kw">let</span> user' <span class="fu">=</span> <span class="dt">User</span> (user { name <span class="fu">=</span> userName })</a>
<a class="sourceLine" id="cb35-22" title="22">                  P.updateUser conn user'</a>
<a class="sourceLine" id="cb35-23" title="23">                  <span class="fu">pure</span> <span class="fu">$</span> <span class="dt">Just</span> user'</a>
<a class="sourceLine" id="cb35-24" title="24">            <span class="kw">case</span> savedUser <span class="kw">of</span></a>
<a class="sourceLine" id="cb35-25" title="25">              <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">404</span> { <span class="fu">error:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }</a>
<a class="sourceLine" id="cb35-26" title="26">              <span class="dt">Just</span> user <span class="ot">-&gt;</span> respond <span class="dv">200</span> (encode user)</a></code></pre></div>
<p>After checking for a valid user ID as before, we get the decoded request body as a <code>UserPatch</code> instance. If the path does not have the <code>name</code> field or has it as <code>null</code>, there is nothing to do and we respond with a 204 status. If the user’s name is present in the patch, we validate it for non-emptiness. Then, within a database transaction, we try to find the user with the given ID, responding with a 404 status if the user is not found. If the user is found, we update the user’s name in the database, and respond with a 200 status and the saved user encoded as the JSON response body.</p>
<p>Finally, we can add the route to our server’s router in <code>src/SimpleService/Server.purs</code> to make the functionality available:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb36-1" title="1"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb36-2" title="2"><span class="kw">import</span> <span class="dt">Node.Express.App</span> (<span class="dt">App</span>, delete, get, http, listenHttp, post, useExternal)</a>
<a class="sourceLine" id="cb36-3" title="3"><span class="kw">import</span> <span class="dt">Node.Express.Types</span> (<span class="dt">EXPRESS</span>, <span class="dt">Method</span>(..))</a>
<a class="sourceLine" id="cb36-4" title="4"><span class="kw">import</span> <span class="dt">SimpleService.Handler</span> (createUser, deleteUser, getUser, updateUser)</a>
<a class="sourceLine" id="cb36-5" title="5"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb36-6" title="6"></a>
<a class="sourceLine" id="cb36-7" title="7"><span class="ot">app ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb36-8" title="8">app pool <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb36-9" title="9">  useExternal jsonBodyParser</a>
<a class="sourceLine" id="cb36-10" title="10"></a>
<a class="sourceLine" id="cb36-11" title="11">  get <span class="st">&quot;/v1/user/:id&quot;</span>    <span class="fu">$</span> getUser pool</a>
<a class="sourceLine" id="cb36-12" title="12">  delete <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> deleteUser pool</a>
<a class="sourceLine" id="cb36-13" title="13">  post <span class="st">&quot;/v1/users&quot;</span>      <span class="fu">$</span> createUser pool</a>
<a class="sourceLine" id="cb36-14" title="14">  patch <span class="st">&quot;/v1/user/:id&quot;</span>  <span class="fu">$</span> updateUser pool</a>
<a class="sourceLine" id="cb36-15" title="15">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb36-16" title="16">    patch <span class="fu">=</span> http (<span class="dt">CustomMethod</span> <span class="st">&quot;patch&quot;</span>)</a></code></pre></div>
<p>We can try it out now:</p>
<pre class="http"><code>$ http GET http://localhost:4000/v1/user/1
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 26
Content-Type: application/json; charset=utf-8
Date: Fri, 11 Sep 2017 06:41:10 GMT
ETag: W/&quot;1a-hoLBx55zeY8nZFWJh/kM05pXwSA&quot;
X-Powered-By: Express

{
    &quot;id&quot;: 1,
    &quot;name&quot;: &quot;abhinav&quot;
}</code></pre>
<pre class="http"><code>$ http PATCH http://localhost:4000/v1/user/1 name=abhinavsarkar
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 31
Content-Type: application/json; charset=utf-8
Date: Fri, 11 Sep 2017 06:41:36 GMT
ETag: W/&quot;1f-EG5i0hq/hYhF0BsuheD9hNXeBpI&quot;
X-Powered-By: Express

{
    &quot;id&quot;: 1,
    &quot;name&quot;: &quot;abhinavsarkar&quot;
}</code></pre>
<pre class="http"><code>$ http GET http://localhost:4000/v1/user/1
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 31
Content-Type: application/json; charset=utf-8
Date: Fri, 11 Sep 2017 06:41:40 GMT
ETag: W/&quot;1f-EG5i0hq/hYhF0BsuheD9hNXeBpI&quot;
X-Powered-By: Express

{
    &quot;id&quot;: 1,
    &quot;name&quot;: &quot;abhinavsarkar&quot;
}</code></pre>
<pre class="http"><code>$ http PATCH http://localhost:4000/v1/user/1
HTTP/1.1 204 No Content
Connection: keep-alive
Date: Fri, 11 Sep 2017 06:42:31 GMT
X-Powered-By: Express</code></pre>
<pre class="http"><code>$ http PATCH http://localhost:4000/v1/user/1 name=&quot;&quot;
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 39
Content-Type: application/json; charset=utf-8
Date: Fri, 11 Sep 2017 06:43:17 GMT
ETag: W/&quot;27-JQsh12xu/rEFdWy8REF4NMtBUB4&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User name must not be empty&quot;
}</code></pre>
<div class="page-break">

</div>
<h3 id="listing-all-users">Listing all Users<a href="#listing-all-users" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<p>Listing all users is quite simple since it doesn’t require us to take any request parameter.</p>
<p>We add the handler to the <code>src/SimpleService/Handler.purs</code> file:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb42-1" title="1"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb42-2" title="2"><span class="ot">listUsers ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb42-3" title="3">listUsers pool <span class="fu">=</span> liftAff (PG.withConnection pool P.listUsers) <span class="fu">&gt;&gt;=</span> encode <span class="fu">&gt;&gt;&gt;</span> respond <span class="dv">200</span></a></code></pre></div>
<p>And the route to the <code>src/SimpleService/Server.purs</code> file:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb43-1" title="1"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb43-2" title="2"><span class="kw">import</span> <span class="dt">SimpleService.Handler</span> (createUser, deleteUser, getUser, listUsers, updateUser)</a>
<a class="sourceLine" id="cb43-3" title="3"><span class="co">-- previous code</span></a>
<a class="sourceLine" id="cb43-4" title="4"></a>
<a class="sourceLine" id="cb43-5" title="5"><span class="ot">app ::</span> <span class="kw">forall</span> eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)</a>
<a class="sourceLine" id="cb43-6" title="6">app pool <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb43-7" title="7">  useExternal jsonBodyParser</a>
<a class="sourceLine" id="cb43-8" title="8"></a>
<a class="sourceLine" id="cb43-9" title="9">  get <span class="st">&quot;/v1/user/:id&quot;</span>    <span class="fu">$</span> getUser pool</a>
<a class="sourceLine" id="cb43-10" title="10">  delete <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> deleteUser pool</a>
<a class="sourceLine" id="cb43-11" title="11">  post <span class="st">&quot;/v1/users&quot;</span>      <span class="fu">$</span> createUser pool</a>
<a class="sourceLine" id="cb43-12" title="12">  patch <span class="st">&quot;/v1/user/:id&quot;</span>  <span class="fu">$</span> updateUser pool</a>
<a class="sourceLine" id="cb43-13" title="13">  get <span class="st">&quot;/v1/users&quot;</span>       <span class="fu">$</span> listUsers pool</a>
<a class="sourceLine" id="cb43-14" title="14">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb43-15" title="15">    patch <span class="fu">=</span> http (<span class="dt">CustomMethod</span> <span class="st">&quot;patch&quot;</span>)</a></code></pre></div>
<p>And that’s it. We can test this endpoint:</p>
<pre class="http"><code>$ http POST http://localhost:4000/v1/users id:=2 name=sarkarabhinav
HTTP/1.1 201 Created
Connection: keep-alive
Content-Length: 0
Date: Fri, 11 Sep 2017 07:06:24 GMT
X-Powered-By: Express</code></pre>
<pre class="http"><code>$ http GET http://localhost:4000/v1/users
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 65
Content-Type: application/json; charset=utf-8
Date: Fri, 11 Sep 2017 07:06:27 GMT
ETag: W/&quot;41-btt9uNdG+9A1RO7SCLOsyMmIyFo&quot;
X-Powered-By: Express

[
    {
        &quot;id&quot;: 1,
        &quot;name&quot;: &quot;abhinavsarkar&quot;
    },
    {
        &quot;id&quot;: 2,
        &quot;name&quot;: &quot;sarkarabhinav&quot;
    }
]</code></pre>
<h2 id="conclusion" data-track-content data-content-name="conclusion" data-content-piece="ps-simple-rest-service">Conclusion<a href="#conclusion" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>That concludes the first part of the two-part tutorial. We learned how to set up a PureScript project, how to access a Postgres database and how to create a JSON REST API over the database. The code till the end of this part can be found in <a href="https://github.com/abhin4v/ps-simple-rest-service/tree/9fdfe3a15508a3c29bd4bc96310fcf52b1022678" target="_blank" rel="noopener">github</a>. In the <a href="https://abhinavsarkar.net/posts/ps-simple-rest-service-2/">next</a> part, we’ll learn how to do API validation, application configuration and logging. Discuss this post in the <a href="https://abhinavsarkar.net/posts/ps-simple-rest-service/#comment-container">comments</a>.</p><p>If you liked this post, please <a href="https://abhinavsarkar.net/posts/ps-simple-rest-service/#comment-container">leave a comment</a>.</p><img src="https://anna.abhinavsarkar.net/piwik.php?idsite=1&amp;rec=1" style="border:0; display: none;" />]]></summary>
</entry>

</feed>
