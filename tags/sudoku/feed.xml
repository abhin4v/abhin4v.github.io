<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Posts tagged ‘sudoku’ on abhinavsarkar.net</title>
    <link href="https://abhinavsarkar.net/tags/sudoku/feed.xml" rel="self" />
    <link href="https://abhinavsarkar.net" />
    <id>https://abhinavsarkar.net/tags/sudoku/feed.xml</id>
    <author>
        <name>Abhinv Sarkar</name>
        <email>abhinav@abhinavsarkar.net</email>
    </author>
    <updated>2018-07-11T00:00:00Z</updated>
    <entry>
    <title>Fast Sudoku Solver in Haskell #2: A 200x Faster Solution</title>
    <link href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/" />
    <id>https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/</id>
    <published>2018-07-11T00:00:00Z</published>
    <updated>2018-07-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ert">
16 minute read
</div>
<p>In the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/">first part</a> of this series of posts, we wrote a simple <a href="https://en.wikipedia.org/wiki/Sudoku" target="_blank" rel="noopener">Sudoku</a> solver in <a href="https://www.haskell.org/" target="_blank" rel="noopener">Haskell</a>. It used a <a href="https://en.wikipedia.org/wiki/Constraint_satisfaction_problem" target="_blank" rel="noopener">constraint satisfaction</a> algorithm with <a href="https://en.wikipedia.org/wiki/Depth-first_search" target="_blank" rel="noopener">backtracking</a>. The solution worked well but was very slow. In this post, we are going to improve it and make it <strong>fast</strong>.</p>
<!--more-->
<p>This is the second post in a series of posts:</p>
<ol type="1">
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/">Fast Sudoku Solver in Haskell #1: A Simple Solution</a></li>
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/">Fast Sudoku Solver in Haskell #2: A 200x Faster Solution</a></li>
</ol>
<p>Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/8xyfad/fast_sudoku_solver_in_haskell_2_a_200x_faster/" target="_blank" rel="noopener">r/haskell</a>.</p>
<nav id="toc" class="right-toc"><h3>Contents</h3><ol><li><a href="#quick-recap">Quick Recap</a></li><li><a href="#constraints-and-corollaries">Constraints and Corollaries</a></li><li><a href="#singles-twins-and-triplets">Singles, Twins and Triplets</a></li><li><a href="#a-little-forward-a-little-backward">A Little Forward, a Little Backward</a></li><li><a href="#pruning-the-cells-exclusively">Pruning the Cells, Exclusively</a></li><li><a href="#faster-than-a-speeding-bullet">Faster than a Speeding Bullet!</a><ol><li><a href="#update">Update</a></li></ol></li><li><a href="#conclusion">Conclusion</a></li></ol></nav>
<h2 id="quick-recap" data-track-content data-content-name="quick-recap" data-content-piece="fast-sudoku-solver-in-haskell-2">Quick Recap<a href="#quick-recap" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p><a href="https://en.wikipedia.org/wiki/Sudoku" target="_blank" rel="noopener">Sudoku</a> is a number placement puzzle. It consists of a 9x9 grid which is to be filled with digits from 1 to 9 such that each row, each column and each of the nine 3x3 sub-grids contain all the digits. Some of the cells of the grid come pre-filled and the player has to fill the rest.</p>
<p>In the previous post, we implemented a simple Sudoku solver without paying much attention to its performance characteristics. We ran<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a> some of <a href="https://abhinavsarkar.net/files/sudoku17.txt.bz2">17-clue puzzles</a><a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a> through our program to see how fast it was:</p>
<pre class="plain"><code>$ head -n100 sudoku17.txt | time stack exec sudoku
... output omitted ...
      116.70 real       198.09 user        94.46 sys</code></pre>
<p>So, it took about 117 seconds to solve one hundred puzzles. At this speed, it would take about 16 hours to solve all the 49151 puzzles contained in the file. This is way too slow. We need to find ways to make it faster. Let’s go back to the drawing board.</p>
<div class="page-break">

</div>
<h2 id="constraints-and-corollaries" data-track-content data-content-name="constraints-and-corollaries" data-content-piece="fast-sudoku-solver-in-haskell-2">Constraints and Corollaries<a href="#constraints-and-corollaries" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>In a Sudoku puzzle, we have a partially filled 9x9 grid which we have to fill completely while following the constraints of the game.</p>
<pre class="plain low-line-height"><code>+-------+-------+-------+
| . . . | . . . | . 1 . |
| 4 . . | . . . | . . . |
| . 2 . | . . . | . . . |
+-------+-------+-------+
| . . . | . 5 . | 4 . 7 |
| . . 8 | . . . | 3 . . |
| . . 1 | . 9 . | . . . |
+-------+-------+-------+
| 3 . . | 4 . . | 2 . . |
| . 5 . | 1 . . | . . . |
| . . . | 8 . 6 | . . . |
+-------+-------+-------+
    A sample puzzle

+-------+-------+-------+
| 6 9 3 | 7 8 4 | 5 1 2 |
| 4 8 7 | 5 1 2 | 9 3 6 |
| 1 2 5 | 9 6 3 | 8 7 4 |
+-------+-------+-------+
| 9 3 2 | 6 5 1 | 4 8 7 |
| 5 6 8 | 2 4 7 | 3 9 1 |
| 7 4 1 | 3 9 8 | 6 2 5 |
+-------+-------+-------+
| 3 1 9 | 4 7 5 | 2 6 8 |
| 8 5 6 | 1 2 9 | 7 4 3 |
| 2 7 4 | 8 3 6 | 1 5 9 |
+-------+-------+-------+
    and its solution</code></pre>
<p>Earlier, we followed a simple pruning algorithm which removed all the solved (or <em>fixed</em>) digits from neighbours of the fixed cells. We repeated the pruning till the fixed and non-fixed values in the grid stopped changing (or the grid <em>settled</em>). Here’s an example of a grid before pruning:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] | [123456789] 1           [123456789] |
| 4           [123456789] [123456789] | [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] |
| [123456789] 2           [123456789] | [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [123456789] [123456789] [123456789] | [123456789] 5           [123456789] | 4           [123456789] 7           |
| [123456789] [123456789] 8           | [123456789] [123456789] [123456789] | 3           [123456789] [123456789] |
| [123456789] [123456789] 1           | [123456789] 9           [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [123456789] [123456789] | 4           [123456789] [123456789] | 2           [123456789] [123456789] |
| [123456789] 5           [123456789] | 1           [123456789] [123456789] | [123456789] [123456789] [123456789] |
| [123456789] [123456789] [123456789] | 8           [123456789] 6           | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>And here’s the same grid when it settles after repeated pruning:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [    56789] [  3  6789] [  3 567 9] | [ 23 567 9] [ 234 6 8 ] [ 2345 789] | [    56789] 1           [ 23456 89] |
| 4           [1 3  6789] [  3 567 9] | [ 23 567 9] [123  6 8 ] [123 5 789] | [    56789] [ 23 56789] [ 23 56 89] |
| [1   56789] 2           [  3 567 9] | [  3 567 9] [1 34 6 8 ] [1 345 789] | [    56789] [  3456789] [  3456 89] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [ 2   6  9] [  3  6  9] [ 23  6  9] | [ 23  6   ] 5           [123    8 ] | 4           [ 2   6 89] 7           |
| [ 2  567 9] [   4 67 9] 8           | [ 2   67  ] [12 4 6   ] [12 4  7  ] | 3           [ 2  56  9] [12  56  9] |
| [ 2  567  ] [  34 67  ] 1           | [ 23  67  ] 9           [ 234  78 ] | [    56 8 ] [ 2  56 8 ] [ 2  56 8 ] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [1    6 89] [     6  9] | 4           7           [    5   9] | 2           [    56 89] [1   56 89] |
| [ 2   6789] 5           [ 2 4 67 9] | 1           [ 23      ] [ 23     9] | [     6789] [  34 6789] [  34 6 89] |
| [12    7 9] [1  4  7 9] [ 2 4  7 9] | 8           [ 23      ] 6           | [1   5 7 9] [  345 7 9] [1 345   9] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>We see how the possibilities conflicting with the fixed values are removed. We also see how some of the non-fixed cells turn into fixed ones as all their other possible values get eliminated.</p>
<p>This simple strategy follows directly from the constraints of Sudoku. But, are there more complex strategies which are implied indirectly?</p>
<div class="page-break">

</div>
<h2 id="singles-twins-and-triplets" data-track-content data-content-name="singles-twins-and-triplets" data-content-piece="fast-sudoku-solver-in-haskell-2">Singles, Twins and Triplets<a href="#singles-twins-and-triplets" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Let’s have a look at this sample row captured from a solution in progress:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| 4           [ 2   6 89] 7           | 3           [ 2  56  9] [12  56  9] | [    56 8 ] [ 2  56 8 ] [ 2  56 8 ] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>Notice how the sixth cell is the only one with <code>1</code> as a possibility in it. It is obvious that we should fix the sixth cell to <code>1</code> as we cannot place <code>1</code> in any other cell in the row. Let’s call this the <em>Singles</em><a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a> scenario.</p>
<p>But, our current solution will not fix the sixth cell to <code>1</code> till one of these cases arise:</p>
<ol type="a">
<li>all other possibilities of the cell are pruned away, or,</li>
<li>the cell is chosen as pivot in the <code>nextGrids</code> function and <code>1</code> is chosen as the value to fix.</li>
</ol>
<p>This may take very long and lead to a longer solution time. Let’s assume that we recognize the Singles scenario while pruning cells and fix the cell to <code>1</code> right then. That would cut down the search tree by a lot and make the solution much faster.</p>
<p>It turns out, we can generalize this pattern. Let’s check out this sample row from middle of a solution:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [1  4    9] 3           [1  4567 9] | [1  4   89] [1  4 6 89] [1  4 6 89] | [1  4   89] 2           [1  456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>It is a bit difficult to notice with the naked eye but there’s something special here too. The digits <code>5</code> and <code>7</code> occur only in the third and the ninth cells. Though they are accompanied by other digits in those cells, they are not present in any other cells. This means, we can place <code>5</code> and <code>7</code> either in the third or the ninth cell and no other cells. This implies that we can prune the third and ninth cells to have only <code>5</code> and <code>7</code> like this:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [1  4    9] 3           [    5 7  ] | [1  4   89] [1  4 6 89] [1  4 6 89] | [1  4   89] 2           [    5 7  ] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>This is the <em>Twins</em> scenario. As we can imagine, this pattern extends to groups of three digits and beyond. When three digits can be found only in three cells in a block, it is the <em>Triplets</em> scenario, as in the example below:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [   45 7  ] [   45 7  ] [    5 7  ] | 2           [  3 5  89] 6           | 1           [  34   89] [  34   89] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>In this case, the triplet digits are <code>3</code>, <code>8</code> and <code>9</code>. And as before, we can prune the block by fixing these digits in their cells:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [   45 7  ] [   45 7  ] [    5 7  ] | 2           [  3    89] 6           | 1           [  3    89] [  3    89] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>Let’s call these three scenarios <em>Exclusives</em> in general.</p>
<p>We can extend this to <em>Quadruplets</em> scenario and further. But such scenarios occur rarely in a 9x9 Sudoku puzzle. Trying to find them may end up being more computationally expensive than the benefit we may get in solution time speedup by finding them.</p>
<p>Now that we have discovered these new strategies to prune cells, let’s implement them in Haskell.</p>
<div class="page-break">

</div>
<h2 id="a-little-forward-a-little-backward" data-track-content data-content-name="a-little-forward-a-little-backward" data-content-piece="fast-sudoku-solver-in-haskell-2">A Little Forward, a Little Backward<a href="#a-little-forward-a-little-backward" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>We can implement the three new strategies to prune cells as one function for each. However, we can actually implement all these strategies in a single function. But, this function is a bit more complex than the previous pruning function. So first, let’s try to understand its working using tables. Let’s take this sample row:</p>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [   4 6  9] 1           5           | [     6  9] 7           [ 23  6 89] | [     6  9] [ 23  6 89] [ 23  6 89] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<p>First, we make a table mapping the digits to the cells in which they occur, excluding the fixed cells:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Digit</th>
<th style="text-align: right;">Cells</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">2</td>
<td style="text-align: right;">6, 8, 9</td>
</tr>
<tr class="even">
<td style="text-align: left;">3</td>
<td style="text-align: right;">6, 8, 9</td>
</tr>
<tr class="odd">
<td style="text-align: left;">4</td>
<td style="text-align: right;">1</td>
</tr>
<tr class="even">
<td style="text-align: left;">6</td>
<td style="text-align: right;">1, 4, 6, 7, 8, 9</td>
</tr>
<tr class="odd">
<td style="text-align: left;">8</td>
<td style="text-align: right;">6, 8, 9</td>
</tr>
<tr class="even">
<td style="text-align: left;">9</td>
<td style="text-align: right;">1, 4, 6, 7, 8, 9</td>
</tr>
</tbody>
</table>
</div>
<p>Then, we flip this table and collect all the digits that occur in the same set of cells:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cells</th>
<th style="text-align: right;">Digits</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">1</td>
<td style="text-align: right;">4</td>
</tr>
<tr class="even">
<td style="text-align: left;">6, 8, 9</td>
<td style="text-align: right;">2, 3, 8</td>
</tr>
<tr class="odd">
<td style="text-align: left;">1, 4, 6, 7, 8, 9</td>
<td style="text-align: right;">6, 9</td>
</tr>
</tbody>
</table>
</div>
<p>And finally, we remove the rows of the table in which the count of the cells is not the same as the count of the digits:</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cells</th>
<th style="text-align: right;">Digits</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">1</td>
<td style="text-align: right;">4</td>
</tr>
<tr class="even">
<td style="text-align: left;">6, 8, 9</td>
<td style="text-align: right;">2, 3, 8</td>
</tr>
</tbody>
</table>
</div>
<p>Voilà! We have found a Single <code>4</code> and a set of Triplets <code>2</code>, <code>3</code> and <code>8</code>. You can go over the puzzle row and verify that this indeed is the case.</p>
<p>Translating this logic to Haskell is quite easy now:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="ot">isPossible ::</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">isPossible (<span class="dt">Possible</span> _) <span class="fu">=</span> <span class="dt">True</span></a>
<a class="sourceLine" id="cb11-3" data-line-number="3">isPossible _            <span class="fu">=</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb11-4" data-line-number="4"></a>
<a class="sourceLine" id="cb11-5" data-line-number="5"><span class="ot">exclusivePossibilities ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> [[<span class="dt">Int</span>]]</a>
<a class="sourceLine" id="cb11-6" data-line-number="6">exclusivePossibilities row <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-7" data-line-number="7">  <span class="co">-- input</span></a>
<a class="sourceLine" id="cb11-8" data-line-number="8">  row</a>
<a class="sourceLine" id="cb11-9" data-line-number="9">  <span class="co">-- [Possible [4,6,9], Fixed 1, Fixed 5, Possible [6,9], Fixed 7, Possible [2,3,6,8,9],</span></a>
<a class="sourceLine" id="cb11-10" data-line-number="10">  <span class="co">-- Possible [6,9], Possible [2,3,6,8,9], Possible [2,3,6,8,9]]</span></a>
<a class="sourceLine" id="cb11-11" data-line-number="11"></a>
<a class="sourceLine" id="cb11-12" data-line-number="12">  <span class="co">-- step 1</span></a>
<a class="sourceLine" id="cb11-13" data-line-number="13">  <span class="fu">&amp;</span> zip [<span class="dv">1</span><span class="fu">..</span><span class="dv">9</span>]</a>
<a class="sourceLine" id="cb11-14" data-line-number="14">  <span class="co">-- [(1,Possible [4,6,9]),(2,Fixed 1),(3,Fixed 5),(4,Possible [6,9]),(5,Fixed 7),</span></a>
<a class="sourceLine" id="cb11-15" data-line-number="15">  <span class="co">-- (6,Possible [2,3,6,8,9]),(7,Possible [6,9]),(8,Possible [2,3,6,8,9]),</span></a>
<a class="sourceLine" id="cb11-16" data-line-number="16">  <span class="co">-- (9,Possible [2,3,6,8,9])]</span></a>
<a class="sourceLine" id="cb11-17" data-line-number="17"></a>
<a class="sourceLine" id="cb11-18" data-line-number="18">  <span class="co">-- step 2</span></a>
<a class="sourceLine" id="cb11-19" data-line-number="19">  <span class="fu">&amp;</span> filter (isPossible <span class="fu">.</span> snd)</a>
<a class="sourceLine" id="cb11-20" data-line-number="20">  <span class="co">-- [(1,Possible [4,6,9]),(4,Possible [6,9]),(6,Possible [2,3,6,8,9]),</span></a>
<a class="sourceLine" id="cb11-21" data-line-number="21">  <span class="co">-- (7,Possible [6,9]), (8,Possible [2,3,6,8,9]),(9,Possible [2,3,6,8,9])]</span></a>
<a class="sourceLine" id="cb11-22" data-line-number="22"></a>
<a class="sourceLine" id="cb11-23" data-line-number="23">  <span class="co">-- step 3</span></a>
<a class="sourceLine" id="cb11-24" data-line-number="24">  <span class="fu">&amp;</span> Data.List.foldl'</a>
<a class="sourceLine" id="cb11-25" data-line-number="25">      (\acc <span class="fu">~</span>(i, <span class="dt">Possible</span> xs) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb11-26" data-line-number="26">        Data.List.foldl' (\acc' x <span class="ot">-&gt;</span> Map.insertWith prepend x [i] acc') acc xs)</a>
<a class="sourceLine" id="cb11-27" data-line-number="27">      Map.empty</a>
<a class="sourceLine" id="cb11-28" data-line-number="28">  <span class="co">-- fromList [(2,[9,8,6]),(3,[9,8,6]),(4,[1]),(6,[9,8,7,6,4,1]),(8,[9,8,6]),</span></a>
<a class="sourceLine" id="cb11-29" data-line-number="29">  <span class="co">-- (9,[9,8,7,6,4,1])]</span></a>
<a class="sourceLine" id="cb11-30" data-line-number="30"></a>
<a class="sourceLine" id="cb11-31" data-line-number="31">  <span class="co">-- step 4</span></a>
<a class="sourceLine" id="cb11-32" data-line-number="32">  <span class="fu">&amp;</span> Map.filter ((<span class="fu">&lt;</span> <span class="dv">4</span>) <span class="fu">.</span> length)</a>
<a class="sourceLine" id="cb11-33" data-line-number="33">  <span class="co">-- fromList [(2,[9,8,6]),(3,[9,8,6]),(4,[1]),(8,[9,8,6])]</span></a>
<a class="sourceLine" id="cb11-34" data-line-number="34"></a>
<a class="sourceLine" id="cb11-35" data-line-number="35">  <span class="co">-- step 5</span></a>
<a class="sourceLine" id="cb11-36" data-line-number="36">  <span class="fu">&amp;</span> Map.foldlWithKey'(\acc x is <span class="ot">-&gt;</span> Map.insertWith prepend is [x] acc) Map.empty</a>
<a class="sourceLine" id="cb11-37" data-line-number="37">  <span class="co">-- fromList [([1],[4]),([9,8,6],[8,3,2])]</span></a>
<a class="sourceLine" id="cb11-38" data-line-number="38"></a>
<a class="sourceLine" id="cb11-39" data-line-number="39">  <span class="co">-- step 6</span></a>
<a class="sourceLine" id="cb11-40" data-line-number="40">  <span class="fu">&amp;</span> Map.filterWithKey (\is xs <span class="ot">-&gt;</span> length is <span class="fu">==</span> length xs)</a>
<a class="sourceLine" id="cb11-41" data-line-number="41">  <span class="co">-- fromList [([1],[4]),([9,8,6],[8,3,2])]</span></a>
<a class="sourceLine" id="cb11-42" data-line-number="42"></a>
<a class="sourceLine" id="cb11-43" data-line-number="43">  <span class="co">-- step 7</span></a>
<a class="sourceLine" id="cb11-44" data-line-number="44">  <span class="fu">&amp;</span> Map.elems</a>
<a class="sourceLine" id="cb11-45" data-line-number="45">  <span class="co">-- [[4],[8,3,2]]</span></a>
<a class="sourceLine" id="cb11-46" data-line-number="46">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-47" data-line-number="47">    prepend <span class="fu">~</span>[y] ys <span class="fu">=</span> y<span class="fu">:</span>ys</a></code></pre></div>
<p>We extract the <code>isPossible</code> function to the top level from the <code>nextGrids</code> function for reuse. Then we write the <code>exclusivePossibilities</code> function which finds the Exclusives in the input row. This function is written using the reverse application operator <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Function.html#v:-38-" target="_blank" rel="noopener"><code>(&amp;)</code></a><a href="#fn4" class="footnote-ref" id="fnref4"><sup>4</sup></a> instead of the usual <code>($)</code> operator so that we can read it from top to bottom. We also show the intermediate values for a sample input after every step in the function chain.</p>
<p>The nub of the function lies in step 3 (pun intended). We do a nested fold over all the non-fixed cells and all the possible digits in them to compute the map which represents the first table. Thereafter, we filter the map to keep only the entries with length less than four (step 4). Then we flip it to create a new map which represents the second table (step 5). Finally, we filter the flipped map for the entries where the cell count is same as the digit count (step 6) to arrive at the final table. The step 7 just gets the values in the map which is the list of all the Exclusives in the input row.</p>
<h2 id="pruning-the-cells-exclusively" data-track-content data-content-name="pruning-the-cells-exclusively" data-content-piece="fast-sudoku-solver-in-haskell-2">Pruning the Cells, Exclusively<a href="#pruning-the-cells-exclusively" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>To start with, we extract some reusable code from the previous <code>pruneCells</code> function and rename it to <code>pruneCellsByFixed</code>:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="ot">makeCell ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Cell</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2">makeCell ys <span class="fu">=</span> <span class="kw">case</span> ys <span class="kw">of</span></a>
<a class="sourceLine" id="cb12-3" data-line-number="3">  []  <span class="ot">-&gt;</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb12-4" data-line-number="4">  [y] <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="fu">$</span> <span class="dt">Fixed</span> y</a>
<a class="sourceLine" id="cb12-5" data-line-number="5">  _   <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="fu">$</span> <span class="dt">Possible</span> ys</a>
<a class="sourceLine" id="cb12-6" data-line-number="6"></a>
<a class="sourceLine" id="cb12-7" data-line-number="7"><span class="ot">pruneCellsByFixed ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Cell</span>]</a>
<a class="sourceLine" id="cb12-8" data-line-number="8">pruneCellsByFixed cells <span class="fu">=</span> traverse pruneCell cells</a>
<a class="sourceLine" id="cb12-9" data-line-number="9">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-10" data-line-number="10">    fixeds <span class="fu">=</span> [x <span class="fu">|</span> <span class="dt">Fixed</span> x <span class="ot">&lt;-</span> cells]</a>
<a class="sourceLine" id="cb12-11" data-line-number="11"></a>
<a class="sourceLine" id="cb12-12" data-line-number="12">    pruneCell (<span class="dt">Possible</span> xs) <span class="fu">=</span> makeCell (xs <span class="dt">Data.List</span><span class="fu">.</span>\\ fixeds)</a>
<a class="sourceLine" id="cb12-13" data-line-number="13">    pruneCell x             <span class="fu">=</span> <span class="dt">Just</span> x</a></code></pre></div>
<p>Now we write the <code>pruneCellsByExclusives</code> function which uses the <code>exclusivePossibilities</code> function to prune the cells:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="ot">pruneCellsByExclusives ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Cell</span>]</a>
<a class="sourceLine" id="cb13-2" data-line-number="2">pruneCellsByExclusives cells <span class="fu">=</span> <span class="kw">case</span> exclusives <span class="kw">of</span></a>
<a class="sourceLine" id="cb13-3" data-line-number="3">  [] <span class="ot">-&gt;</span> <span class="dt">Just</span> cells</a>
<a class="sourceLine" id="cb13-4" data-line-number="4">  _  <span class="ot">-&gt;</span> traverse pruneCell cells</a>
<a class="sourceLine" id="cb13-5" data-line-number="5">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-6" data-line-number="6">    exclusives    <span class="fu">=</span> exclusivePossibilities cells</a>
<a class="sourceLine" id="cb13-7" data-line-number="7">    allExclusives <span class="fu">=</span> concat exclusives</a>
<a class="sourceLine" id="cb13-8" data-line-number="8"></a>
<a class="sourceLine" id="cb13-9" data-line-number="9">    pruneCell cell<span class="fu">@</span>(<span class="dt">Fixed</span> _) <span class="fu">=</span> <span class="dt">Just</span> cell</a>
<a class="sourceLine" id="cb13-10" data-line-number="10">    pruneCell cell<span class="fu">@</span>(<span class="dt">Possible</span> xs)</a>
<a class="sourceLine" id="cb13-11" data-line-number="11">      <span class="fu">|</span> intersection <span class="ot">`elem`</span> exclusives <span class="fu">=</span> makeCell intersection</a>
<a class="sourceLine" id="cb13-12" data-line-number="12">      <span class="fu">|</span> otherwise                      <span class="fu">=</span> <span class="dt">Just</span> cell</a>
<a class="sourceLine" id="cb13-13" data-line-number="13">      <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-14" data-line-number="14">        intersection <span class="fu">=</span> xs <span class="ot">`Data.List.intersect`</span> allExclusives</a></code></pre></div>
<p><code>pruneCellsByExclusives</code> works exactly as shown in the examples above. We first find the list of Exclusives in the given cells. If there are no Exclusives, there’s nothing to do and we just return the cells. If we find any Exclusives, we <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Traversable.html#v:traverse" target="_blank" rel="noopener"><code>traverse</code></a> the cells, pruning each cell to only the intersection of the possible digits in the cell and Exclusive digits. That’s it! We reuse the <code>makeCell</code> function to create a new cell with the intersection.</p>
<p>As the final step, we rewrite the <code>pruneCells</code> function by combining both the functions.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="ot">fixM ::</span> (<span class="dt">Eq</span> t, <span class="dt">Monad</span> m) <span class="ot">=&gt;</span> (t <span class="ot">-&gt;</span> m t) <span class="ot">-&gt;</span> t <span class="ot">-&gt;</span> m t</a>
<a class="sourceLine" id="cb14-2" data-line-number="2">fixM f x <span class="fu">=</span> f x <span class="fu">&gt;&gt;=</span> \x' <span class="ot">-&gt;</span> <span class="kw">if</span> x' <span class="fu">==</span> x <span class="kw">then</span> return x <span class="kw">else</span> fixM f x'</a>
<a class="sourceLine" id="cb14-3" data-line-number="3"></a>
<a class="sourceLine" id="cb14-4" data-line-number="4"><span class="ot">pruneCells ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Cell</span>]</a>
<a class="sourceLine" id="cb14-5" data-line-number="5">pruneCells cells <span class="fu">=</span> fixM pruneCellsByFixed cells <span class="fu">&gt;&gt;=</span> fixM pruneCellsByExclusives</a></code></pre></div>
<p>We have extracted <code>fixM</code> as a top level function from the <code>pruneGrid</code> function. Just like the <code>pruneGrid'</code> function, we need to use monadic bind (<a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/Control-Monad.html#v:-62--62--61-" target="_blank" rel="noopener"><code>&gt;&gt;=</code></a>) to chain the two pruning steps. We also use <code>fixM</code> to apply each step repeatedly till the pruned cells settle<a href="#fn5" class="footnote-ref" id="fnref5"><sup>5</sup></a>.</p>
<p>No further code changes are required. It is time to check out the improvements.</p>
<h2 id="faster-than-a-speeding-bullet" data-track-content data-content-name="faster-than-a-speeding-bullet" data-content-piece="fast-sudoku-solver-in-haskell-2">Faster than a Speeding Bullet!<a href="#faster-than-a-speeding-bullet" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Let’s build the program and run the exact same number of puzzles as before:</p>
<pre class="plain"><code>$ head -n100 sudoku17.txt | time stack exec sudoku
... output omitted ...
      0.53 real         0.58 user         0.23 sys</code></pre>
<p>Woah! It is way faster than before. Let’s solve all the puzzles now:</p>
<pre class="plain"><code>$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
      282.98 real       407.25 user       109.27 sys</code></pre>
<p>So it is took about 283 seconds to solve all the 49151 puzzles. The speedup is about 200x<a href="#fn6" class="footnote-ref" id="fnref6"><sup>6</sup></a>. That’s about 5.8 milliseconds per puzzle.</p>
<p>Let’s do a quick profiling to see where the time is going:</p>
<pre class="plain"><code>$ stack build --profile
$ head -n1000 sudoku17.txt | stack exec -- sudoku +RTS -p &gt; /dev/null</code></pre>
<p>This generates a file named <code>sudoku.prof</code> with the profiling results. Here are the top five most time-taking functions (cleaned for brevity):</p>
<div class="scrollable-table">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Cost Center</th>
<th style="text-align: left;">Source</th>
<th style="text-align: right;">%time</th>
<th style="text-align: right;">%alloc</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities</code></td>
<td style="text-align: left;">(49,1)-(62,26)</td>
<td style="text-align: right;">17.6</td>
<td style="text-align: right;">11.4</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>pruneCellsByFixed.pruneCell</code></td>
<td style="text-align: left;">(75,5)-(76,36)</td>
<td style="text-align: right;">16.9</td>
<td style="text-align: right;">30.8</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>exclusivePossibilities.\.\</code></td>
<td style="text-align: left;">55:38-70</td>
<td style="text-align: right;">12.2</td>
<td style="text-align: right;">20.3</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>fixM.\</code></td>
<td style="text-align: left;">13:27-65</td>
<td style="text-align: right;">10.0</td>
<td style="text-align: right;">0.0</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>==</code></td>
<td style="text-align: left;">15:56-57</td>
<td style="text-align: right;">7.2</td>
<td style="text-align: right;">0.0</td>
</tr>
</tbody>
</table>
</div>
<p>Looking at the report, my guess is that a lot of time is going into list operations. Lists are known to be inefficient in Haskell so maybe we should switch to some other data structures?</p>
<h3 id="update">Update<a href="#update" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>
<p>As per the comments below by Chris Casinghino, I ran both the versions of code without the <code>-threaded</code>, <code>-rtsopts</code> and <code>-with-rtsopts=-N</code> options. The time for previous post’s code:</p>
<pre class="plain"><code>$ head -n100 sudoku17.txt | time stack exec sudoku
... output omitted ...
       96.54 real        95.90 user         0.66 sys</code></pre>
<p>And the time for this post’s code:</p>
<pre class="plain"><code>$ cat sudoku17.txt | time stack exec sudoku &gt; /dev/null
      258.97 real       257.34 user         1.52 sys</code></pre>
<p>So, both the versions run about 10% faster without the threading options. I suspect this has something to do with GHC’s parallel GC as described in <a href="https://web.archive.org/web/20170612225421/https://inner-haven.net/posts/2017-05-08-speed-up-haskell-programs-weird-trick.html" target="_blank" rel="noopener">this post</a>. So for now, I’ll keep threading disabled.</p>
<h2 id="conclusion" data-track-content data-content-name="conclusion" data-content-piece="fast-sudoku-solver-in-haskell-2">Conclusion<a href="#conclusion" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>In this post, we improved upon our simple Sudoku solution from the <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/">last time</a>. We discovered and implemented a new strategy to prune cells, and we achieved a 200x speedup. But profiling shows that we still have many possibilities for improvements. We’ll work on that and more in the upcoming posts in this series. The code till now is available <a href="https://code.abhinavsarkar.net/abhin4v/hasdoku/src/commit/9d6eb18229f905c52cb4c98b569abb70757ba022" target="_blank" rel="noopener">here</a>. Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/8xyfad/fast_sudoku_solver_in_haskell_2_a_200x_faster/" target="_blank" rel="noopener">r/haskell</a>.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>All the runs were done on my MacBook Pro from 2014 with 2.2 GHz Intel Core i7 CPU and 16 GB memory.<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>At least 17 cells must be pre-filled in a Sudoku puzzle for it to have a unique solution. So 17-clue puzzles are the most difficult of all puzzles. <a href="https://arxiv.org/pdf/1201.0749v2.pdf" target="_blank" rel="noopener">This paper</a> by McGuire, Tugemann and Civario gives the proof of the same.<a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p>“Single” as in <a href="https://en.wikipedia.org/wiki/Single_child" target="_blank" rel="noopener">“Single child”</a><a href="#fnref3" class="footnote-back">↩</a></p></li>
<li id="fn4"><p>Reverse application operation is not used much in Haskell. But it is the preferred way of function chaining in some other functional programming languages like <a href="https://clojuredocs.org/clojure.core/-%3E" target="_blank" rel="noopener">Clojure</a>, <a href="https://msdn.microsoft.com/en-us/visualfsharpdocs/conceptual/operators.%5b-h%5d-%5d%5b't1,'u%5d-function-%5bfsharp%5d" target="_blank" rel="noopener">FSharp</a>, and <a href="https://hexdocs.pm/elixir/Kernel.html#%7C%3E/2" target="_blank" rel="noopener">Elixir</a>.<a href="#fnref4" class="footnote-back">↩</a></p></li>
<li id="fn5"><p>We need to run <code>pruneCellsByFixed</code> and <code>pruneCellsByExclusives</code> repeatedly using <code>fixM</code> because an unsettled row can lead to wrong solutions. Imagine a row which just got a <code>9</code> fixed because of <code>pruneCellsByFixed</code>. If we don’t run the function again, the row may be left with one non-fixed cell with a <code>9</code>. When we run this row through <code>pruneCellsByExclusives</code>, it’ll consider the <code>9</code> in the non-fixed cell as a Single and fix it. This will lead to two <code>9</code>s in the same row, causing the solution to fail.<a href="#fnref5" class="footnote-back">↩</a></p></li>
<li id="fn6"><p>Speedup: 116.7 / 100 * 49151 / 282.98 = 202.7<a href="#fnref6" class="footnote-back">↩</a></p></li>
</ol>
</section><p>If you liked this post, please <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/#comment-container">leave a comment</a>.</p>]]></summary>
</entry>
<entry>
    <title>Fast Sudoku Solver in Haskell #1: A Simple Solution</title>
    <link href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/" />
    <id>https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/</id>
    <published>2018-06-28T00:00:00Z</published>
    <updated>2018-06-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="ert">
32 minute read
</div>
<p><a href="https://en.wikipedia.org/wiki/Sudoku" target="_blank" rel="noopener">Sudoku</a> is a number placement puzzle. It consists of a 9x9 grid which is to be filled with digits from 1 to 9. Some of the cells of the grid come pre-filled and the player has to fill the rest.</p>
<p><a href="https://www.haskell.org/" target="_blank" rel="noopener">Haskell</a> is a purely functional programming language. It is a good choice to solve Sudoku given the problem’s <a href="https://en.wikipedia.org/wiki/Combinatorics" target="_blank" rel="noopener">combinatorial</a> nature. The aim of this series of posts is to write a <strong>fast</strong> Sudoku solver in Haskell. We’ll focus on both implementing the solution and making it efficient, step-by-step, starting with a slow but simple solution in this post<a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>.</p>
<!--more-->
<p>This is the first post in a series of posts:</p>
<ol type="1">
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/">Fast Sudoku Solver in Haskell #1: A Simple Solution</a></li>
<li><a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-2/">Fast Sudoku Solver in Haskell #2: A 200x Faster Solution</a></li>
</ol>
<p>Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/8uapij/fast_sudoku_solver_in_haskell/" target="_blank" rel="noopener">r/haskell</a>.</p>
<nav id="toc" class="right-toc"><h3>Contents</h3><ol><li><a href="#constraint-satisfaction-problem">Constraint Satisfaction Problem</a></li><li><a href="#setting-up">Setting up</a></li><li><a href="#pruning-the-cells">Pruning the Cells</a></li><li><a href="#pruning-the-grid">Pruning the Grid</a></li><li><a href="#making-the-choice">Making the Choice</a></li><li><a href="#solving-the-puzzle">Solving the Puzzle</a></li><li><a href="#conclusion">Conclusion</a></li></ol></nav>
<h2 id="constraint-satisfaction-problem" data-track-content data-content-name="constraint-satisfaction-problem" data-content-piece="fast-sudoku-solver-in-haskell-1">Constraint Satisfaction Problem<a href="#constraint-satisfaction-problem" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Solving Sudoku is a <a href="https://en.wikipedia.org/wiki/Constraint_satisfaction_problem" target="_blank" rel="noopener">constraint satisfaction problem</a>. We are given a partially filled grid which we have to fill completely such that each of the following constraints are satisfied:</p>
<ol type="1">
<li>Each of the nine rows must have all the digits, from 1 to 9.</li>
<li>Each of the nine columns must have all the digits, from 1 to 9.</li>
<li>Each of the nine 3x3 sub-grids must have all the digits, from 1 to 9.</li>
</ol>
<pre class="plain low-line-height"><code>+-------+-------+-------+
| . . . | . . . | . 1 . |
| 4 . . | . . . | . . . |
| . 2 . | . . . | . . . |
+-------+-------+-------+
| . . . | . 5 . | 4 . 7 |
| . . 8 | . . . | 3 . . |
| . . 1 | . 9 . | . . . |
+-------+-------+-------+
| 3 . . | 4 . . | 2 . . |
| . 5 . | 1 . . | . . . |
| . . . | 8 . 6 | . . . |
+-------+-------+-------+
    A sample puzzle

+-------+-------+-------+
| 6 9 3 | 7 8 4 | 5 1 2 |
| 4 8 7 | 5 1 2 | 9 3 6 |
| 1 2 5 | 9 6 3 | 8 7 4 |
+-------+-------+-------+
| 9 3 2 | 6 5 1 | 4 8 7 |
| 5 6 8 | 2 4 7 | 3 9 1 |
| 7 4 1 | 3 9 8 | 6 2 5 |
+-------+-------+-------+
| 3 1 9 | 4 7 5 | 2 6 8 |
| 8 5 6 | 1 2 9 | 7 4 3 |
| 2 7 4 | 8 3 6 | 1 5 9 |
+-------+-------+-------+
    and its solution</code></pre>
<p>Each cell in the grid is member of one row, one column and one sub-grid (called <em>block</em> in general). Digits in the pre-filled cells impose constraints on the rows, columns, and sub-grids they are part of. For example, if a cell contains <code>1</code> then no other cell in that cell’s row, column or sub-grid can contain <code>1</code>. Given these constraints, we can devise a simple algorithm to solve Sudoku:</p>
<ol type="1">
<li>Each cell contains either a single digit or has a set of possible digits. For example, a grid showing the possibilities of all non-filled cells for the sample puzzle above: <small></li>
</ol>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] | [123456789] 1           [123456789] |
| 4           [123456789] [123456789] | [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] |
| [123456789] 2           [123456789] | [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [123456789] [123456789] [123456789] | [123456789] 5           [123456789] | 4           [123456789] 7           |
| [123456789] [123456789] 8           | [123456789] [123456789] [123456789] | 3           [123456789] [123456789] |
| [123456789] [123456789] 1           | [123456789] 9           [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [123456789] [123456789] | 4           [123456789] [123456789] | 2           [123456789] [123456789] |
| [123456789] 5           [123456789] | 1           [123456789] [123456789] | [123456789] [123456789] [123456789] |
| [123456789] [123456789] [123456789] | 8           [123456789] 6           | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<ol start="2" type="1">
<li>If a cell contains a digit, remove that digit from the list of the possible digits from all its neighboring cells. Neighboring cells are the other cells in the given cell’s row, column and sub-grid. For example, the grid after removing the fixed value <code>4</code> of the row-2-column-1 cell from its neighboring cells:</li>
</ol>
<p><small></p>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [123 56789] [123 56789] [123 56789] | [123456789] [123456789] [123456789] | [123456789] 1           [123456789] |
| 4           [123 56789] [123 56789] | [123 56789] [123 56789] [123 56789] | [123 56789] [123 56789] [123 56789] |
| [123 56789] 2           [123 56789] | [123456789] [123456789] [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [123 56789] [123456789] [123456789] | [123456789] 5           [123456789] | 4           [123456789] 7           |
| [123 56789] [123456789] 8           | [123456789] [123456789] [123456789] | 3           [123456789] [123456789] |
| [123 56789] [123456789] 1           | [123456789] 9           [123456789] | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [123456789] [123456789] | 4           [123456789] [123456789] | 2           [123456789] [123456789] |
| [123 56789] 5           [123456789] | 1           [123456789] [123456789] | [123456789] [123456789] [123456789] |
| [123 56789] [123456789] [123456789] | 8           [123456789] 6           | [123456789] [123456789] [123456789] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<ol start="3" type="1">
<li>Repeat the previous step for all the cells that are have been solved (or <em>fixed</em>), either pre-filled or filled in the previous iteration of the solution. For example, the grid after removing all fixed values from all non-fixed cells: <small></li>
</ol>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [    56789] [  3  6789] [  3 567 9] | [ 23 567 9] [ 234 678 ] [ 2345 789] | [    56789] 1           [ 23456 89] |
| 4           [1 3  6789] [  3 567 9] | [ 23 567 9] [123  678 ] [123 5 789] | [    56789] [ 23 56789] [ 23 56 89] |
| [1   56789] 2           [  3 567 9] | [  3 567 9] [1 34 678 ] [1 345 789] | [    56789] [  3456789] [  3456 89] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [ 2   6  9] [  3  6  9] [ 23  6  9] | [ 23  6   ] 5           [123    8 ] | 4           [ 2   6 89] 7           |
| [ 2  567 9] [   4 67 9] 8           | [ 2   67  ] [12 4 67  ] [12 4  7  ] | 3           [ 2  56  9] [12  56  9] |
| [ 2  567  ] [  34 67  ] 1           | [ 23  67  ] 9           [ 234  78 ] | [    56 8 ] [ 2  56 8 ] [ 2  56 8 ] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [1    6789] [     67 9] | 4           7           [    5 7 9] | 2           [    56789] [1   56 89] |
| [ 2   6789] 5           [ 2 4 67 9] | 1           [ 23   7  ] [ 23   7 9] | [     6789] [  34 6789] [  34 6 89] |
| [12    7 9] [1  4  7 9] [ 2 4  7 9] | 8           [ 23   7  ] 6           | [1   5 7 9] [  345 7 9] [1 345   9] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<ol start="4" type="1">
<li>Continue till the grid <em>settles</em>, that is, there are no more changes in the possibilities of any cells. For example, the settled grid for the current iteration: <small></li>
</ol>
<pre class="plain low-line-height"><code>+-------------------------------------+-------------------------------------+-------------------------------------+
| [    56789] [  3  6789] [  3 567 9] | [ 23 567 9] [ 234 6 8 ] [ 2345 789] | [    56789] 1           [ 23456 89] |
| 4           [1 3  6789] [  3 567 9] | [ 23 567 9] [123  6 8 ] [123 5 789] | [    56789] [ 23 56789] [ 23 56 89] |
| [1   56789] 2           [  3 567 9] | [  3 567 9] [1 34 6 8 ] [1 345 789] | [    56789] [  3456789] [  3456 89] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| [ 2   6  9] [  3  6  9] [ 23  6  9] | [ 23  6   ] 5           [123    8 ] | 4           [ 2   6 89] 7           |
| [ 2  567 9] [   4 67 9] 8           | [ 2   67  ] [12 4 6   ] [12 4  7  ] | 3           [ 2  56  9] [12  56  9] |
| [ 2  567  ] [  34 67  ] 1           | [ 23  67  ] 9           [ 234  78 ] | [    56 8 ] [ 2  56 8 ] [ 2  56 8 ] |
+-------------------------------------+-------------------------------------+-------------------------------------+
| 3           [1    6 89] [     6  9] | 4           7           [    5   9] | 2           [    56 89] [1   56 89] |
| [ 2   6789] 5           [ 2 4 67 9] | 1           [ 23      ] [ 23     9] | [     6789] [  34 6789] [  34 6 89] |
| [12    7 9] [1  4  7 9] [ 2 4  7 9] | 8           [ 23      ] 6           | [1   5 7 9] [  345 7 9] [1 345   9] |
+-------------------------------------+-------------------------------------+-------------------------------------+</code></pre>
<p></small></p>
<ol start="5" type="1">
<li>Once the grid settles, choose one of the non-fixed cells following some strategy. Select one of the digits from all the possibilities of the cell, and fix (assume) the cell to have that digit. Go back to step 1 and repeat.</li>
<li>The elimination of possibilities may result in inconsistencies. For example, you may end up with a cell with no possibilities. In such a case, discard that branch of solution, and backtrack to last point where you fixed a cell. Choose a different possibility to fix and repeat.</li>
<li>If at any point the grid is completely filled, you’ve found the solution!</li>
<li>If you exhaust all branches of the solution then the puzzle is unsolvable. This can happen if it starts with cells pre-filled wrongly.</li>
</ol>
<p>This algorithm is actually a <a href="https://en.wikipedia.org/wiki/Depth-first_search" target="_blank" rel="noopener">Depth-First Search</a> on the <a href="https://en.wikipedia.org/wiki/State_space_search" target="_blank" rel="noopener">state space</a> of the grid configurations. It guarantees to either find a solution or prove a puzzle to be unsolvable.</p>
<h2 id="setting-up" data-track-content data-content-name="setting-up" data-content-piece="fast-sudoku-solver-in-haskell-1">Setting up<a href="#setting-up" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>We start with writing types to represent the cells and the grid:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Cell</span> <span class="fu">=</span> <span class="dt">Fixed</span> <span class="dt">Int</span> <span class="fu">|</span> <span class="dt">Possible</span> [<span class="dt">Int</span>] <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="kw">type</span> <span class="dt">Row</span>  <span class="fu">=</span> [<span class="dt">Cell</span>]</a>
<a class="sourceLine" id="cb6-3" data-line-number="3"><span class="kw">type</span> <span class="dt">Grid</span> <span class="fu">=</span> [<span class="dt">Row</span>]</a></code></pre></div>
<p>A cell is either fixed with a particular digit or has a set of digits as possibilities. So it is natural to represent it as a <a href="https://en.wikipedia.org/wiki/Algebraic_data_type" target="_blank" rel="noopener">sum type</a> with <code>Fixed</code> and <code>Possible</code> constructors. A row is a list of cells and a grid is a list of rows.</p>
<p>We’ll take the input puzzle as a string of 81 characters representing the cells, left-to-right and top-to-bottom. An example is:</p>
<pre class="plain"><code>.......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...</code></pre>
<p>Here, <code>.</code> represents an non-filled cell. Let’s write a function to read this input and parse it to our <code>Grid</code> data structure:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="ot">readGrid ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2">readGrid s</a>
<a class="sourceLine" id="cb8-3" data-line-number="3">  <span class="fu">|</span> length s <span class="fu">==</span> <span class="dv">81</span> <span class="fu">=</span> traverse (traverse readCell) <span class="fu">.</span> Data.List.Split.chunksOf <span class="dv">9</span> <span class="fu">$</span> s</a>
<a class="sourceLine" id="cb8-4" data-line-number="4">  <span class="fu">|</span> otherwise      <span class="fu">=</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb8-5" data-line-number="5">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-6" data-line-number="6">    readCell <span class="ch">'.'</span> <span class="fu">=</span> <span class="dt">Just</span> <span class="fu">$</span> <span class="dt">Possible</span> [<span class="dv">1</span><span class="fu">..</span><span class="dv">9</span>]</a>
<a class="sourceLine" id="cb8-7" data-line-number="7">    readCell c</a>
<a class="sourceLine" id="cb8-8" data-line-number="8">      <span class="fu">|</span> Data.Char.isDigit c <span class="fu">&amp;&amp;</span> c <span class="fu">&gt;</span> <span class="ch">'0'</span> <span class="fu">=</span> <span class="dt">Just</span> <span class="fu">.</span> <span class="dt">Fixed</span> <span class="fu">.</span> Data.Char.digitToInt <span class="fu">$</span> c</a>
<a class="sourceLine" id="cb8-9" data-line-number="9">      <span class="fu">|</span> otherwise <span class="fu">=</span> <span class="dt">Nothing</span></a></code></pre></div>
<p><code>readGrid</code> return a <code>Just grid</code> if the input is correct, else it returns a <code>Nothing</code>. It parses a <code>.</code> to a <code>Possible</code> cell with all digits as possibilities, and a digit char to a <code>Fixed</code> cell with that digit. Let’s try it out in the <em>REPL</em>:</p>
<p><small></p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;.......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> mapM_ print grid</a>
<a class="sourceLine" id="cb9-3" data-line-number="3">[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">1</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a>
<a class="sourceLine" id="cb9-4" data-line-number="4">[<span class="dt">Fixed</span> <span class="dv">4</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a>
<a class="sourceLine" id="cb9-5" data-line-number="5">[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">2</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a>
<a class="sourceLine" id="cb9-6" data-line-number="6">[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">5</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">4</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">7</span>]</a>
<a class="sourceLine" id="cb9-7" data-line-number="7">[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">8</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">3</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a>
<a class="sourceLine" id="cb9-8" data-line-number="8">[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">1</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">9</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a>
<a class="sourceLine" id="cb9-9" data-line-number="9">[<span class="dt">Fixed</span> <span class="dv">3</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">4</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">2</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a>
<a class="sourceLine" id="cb9-10" data-line-number="10">[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">5</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">1</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a>
<a class="sourceLine" id="cb9-11" data-line-number="11">[<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">8</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Fixed</span> <span class="dv">6</span>,<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>],<span class="dt">Possible</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>]]</a></code></pre></div>
<p></small></p>
<p>The output is a bit unreadable but correct. We can write a few functions to clean it up:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="ot">showGrid ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">showGrid <span class="fu">=</span> unlines <span class="fu">.</span> map (unwords <span class="fu">.</span> map showCell)</a>
<a class="sourceLine" id="cb10-3" data-line-number="3">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4">    showCell (<span class="dt">Fixed</span> x) <span class="fu">=</span> show x</a>
<a class="sourceLine" id="cb10-5" data-line-number="5">    showCell _ <span class="fu">=</span> <span class="st">&quot;.&quot;</span></a>
<a class="sourceLine" id="cb10-6" data-line-number="6"></a>
<a class="sourceLine" id="cb10-7" data-line-number="7"><span class="ot">showGridWithPossibilities ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb10-8" data-line-number="8">showGridWithPossibilities <span class="fu">=</span> unlines <span class="fu">.</span> map (unwords <span class="fu">.</span> map showCell)</a>
<a class="sourceLine" id="cb10-9" data-line-number="9">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-10" data-line-number="10">    showCell (<span class="dt">Fixed</span> x)     <span class="fu">=</span> show x <span class="fu">++</span> <span class="st">&quot;          &quot;</span></a>
<a class="sourceLine" id="cb10-11" data-line-number="11">    showCell (<span class="dt">Possible</span> xs) <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-12" data-line-number="12">      (<span class="fu">++</span> <span class="st">&quot;]&quot;</span>)</a>
<a class="sourceLine" id="cb10-13" data-line-number="13">      <span class="fu">.</span> Data.List.foldl' (\acc x <span class="ot">-&gt;</span> acc <span class="fu">++</span> <span class="kw">if</span> x <span class="ot">`elem`</span> xs <span class="kw">then</span> show x <span class="kw">else</span> <span class="st">&quot; &quot;</span>) <span class="st">&quot;[&quot;</span></a>
<a class="sourceLine" id="cb10-14" data-line-number="14">      <span class="fu">$</span> [<span class="dv">1</span><span class="fu">..</span><span class="dv">9</span>]</a></code></pre></div>
<p>Back to the <em>REPL</em> again:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;.......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStrLn <span class="fu">$</span> showGrid grid</a>
<a class="sourceLine" id="cb11-3" data-line-number="3"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb11-4" data-line-number="4"><span class="dv">4</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb11-5" data-line-number="5"><span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb11-6" data-line-number="6"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">4</span> <span class="fu">.</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb11-7" data-line-number="7"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb11-8" data-line-number="8"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="dv">9</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb11-9" data-line-number="9"><span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">4</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb11-10" data-line-number="10"><span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb11-11" data-line-number="11"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="dv">6</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a></code></pre></div>
<p><small></p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStrLn <span class="fu">$</span> showGridWithPossibilities grid</a>
<a class="sourceLine" id="cb12-2" data-line-number="2">[<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">1</span>           [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb12-3" data-line-number="3"><span class="dv">4</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb12-4" data-line-number="4">[<span class="dv">123456789</span>] <span class="dv">2</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb12-5" data-line-number="5">[<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">5</span>           [<span class="dv">123456789</span>] <span class="dv">4</span>           [<span class="dv">123456789</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb12-6" data-line-number="6">[<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">8</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">3</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb12-7" data-line-number="7">[<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">1</span>           [<span class="dv">123456789</span>] <span class="dv">9</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb12-8" data-line-number="8"><span class="dv">3</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">4</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">2</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb12-9" data-line-number="9">[<span class="dv">123456789</span>] <span class="dv">5</span>           [<span class="dv">123456789</span>] <span class="dv">1</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb12-10" data-line-number="10">[<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">8</span>           [<span class="dv">123456789</span>] <span class="dv">6</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>]</a></code></pre></div>
<p></small></p>
<p>The output is more readable now. We see that, at the start, all the non-filled cells have all the digits as possible values. We’ll use these functions for debugging as we go forward. We can now start solving the puzzle.</p>
<div class="page-break">

</div>
<h2 id="pruning-the-cells" data-track-content data-content-name="pruning-the-cells" data-content-piece="fast-sudoku-solver-in-haskell-1">Pruning the Cells<a href="#pruning-the-cells" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>We can remove the digits of fixed cells from their neighboring cells, one cell as a time. But, it is faster to find all the fixed digits in a row of cells and remove them from the possibilities of all the non-fixed cells of the row, at once. Then we can repeat this <em>pruning</em> step for all the rows of the grid (and columns and sub-grids too! We’ll see how).</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="ot">pruneCells ::</span> [<span class="dt">Cell</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> [<span class="dt">Cell</span>]</a>
<a class="sourceLine" id="cb13-2" data-line-number="2">pruneCells cells <span class="fu">=</span> traverse pruneCell cells</a>
<a class="sourceLine" id="cb13-3" data-line-number="3">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-4" data-line-number="4">    fixeds <span class="fu">=</span> [x <span class="fu">|</span> <span class="dt">Fixed</span> x <span class="ot">&lt;-</span> cells]</a>
<a class="sourceLine" id="cb13-5" data-line-number="5"></a>
<a class="sourceLine" id="cb13-6" data-line-number="6">    pruneCell (<span class="dt">Possible</span> xs) <span class="fu">=</span> <span class="kw">case</span> xs <span class="dt">Data.List</span><span class="fu">.</span>\\ fixeds <span class="kw">of</span></a>
<a class="sourceLine" id="cb13-7" data-line-number="7">      []  <span class="ot">-&gt;</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb13-8" data-line-number="8">      [y] <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="fu">$</span> <span class="dt">Fixed</span> y</a>
<a class="sourceLine" id="cb13-9" data-line-number="9">      ys  <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="fu">$</span> <span class="dt">Possible</span> ys</a>
<a class="sourceLine" id="cb13-10" data-line-number="10">    pruneCell x <span class="fu">=</span> <span class="dt">Just</span> x</a></code></pre></div>
<p><code>pruneCells</code> prunes a list of cells as described before. We start with finding the fixed digits in the list of cells. Then we go over each non-fixed cells, removing the fixed digits we found, from their possible values. Two special cases arise:</p>
<ul>
<li>If pruning results in a cell with no possible digits, it is a sign that this branch of search has no solution and hence, we return a <code>Nothing</code> in that case.</li>
<li>If only one possible digit remains after pruning, then we turn that cell into a fixed cell with that digit.</li>
</ul>
<p>We use the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Traversable.html#v:traverse" target="_blank" rel="noopener"><code>traverse</code></a> function for pruning the cells so that a <code>Nothing</code> resulting from pruning one cell propagates to the entire list.</p>
<p>Let’s take it for a spin in the <em>REPL</em>:</p>
<p><small></p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb14-2" data-line-number="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGridWithPossibilities <span class="fu">$</span> [head grid] <span class="co">-- first row of the grid</span></a>
<a class="sourceLine" id="cb14-3" data-line-number="3"><span class="dv">6</span>           [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] <span class="dv">1</span>           [<span class="dv">123456789</span>]</a>
<a class="sourceLine" id="cb14-4" data-line-number="4"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGridWithPossibilities [fromJust <span class="fu">$</span> pruneCells <span class="fu">$</span> head grid] <span class="co">-- same row after pruning</span></a>
<a class="sourceLine" id="cb14-5" data-line-number="5"><span class="dv">6</span>           [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span> <span class="dv">789</span>]</a></code></pre></div>
<p></small></p>
<p>It works! <code>6</code> and <code>1</code> are removed from the possibilities of the other cells. Now we are ready for …</p>
<h2 id="pruning-the-grid" data-track-content data-content-name="pruning-the-grid" data-content-piece="fast-sudoku-solver-in-haskell-1">Pruning the Grid<a href="#pruning-the-grid" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>Pruning a grid requires us to prune each row, each column and each sub-grid. Let’s try to solve it in the <em>REPL</em> first:</p>
<p><small></p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid' <span class="fu">=</span> traverse pruneCells grid</a>
<a class="sourceLine" id="cb15-3" data-line-number="3"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGridWithPossibilities grid'</a>
<a class="sourceLine" id="cb15-4" data-line-number="4"><span class="dv">6</span>           [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] [ <span class="dv">2345</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span> <span class="dv">789</span>]</a>
<a class="sourceLine" id="cb15-5" data-line-number="5"><span class="dv">4</span>           [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>] [<span class="dv">123</span> <span class="dv">56789</span>]</a>
<a class="sourceLine" id="cb15-6" data-line-number="6">[<span class="dv">1</span> <span class="dv">3456789</span>] <span class="dv">2</span>           [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>]</a>
<a class="sourceLine" id="cb15-7" data-line-number="7">[<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">5</span>           [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">4</span>           [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb15-8" data-line-number="8">[<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] <span class="dv">8</span>           [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] <span class="dv">3</span>           [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>] [<span class="dv">12</span> <span class="dv">4567</span> <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb15-9" data-line-number="9">[ <span class="dv">2345678</span> ] [ <span class="dv">2345678</span> ] <span class="dv">1</span>           [ <span class="dv">2345678</span> ] <span class="dv">9</span>           [ <span class="dv">2345678</span> ] [ <span class="dv">2345678</span> ] [ <span class="dv">2345678</span> ] [ <span class="dv">2345678</span> ]</a>
<a class="sourceLine" id="cb15-10" data-line-number="10"><span class="dv">3</span>           [<span class="dv">1</span>   <span class="dv">56789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] <span class="dv">4</span>           [<span class="dv">1</span>   <span class="dv">56789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] <span class="dv">2</span>           [<span class="dv">1</span>   <span class="dv">56789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>]</a>
<a class="sourceLine" id="cb15-11" data-line-number="11">[ <span class="dv">234</span> <span class="dv">6789</span>] <span class="dv">5</span>           [ <span class="dv">234</span> <span class="dv">6789</span>] <span class="dv">1</span>           [ <span class="dv">234</span> <span class="dv">6789</span>] [ <span class="dv">234</span> <span class="dv">6789</span>] [ <span class="dv">234</span> <span class="dv">6789</span>] [ <span class="dv">234</span> <span class="dv">6789</span>] [ <span class="dv">234</span> <span class="dv">6789</span>]</a>
<a class="sourceLine" id="cb15-12" data-line-number="12">[<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">6</span>           [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">12345</span> <span class="dv">7</span> <span class="dv">9</span>]</a></code></pre></div>
<p></small></p>
<p>By <code>traverse</code>-ing the grid with <code>pruneCells</code>, we are able to prune each row, one-by-one. Since pruning a row doesn’t affect another row, we don’t have to pass the resulting rows between each pruning step. That is to say, <code>traverse</code> is enough for us, we don’t need <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-Foldable.html#v:foldl" target="_blank" rel="noopener"><code>foldl</code></a> here.</p>
<p>How do we do the same thing for columns now? Since our representation for the grid is rows-first, we first need to convert it to a columns-first representation. Luckily, that’s what <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Data-List.html#v:transpose" target="_blank" rel="noopener"><code>Data.List.transpose</code></a> function does:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;693784512487512936125963874932651487568247391741398625319475268856129743274836159&quot;</span></a>
<a class="sourceLine" id="cb16-2" data-line-number="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGrid grid</a>
<a class="sourceLine" id="cb16-3" data-line-number="3"><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb16-4" data-line-number="4"><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span></a>
<a class="sourceLine" id="cb16-5" data-line-number="5"><span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb16-6" data-line-number="6"><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb16-7" data-line-number="7"><span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb16-8" data-line-number="8"><span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb16-9" data-line-number="9"><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span></a>
<a class="sourceLine" id="cb16-10" data-line-number="10"><span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb16-11" data-line-number="11"><span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></a>
<a class="sourceLine" id="cb16-12" data-line-number="12"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGrid <span class="fu">$</span> Data.List.transpose grid</a>
<a class="sourceLine" id="cb16-13" data-line-number="13"><span class="dv">6</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb16-14" data-line-number="14"><span class="dv">9</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb16-15" data-line-number="15"><span class="dv">3</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">8</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb16-16" data-line-number="16"><span class="dv">7</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">3</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">8</span></a>
<a class="sourceLine" id="cb16-17" data-line-number="17"><span class="dv">8</span> <span class="dv">1</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">4</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">2</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb16-18" data-line-number="18"><span class="dv">4</span> <span class="dv">2</span> <span class="dv">3</span> <span class="dv">1</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span></a>
<a class="sourceLine" id="cb16-19" data-line-number="19"><span class="dv">5</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">7</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb16-20" data-line-number="20"><span class="dv">1</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">9</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">4</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb16-21" data-line-number="21"><span class="dv">2</span> <span class="dv">6</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">9</span></a></code></pre></div>
<p>Pruning columns is easy now:</p>
<p><small></p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb17-2" data-line-number="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid' <span class="fu">=</span> fmap Data.List.transpose <span class="fu">.</span> traverse pruneCells <span class="fu">.</span> Data.List.transpose <span class="fu">$</span> grid</a>
<a class="sourceLine" id="cb17-3" data-line-number="3"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGridWithPossibilities grid'</a>
<a class="sourceLine" id="cb17-4" data-line-number="4"><span class="dv">6</span>           [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] <span class="dv">1</span>           [<span class="dv">123456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb17-5" data-line-number="5"><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb17-6" data-line-number="6">[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb17-7" data-line-number="7">[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] <span class="dv">5</span>           [<span class="dv">12345</span> <span class="dv">789</span>] <span class="dv">4</span>           [ <span class="dv">23456789</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb17-8" data-line-number="8">[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] <span class="dv">8</span>           [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] <span class="dv">3</span>           [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb17-9" data-line-number="9">[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] <span class="dv">1</span>           [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] <span class="dv">9</span>           [<span class="dv">12345</span> <span class="dv">789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb17-10" data-line-number="10"><span class="dv">3</span>           [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] <span class="dv">4</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] <span class="dv">2</span>           [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb17-11" data-line-number="11">[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">234567</span> <span class="dv">9</span>] <span class="dv">1</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12345</span> <span class="dv">789</span>] [<span class="dv">1</span>   <span class="dv">56789</span>] [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb17-12" data-line-number="12">[<span class="dv">12</span>  <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6789</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] <span class="dv">8</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">56789</span>] [ <span class="dv">23456789</span>] [<span class="dv">123456</span> <span class="dv">89</span>]</a></code></pre></div>
<p></small></p>
<p>First, we <code>transpose</code> the grid to convert the columns into rows. Then, we prune the rows by <code>traverse</code>-ing <code>pruneCells</code> over them. And finally, we turn the rows back into columns by <code>transpose</code>-ing the grid back again. The last <code>transpose</code> needs to be <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Prelude.html#v:fmap" target="_blank" rel="noopener"><code>fmap</code></a>-ped because <code>traverse pruneCells</code> returns a <code>Maybe</code>.</p>
<p>Pruning sub-grids is a bit trickier. Following the same idea as pruning columns, we need two functions to transform the sub-grids into rows and back. Let’s write the first one:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1"><span class="ot">subGridsToRows ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb18-2" data-line-number="2">subGridsToRows <span class="fu">=</span></a>
<a class="sourceLine" id="cb18-3" data-line-number="3">  concatMap (\rows <span class="ot">-&gt;</span> <span class="kw">let</span> [r1, r2, r3] <span class="fu">=</span> map (Data.List.Split.chunksOf <span class="dv">3</span>) rows</a>
<a class="sourceLine" id="cb18-4" data-line-number="4">                      <span class="kw">in</span> zipWith3 (\a b c <span class="ot">-&gt;</span> a <span class="fu">++</span> b <span class="fu">++</span> c) r1 r2 r3)</a>
<a class="sourceLine" id="cb18-5" data-line-number="5">  <span class="fu">.</span> Data.List.Split.chunksOf <span class="dv">3</span></a></code></pre></div>
<p>And try it out:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;693784512487512936125963874932651487568247391741398625319475268856129743274836159&quot;</span></a>
<a class="sourceLine" id="cb19-2" data-line-number="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGrid grid</a>
<a class="sourceLine" id="cb19-3" data-line-number="3"><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb19-4" data-line-number="4"><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span></a>
<a class="sourceLine" id="cb19-5" data-line-number="5"><span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb19-6" data-line-number="6"><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb19-7" data-line-number="7"><span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb19-8" data-line-number="8"><span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb19-9" data-line-number="9"><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span></a>
<a class="sourceLine" id="cb19-10" data-line-number="10"><span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb19-11" data-line-number="11"><span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></a>
<a class="sourceLine" id="cb19-12" data-line-number="12"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGrid <span class="fu">$</span> subGridsToRows grid</a>
<a class="sourceLine" id="cb19-13" data-line-number="13"><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb19-14" data-line-number="14"><span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb19-15" data-line-number="15"><span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb19-16" data-line-number="16"><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb19-17" data-line-number="17"><span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span></a>
<a class="sourceLine" id="cb19-18" data-line-number="18"><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb19-19" data-line-number="19"><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb19-20" data-line-number="20"><span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span></a>
<a class="sourceLine" id="cb19-21" data-line-number="21"><span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></a></code></pre></div>
<p>You can go over the code and the output and make yourself sure that it works. Also, it turns out that we don’t need to write the back-transform function. <code>subGridsToRows</code> is its own back-transform:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGrid grid</a>
<a class="sourceLine" id="cb20-2" data-line-number="2"><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb20-3" data-line-number="3"><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span></a>
<a class="sourceLine" id="cb20-4" data-line-number="4"><span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb20-5" data-line-number="5"><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb20-6" data-line-number="6"><span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb20-7" data-line-number="7"><span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb20-8" data-line-number="8"><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span></a>
<a class="sourceLine" id="cb20-9" data-line-number="9"><span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb20-10" data-line-number="10"><span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></a>
<a class="sourceLine" id="cb20-11" data-line-number="11"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGrid <span class="fu">$</span> subGridsToRows <span class="fu">$</span> subGridsToRows <span class="fu">$</span> grid</a>
<a class="sourceLine" id="cb20-12" data-line-number="12"><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb20-13" data-line-number="13"><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span></a>
<a class="sourceLine" id="cb20-14" data-line-number="14"><span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb20-15" data-line-number="15"><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb20-16" data-line-number="16"><span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb20-17" data-line-number="17"><span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb20-18" data-line-number="18"><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span></a>
<a class="sourceLine" id="cb20-19" data-line-number="19"><span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb20-20" data-line-number="20"><span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></a></code></pre></div>
<p>Nice! Now writing the sub-grid pruning function is easy:</p>
<p><small></p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb21-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb21-2" data-line-number="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid' <span class="fu">=</span> fmap subGridsToRows <span class="fu">.</span> traverse pruneCells <span class="fu">.</span> subGridsToRows <span class="fu">$</span> grid</a>
<a class="sourceLine" id="cb21-3" data-line-number="3"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGridWithPossibilities grid'</a>
<a class="sourceLine" id="cb21-4" data-line-number="4"><span class="dv">6</span>           [<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [ <span class="dv">23456789</span>] <span class="dv">1</span>           [ <span class="dv">23456789</span>]</a>
<a class="sourceLine" id="cb21-5" data-line-number="5"><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [ <span class="dv">23456789</span>] [ <span class="dv">23456789</span>] [ <span class="dv">23456789</span>]</a>
<a class="sourceLine" id="cb21-6" data-line-number="6">[<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [<span class="dv">1</span> <span class="dv">3</span> <span class="dv">5</span> <span class="dv">789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [<span class="dv">123456789</span>] [ <span class="dv">23456789</span>] [ <span class="dv">23456789</span>] [ <span class="dv">23456789</span>]</a>
<a class="sourceLine" id="cb21-7" data-line-number="7">[ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] [<span class="dv">1234</span> <span class="dv">678</span> ] <span class="dv">5</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] <span class="dv">4</span>           [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb21-8" data-line-number="8">[ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] <span class="dv">8</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">1234</span> <span class="dv">678</span> ] <span class="dv">3</span>           [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb21-9" data-line-number="9">[ <span class="dv">234567</span> <span class="dv">9</span>] [ <span class="dv">234567</span> <span class="dv">9</span>] <span class="dv">1</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] <span class="dv">9</span>           [<span class="dv">1234</span> <span class="dv">678</span> ] [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">12</span>  <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb21-10" data-line-number="10"><span class="dv">3</span>           [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] <span class="dv">4</span>           [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">2</span>           [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>]</a>
<a class="sourceLine" id="cb21-11" data-line-number="11">[<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] <span class="dv">5</span>           [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] <span class="dv">1</span>           [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>]</a>
<a class="sourceLine" id="cb21-12" data-line-number="12">[<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6789</span>] <span class="dv">8</span>           [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">6</span>           [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>] [<span class="dv">1</span> <span class="dv">3456789</span>]</a></code></pre></div>
<p></small></p>
<p>It works well. Now we can string together these three steps to prune the entire grid. We also have to make sure that result of pruning each step is fed into the next step. This is so that the fixed cells created into one step cause more pruning in the further steps. We use monadic bind (<a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/Control-Monad.html#v:-62--62--61-" target="_blank" rel="noopener"><code>&gt;&gt;=</code></a>) for that. Here’s the final code:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb22-1" data-line-number="1"><span class="ot">pruneGrid' ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb22-2" data-line-number="2">pruneGrid' grid <span class="fu">=</span></a>
<a class="sourceLine" id="cb22-3" data-line-number="3">  traverse pruneCells grid</a>
<a class="sourceLine" id="cb22-4" data-line-number="4">  <span class="fu">&gt;&gt;=</span> fmap Data.List.transpose <span class="fu">.</span> traverse pruneCells <span class="fu">.</span> Data.List.transpose</a>
<a class="sourceLine" id="cb22-5" data-line-number="5">  <span class="fu">&gt;&gt;=</span> fmap subGridsToRows <span class="fu">.</span> traverse pruneCells <span class="fu">.</span> subGridsToRows</a></code></pre></div>
<p>And the test: <small></p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb23-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb23-2" data-line-number="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid' <span class="fu">=</span> pruneGrid' grid</a>
<a class="sourceLine" id="cb23-3" data-line-number="3"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGridWithPossibilities grid'</a>
<a class="sourceLine" id="cb23-4" data-line-number="4"><span class="dv">6</span>           [  <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">234</span>  <span class="dv">78</span> ] [ <span class="dv">2345</span> <span class="dv">789</span>] [    <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span>  <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb23-5" data-line-number="5"><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">123</span>  <span class="dv">678</span> ] [<span class="dv">123</span> <span class="dv">5</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb23-6" data-line-number="6">[<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">3</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">678</span> ] [<span class="dv">1</span> <span class="dv">345</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [  <span class="dv">3456789</span>] [  <span class="dv">3456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb23-7" data-line-number="7">[ <span class="dv">2</span>      <span class="dv">9</span>] [  <span class="dv">3</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>   ] <span class="dv">5</span>           [<span class="dv">123</span>    <span class="dv">8</span> ] <span class="dv">4</span>           [ <span class="dv">2</span>   <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb23-8" data-line-number="8">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [   <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">2</span>   <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span>  <span class="dv">7</span>  ] <span class="dv">3</span>           [ <span class="dv">2</span>  <span class="dv">56</span>  <span class="dv">9</span>] [<span class="dv">12</span>  <span class="dv">56</span>  <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb23-9" data-line-number="9">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span>  ] [  <span class="dv">34</span> <span class="dv">67</span>  ] <span class="dv">1</span>           [ <span class="dv">23</span>  <span class="dv">67</span>  ] <span class="dv">9</span>           [ <span class="dv">234</span>  <span class="dv">78</span> ] [    <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ]</a>
<a class="sourceLine" id="cb23-10" data-line-number="10"><span class="dv">3</span>           [<span class="dv">1</span>    <span class="dv">6789</span>] [     <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">4</span>           <span class="dv">7</span>           [    <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">2</span>           [    <span class="dv">56789</span>] [<span class="dv">1</span>   <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb23-11" data-line-number="11">[ <span class="dv">2</span>    <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">2</span> <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">1</span>           [ <span class="dv">23</span>   <span class="dv">7</span>  ] [ <span class="dv">23</span>   <span class="dv">7</span> <span class="dv">9</span>] [     <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb23-12" data-line-number="12">[<span class="dv">12</span>    <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span>  <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">2</span> <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">23</span>   <span class="dv">7</span>  ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">345</span>   <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb23-13" data-line-number="13"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGrid grid</a>
<a class="sourceLine" id="cb23-14" data-line-number="14"><span class="dv">6</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-15" data-line-number="15"><span class="dv">4</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-16" data-line-number="16"><span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-17" data-line-number="17"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">4</span> <span class="fu">.</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb23-18" data-line-number="18"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-19" data-line-number="19"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="dv">9</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-20" data-line-number="20"><span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">4</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-21" data-line-number="21"><span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-22" data-line-number="22"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="dv">6</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-23" data-line-number="23"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGrid grid'</a>
<a class="sourceLine" id="cb23-24" data-line-number="24"><span class="dv">6</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-25" data-line-number="25"><span class="dv">4</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-26" data-line-number="26"><span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-27" data-line-number="27"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">4</span> <span class="fu">.</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb23-28" data-line-number="28"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-29" data-line-number="29"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="dv">9</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-30" data-line-number="30"><span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">4</span> <span class="dv">7</span> <span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-31" data-line-number="31"><span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb23-32" data-line-number="32"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="dv">6</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a></code></pre></div>
<p></small></p>
<p>We can clearly see the massive pruning of possibilities all around the grid. We also see a <code>7</code> pop up in the row-7-column-5 cell. This means that we can prune the grid further, until it settles. If you are familiar with Haskell, you may recognize this as trying to find a <a href="https://en.wikipedia.org/wiki/Fixed_point_%28mathematics%29" target="_blank" rel="noopener">fixed point</a> for the <code>pruneGrid'</code> function, except in a monadic context. It is simple to implement:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb24-1" data-line-number="1"><span class="ot">pruneGrid ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb24-2" data-line-number="2">pruneGrid <span class="fu">=</span> fixM pruneGrid'</a>
<a class="sourceLine" id="cb24-3" data-line-number="3">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb24-4" data-line-number="4">    fixM f x <span class="fu">=</span> f x <span class="fu">&gt;&gt;=</span> \x' <span class="ot">-&gt;</span> <span class="kw">if</span> x' <span class="fu">==</span> x <span class="kw">then</span> return x <span class="kw">else</span> fixM f x'</a></code></pre></div>
<p>The crux of this code is the <code>fixM</code> function. It takes a monadic function <code>f</code> and an initial value, and recursively calls itself till the return value settles. Let’s do another round in the <em>REPL</em>:</p>
<p><small></p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb25-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb25-2" data-line-number="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid' <span class="fu">=</span> pruneGrid grid</a>
<a class="sourceLine" id="cb25-3" data-line-number="3"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGridWithPossibilities grid'</a>
<a class="sourceLine" id="cb25-4" data-line-number="4"><span class="dv">6</span>           [  <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">234</span>   <span class="dv">8</span> ] [ <span class="dv">2345</span> <span class="dv">789</span>] [    <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span>  <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb25-5" data-line-number="5"><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">123</span> <span class="dv">5</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb25-6" data-line-number="6">[<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">3</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">1</span> <span class="dv">345</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [  <span class="dv">3456789</span>] [  <span class="dv">3456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb25-7" data-line-number="7">[ <span class="dv">2</span>      <span class="dv">9</span>] [  <span class="dv">3</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>   ] <span class="dv">5</span>           [<span class="dv">123</span>    <span class="dv">8</span> ] <span class="dv">4</span>           [ <span class="dv">2</span>   <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb25-8" data-line-number="8">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [   <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">2</span>   <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6</span>   ] [<span class="dv">12</span> <span class="dv">4</span>  <span class="dv">7</span>  ] <span class="dv">3</span>           [ <span class="dv">2</span>  <span class="dv">56</span>  <span class="dv">9</span>] [<span class="dv">12</span>  <span class="dv">56</span>  <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb25-9" data-line-number="9">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span>  ] [  <span class="dv">34</span> <span class="dv">67</span>  ] <span class="dv">1</span>           [ <span class="dv">23</span>  <span class="dv">67</span>  ] <span class="dv">9</span>           [ <span class="dv">234</span>  <span class="dv">78</span> ] [    <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ]</a>
<a class="sourceLine" id="cb25-10" data-line-number="10"><span class="dv">3</span>           [<span class="dv">1</span>    <span class="dv">6</span> <span class="dv">89</span>] [     <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">4</span>           <span class="dv">7</span>           [    <span class="dv">5</span>   <span class="dv">9</span>] <span class="dv">2</span>           [    <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">1</span>   <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb25-11" data-line-number="11">[ <span class="dv">2</span>    <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">2</span> <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">1</span>           [ <span class="dv">23</span>      ] [ <span class="dv">23</span>     <span class="dv">9</span>] [     <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb25-12" data-line-number="12">[<span class="dv">12</span>    <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span>  <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">2</span> <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">23</span>      ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">345</span>   <span class="dv">9</span>]</a></code></pre></div>
<p></small></p>
<p>We see that <code>7</code> in the row-7-column-5 cell is eliminated from all its neighboring cells. We can’t prune the grid anymore. Now it is time to make the choice.</p>
<h2 id="making-the-choice" data-track-content data-content-name="making-the-choice" data-content-piece="fast-sudoku-solver-in-haskell-1">Making the Choice<a href="#making-the-choice" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>One the grid is settled, we need to choose a non-fixed cell and make it fixed by assuming one of its possible values. This gives us two grids, next in the state-space of the solution search:</p>
<ul>
<li>one which has this chosen cell fixed to this chosen digit, and,</li>
<li>the other in which the chosen cell has all the other possibilities except the one we chose to fix.</li>
</ul>
<p>We call this function, <code>nextGrids</code>:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb26-1" data-line-number="1"><span class="ot">nextGrids ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> (<span class="dt">Grid</span>, <span class="dt">Grid</span>)</a>
<a class="sourceLine" id="cb26-2" data-line-number="2">nextGrids grid <span class="fu">=</span></a>
<a class="sourceLine" id="cb26-3" data-line-number="3">  <span class="kw">let</span> (i, first<span class="fu">@</span>(<span class="dt">Fixed</span> _), rest) <span class="fu">=</span></a>
<a class="sourceLine" id="cb26-4" data-line-number="4">        fixCell</a>
<a class="sourceLine" id="cb26-5" data-line-number="5">        <span class="fu">.</span> Data.List.minimumBy (compare <span class="ot">`Data.Function.on`</span> (possibilityCount <span class="fu">.</span> snd))</a>
<a class="sourceLine" id="cb26-6" data-line-number="6">        <span class="fu">.</span> filter (isPossible <span class="fu">.</span> snd)</a>
<a class="sourceLine" id="cb26-7" data-line-number="7">        <span class="fu">.</span> zip [<span class="dv">0</span><span class="fu">..</span>]</a>
<a class="sourceLine" id="cb26-8" data-line-number="8">        <span class="fu">.</span> concat</a>
<a class="sourceLine" id="cb26-9" data-line-number="9">        <span class="fu">$</span> grid</a>
<a class="sourceLine" id="cb26-10" data-line-number="10">  <span class="kw">in</span> (replace2D i first grid, replace2D i rest grid)</a>
<a class="sourceLine" id="cb26-11" data-line-number="11">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb26-12" data-line-number="12">    isPossible (<span class="dt">Possible</span> _) <span class="fu">=</span> <span class="dt">True</span></a>
<a class="sourceLine" id="cb26-13" data-line-number="13">    isPossible _            <span class="fu">=</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb26-14" data-line-number="14"></a>
<a class="sourceLine" id="cb26-15" data-line-number="15">    possibilityCount (<span class="dt">Possible</span> xs) <span class="fu">=</span> length xs</a>
<a class="sourceLine" id="cb26-16" data-line-number="16">    possibilityCount (<span class="dt">Fixed</span> _)     <span class="fu">=</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb26-17" data-line-number="17"></a>
<a class="sourceLine" id="cb26-18" data-line-number="18">    fixCell (i, <span class="dt">Possible</span> [x, y]) <span class="fu">=</span> (i, <span class="dt">Fixed</span> x, <span class="dt">Fixed</span> y)</a>
<a class="sourceLine" id="cb26-19" data-line-number="19">    fixCell (i, <span class="dt">Possible</span> (x<span class="fu">:</span>xs)) <span class="fu">=</span> (i, <span class="dt">Fixed</span> x, <span class="dt">Possible</span> xs)</a>
<a class="sourceLine" id="cb26-20" data-line-number="20">    fixCell _                    <span class="fu">=</span> error <span class="st">&quot;Impossible case&quot;</span></a>
<a class="sourceLine" id="cb26-21" data-line-number="21"></a>
<a class="sourceLine" id="cb26-22" data-line-number="22"><span class="ot">    replace2D ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> [[a]] <span class="ot">-&gt;</span> [[a]]</a>
<a class="sourceLine" id="cb26-23" data-line-number="23">    replace2D i v <span class="fu">=</span></a>
<a class="sourceLine" id="cb26-24" data-line-number="24">      <span class="kw">let</span> (x, y) <span class="fu">=</span> (i <span class="ot">`quot`</span> <span class="dv">9</span>, i <span class="ot">`mod`</span> <span class="dv">9</span>) <span class="kw">in</span> replace x (replace y (const v))</a>
<a class="sourceLine" id="cb26-25" data-line-number="25">    replace p f xs <span class="fu">=</span> [<span class="kw">if</span> i <span class="fu">==</span> p <span class="kw">then</span> f x <span class="kw">else</span> x <span class="fu">|</span> (x, i) <span class="ot">&lt;-</span> zip xs [<span class="dv">0</span><span class="fu">..</span>]]</a></code></pre></div>
<p>We choose the non-fixed cell with least count of possibilities as the pivot. This strategy make sense intuitively, as with a cell with fewest possibilities, we have the most chance of being right when assuming one. Fixing a non-fixed cell leads to one of the two cases:</p>
<ol type="a">
<li>the cell has only two possible values, resulting in two fixed cells, or,</li>
<li>the cell has more than two possible values, resulting in one fixed and one non-fixed cell.</li>
</ol>
<p>Then all we are left with is replacing the non-fixed cell with its fixed and fixed/non-fixed choices, which we do with some math and some list traversal. A quick check on the <em>REPL</em>:</p>
<p><small></p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb27-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb27-2" data-line-number="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid' <span class="fu">=</span> pruneGrid grid</a>
<a class="sourceLine" id="cb27-3" data-line-number="3"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGridWithPossibilities grid'</a>
<a class="sourceLine" id="cb27-4" data-line-number="4"><span class="dv">6</span>           [  <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">234</span>   <span class="dv">8</span> ] [ <span class="dv">2345</span> <span class="dv">789</span>] [    <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span>  <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-5" data-line-number="5"><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">123</span> <span class="dv">5</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-6" data-line-number="6">[<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">3</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">1</span> <span class="dv">345</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [  <span class="dv">3456789</span>] [  <span class="dv">3456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-7" data-line-number="7">[ <span class="dv">2</span>      <span class="dv">9</span>] [  <span class="dv">3</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>   ] <span class="dv">5</span>           [<span class="dv">123</span>    <span class="dv">8</span> ] <span class="dv">4</span>           [ <span class="dv">2</span>   <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb27-8" data-line-number="8">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [   <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">2</span>   <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6</span>   ] [<span class="dv">12</span> <span class="dv">4</span>  <span class="dv">7</span>  ] <span class="dv">3</span>           [ <span class="dv">2</span>  <span class="dv">56</span>  <span class="dv">9</span>] [<span class="dv">12</span>  <span class="dv">56</span>  <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb27-9" data-line-number="9">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span>  ] [  <span class="dv">34</span> <span class="dv">67</span>  ] <span class="dv">1</span>           [ <span class="dv">23</span>  <span class="dv">67</span>  ] <span class="dv">9</span>           [ <span class="dv">234</span>  <span class="dv">78</span> ] [    <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ]</a>
<a class="sourceLine" id="cb27-10" data-line-number="10"><span class="dv">3</span>           [<span class="dv">1</span>    <span class="dv">6</span> <span class="dv">89</span>] [     <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">4</span>           <span class="dv">7</span>           [    <span class="dv">5</span>   <span class="dv">9</span>] <span class="dv">2</span>           [    <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">1</span>   <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-11" data-line-number="11">[ <span class="dv">2</span>    <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">2</span> <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">1</span>           [ <span class="dv">23</span>      ] [ <span class="dv">23</span>     <span class="dv">9</span>] [     <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-12" data-line-number="12">[<span class="dv">12</span>    <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span>  <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">2</span> <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">23</span>      ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">345</span>   <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb27-13" data-line-number="13"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="co">-- the row-4-column-1 cell is the first cell with only two possibilities, [2, 9].</span></a>
<a class="sourceLine" id="cb27-14" data-line-number="14"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="co">-- it is chosen as the pivot cell to find the next grids.</span></a>
<a class="sourceLine" id="cb27-15" data-line-number="15"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> (grid1, grid2) <span class="fu">=</span> nextGrids grid'</a>
<a class="sourceLine" id="cb27-16" data-line-number="16"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGridWithPossibilities grid1</a>
<a class="sourceLine" id="cb27-17" data-line-number="17"><span class="dv">6</span>           [  <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">234</span>   <span class="dv">8</span> ] [ <span class="dv">2345</span> <span class="dv">789</span>] [    <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span>  <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-18" data-line-number="18"><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">123</span> <span class="dv">5</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-19" data-line-number="19">[<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">3</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">1</span> <span class="dv">345</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [  <span class="dv">3456789</span>] [  <span class="dv">3456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-20" data-line-number="20"><span class="dv">2</span>           [  <span class="dv">3</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>   ] <span class="dv">5</span>           [<span class="dv">123</span>    <span class="dv">8</span> ] <span class="dv">4</span>           [ <span class="dv">2</span>   <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb27-21" data-line-number="21">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [   <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">2</span>   <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6</span>   ] [<span class="dv">12</span> <span class="dv">4</span>  <span class="dv">7</span>  ] <span class="dv">3</span>           [ <span class="dv">2</span>  <span class="dv">56</span>  <span class="dv">9</span>] [<span class="dv">12</span>  <span class="dv">56</span>  <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb27-22" data-line-number="22">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span>  ] [  <span class="dv">34</span> <span class="dv">67</span>  ] <span class="dv">1</span>           [ <span class="dv">23</span>  <span class="dv">67</span>  ] <span class="dv">9</span>           [ <span class="dv">234</span>  <span class="dv">78</span> ] [    <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ]</a>
<a class="sourceLine" id="cb27-23" data-line-number="23"><span class="dv">3</span>           [<span class="dv">1</span>    <span class="dv">6</span> <span class="dv">89</span>] [     <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">4</span>           <span class="dv">7</span>           [    <span class="dv">5</span>   <span class="dv">9</span>] <span class="dv">2</span>           [    <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">1</span>   <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-24" data-line-number="24">[ <span class="dv">2</span>    <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">2</span> <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">1</span>           [ <span class="dv">23</span>      ] [ <span class="dv">23</span>     <span class="dv">9</span>] [     <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-25" data-line-number="25">[<span class="dv">12</span>    <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span>  <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">2</span> <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">23</span>      ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">345</span>   <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb27-26" data-line-number="26"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGridWithPossibilities grid2</a>
<a class="sourceLine" id="cb27-27" data-line-number="27"><span class="dv">6</span>           [  <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">234</span>   <span class="dv">8</span> ] [ <span class="dv">2345</span> <span class="dv">789</span>] [    <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">1</span>           [ <span class="dv">2345</span>  <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-28" data-line-number="28"><span class="dv">4</span>           [<span class="dv">1</span> <span class="dv">3</span>   <span class="dv">789</span>] [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">23</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">123</span>  <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">123</span> <span class="dv">5</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56789</span>] [ <span class="dv">23</span> <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-29" data-line-number="29">[<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">789</span>] <span class="dv">2</span>           [  <span class="dv">3</span> <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">3</span> <span class="dv">567</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">34</span> <span class="dv">6</span> <span class="dv">8</span> ] [<span class="dv">1</span> <span class="dv">345</span> <span class="dv">789</span>] [    <span class="dv">56789</span>] [  <span class="dv">3456789</span>] [  <span class="dv">3456</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-30" data-line-number="30"><span class="dv">9</span>           [  <span class="dv">3</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>  <span class="dv">9</span>] [ <span class="dv">23</span>  <span class="dv">6</span>   ] <span class="dv">5</span>           [<span class="dv">123</span>    <span class="dv">8</span> ] <span class="dv">4</span>           [ <span class="dv">2</span>   <span class="dv">6</span> <span class="dv">89</span>] <span class="dv">7</span></a>
<a class="sourceLine" id="cb27-31" data-line-number="31">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [   <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">2</span>   <span class="dv">67</span>  ] [<span class="dv">12</span> <span class="dv">4</span> <span class="dv">6</span>   ] [<span class="dv">12</span> <span class="dv">4</span>  <span class="dv">7</span>  ] <span class="dv">3</span>           [ <span class="dv">2</span>  <span class="dv">56</span>  <span class="dv">9</span>] [<span class="dv">12</span>  <span class="dv">56</span>  <span class="dv">9</span>]</a>
<a class="sourceLine" id="cb27-32" data-line-number="32">[ <span class="dv">2</span>  <span class="dv">5</span> <span class="dv">7</span>  ] [  <span class="dv">34</span> <span class="dv">67</span>  ] <span class="dv">1</span>           [ <span class="dv">23</span>  <span class="dv">67</span>  ] <span class="dv">9</span>           [ <span class="dv">234</span>  <span class="dv">78</span> ] [    <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ] [ <span class="dv">2</span>  <span class="dv">56</span> <span class="dv">8</span> ]</a>
<a class="sourceLine" id="cb27-33" data-line-number="33"><span class="dv">3</span>           [<span class="dv">1</span>    <span class="dv">6</span> <span class="dv">89</span>] [     <span class="dv">6</span>  <span class="dv">9</span>] <span class="dv">4</span>           <span class="dv">7</span>           [    <span class="dv">5</span>   <span class="dv">9</span>] <span class="dv">2</span>           [    <span class="dv">56</span> <span class="dv">89</span>] [<span class="dv">1</span>   <span class="dv">56</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-34" data-line-number="34">[ <span class="dv">2</span>    <span class="dv">789</span>] <span class="dv">5</span>           [ <span class="dv">2</span> <span class="dv">4</span> <span class="dv">67</span> <span class="dv">9</span>] <span class="dv">1</span>           [ <span class="dv">23</span>      ] [ <span class="dv">23</span>     <span class="dv">9</span>] [     <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6789</span>] [  <span class="dv">34</span> <span class="dv">6</span> <span class="dv">89</span>]</a>
<a class="sourceLine" id="cb27-35" data-line-number="35">[<span class="dv">12</span>    <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span>  <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] [ <span class="dv">2</span> <span class="dv">4</span>  <span class="dv">7</span> <span class="dv">9</span>] <span class="dv">8</span>           [ <span class="dv">23</span>      ] <span class="dv">6</span>           [<span class="dv">1</span>   <span class="dv">5</span> <span class="dv">7</span> <span class="dv">9</span>] [  <span class="dv">345</span> <span class="dv">7</span> <span class="dv">9</span>] [<span class="dv">1</span> <span class="dv">345</span>   <span class="dv">9</span>]</a></code></pre></div>
<p></small></p>
<h2 id="solving-the-puzzle" data-track-content data-content-name="solving-the-puzzle" data-content-piece="fast-sudoku-solver-in-haskell-1">Solving the Puzzle<a href="#solving-the-puzzle" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>We have implemented parts of our algorithm till now. Now we’ll put everything together to solve the puzzle. First, we need to know if we are done or have messed up:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb28-1" data-line-number="1"><span class="ot">isGridFilled ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb28-2" data-line-number="2">isGridFilled grid <span class="fu">=</span> null [ () <span class="fu">|</span> <span class="dt">Possible</span> _ <span class="ot">&lt;-</span> concat grid ]</a>
<a class="sourceLine" id="cb28-3" data-line-number="3"></a>
<a class="sourceLine" id="cb28-4" data-line-number="4"><span class="ot">isGridInvalid ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb28-5" data-line-number="5">isGridInvalid grid <span class="fu">=</span></a>
<a class="sourceLine" id="cb28-6" data-line-number="6">  any isInvalidRow grid</a>
<a class="sourceLine" id="cb28-7" data-line-number="7">  <span class="fu">||</span> any isInvalidRow (Data.List.transpose grid)</a>
<a class="sourceLine" id="cb28-8" data-line-number="8">  <span class="fu">||</span> any isInvalidRow (subGridsToRows grid)</a>
<a class="sourceLine" id="cb28-9" data-line-number="9">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb28-10" data-line-number="10">    isInvalidRow row <span class="fu">=</span></a>
<a class="sourceLine" id="cb28-11" data-line-number="11">      <span class="kw">let</span> fixeds         <span class="fu">=</span> [x <span class="fu">|</span> <span class="dt">Fixed</span> x <span class="ot">&lt;-</span> row]</a>
<a class="sourceLine" id="cb28-12" data-line-number="12">          emptyPossibles <span class="fu">=</span> [x <span class="fu">|</span> <span class="dt">Possible</span> x <span class="ot">&lt;-</span> row, null x]</a>
<a class="sourceLine" id="cb28-13" data-line-number="13">      <span class="kw">in</span> hasDups fixeds <span class="fu">||</span> not (null emptyPossibles)</a>
<a class="sourceLine" id="cb28-14" data-line-number="14"></a>
<a class="sourceLine" id="cb28-15" data-line-number="15">    hasDups l <span class="fu">=</span> hasDups' l []</a>
<a class="sourceLine" id="cb28-16" data-line-number="16"></a>
<a class="sourceLine" id="cb28-17" data-line-number="17">    hasDups' [] _ <span class="fu">=</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb28-18" data-line-number="18">    hasDups' (y<span class="fu">:</span>ys) xs</a>
<a class="sourceLine" id="cb28-19" data-line-number="19">      <span class="fu">|</span> y <span class="ot">`elem`</span> xs <span class="fu">=</span> <span class="dt">True</span></a>
<a class="sourceLine" id="cb28-20" data-line-number="20">      <span class="fu">|</span> otherwise   <span class="fu">=</span> hasDups' ys (y<span class="fu">:</span>xs)</a></code></pre></div>
<p><code>isGridFilled</code> returns whether a grid is filled completely by checking it for any <code>Possible</code> cells. <code>isGridInvalid</code> checks if a grid is invalid because it either has duplicate fixed cells in any block or has any non-fixed cell with no possibilities.</p>
<p>Writing the <code>solve</code> function is almost trivial now:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb29-1" data-line-number="1"><span class="ot">solve ::</span> <span class="dt">Grid</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Grid</span></a>
<a class="sourceLine" id="cb29-2" data-line-number="2">solve grid <span class="fu">=</span> pruneGrid grid <span class="fu">&gt;&gt;=</span> solve'</a>
<a class="sourceLine" id="cb29-3" data-line-number="3">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb29-4" data-line-number="4">    solve' g</a>
<a class="sourceLine" id="cb29-5" data-line-number="5">      <span class="fu">|</span> isGridInvalid g <span class="fu">=</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb29-6" data-line-number="6">      <span class="fu">|</span> isGridFilled g  <span class="fu">=</span> <span class="dt">Just</span> g</a>
<a class="sourceLine" id="cb29-7" data-line-number="7">      <span class="fu">|</span> otherwise       <span class="fu">=</span></a>
<a class="sourceLine" id="cb29-8" data-line-number="8">          <span class="kw">let</span> (grid1, grid2) <span class="fu">=</span> nextGrids g</a>
<a class="sourceLine" id="cb29-9" data-line-number="9">          <span class="kw">in</span> solve grid1 <span class="fu">&lt;|&gt;</span> solve grid2</a></code></pre></div>
<p>We prune the grid as before and pipe it to the helper function <code>solve'</code>. <code>solve'</code> bails with a <code>Nothing</code> if the grid is invalid, or returns the solved grid if it is filled completely. Otherwise, it finds the next two grids in the search tree and solves them recursively with backtracking by calling the <code>solve</code> function. Backtracking here is implemented by the using the <a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/Control-Applicative.html#g:2" target="_blank" rel="noopener"><code>Alternative</code></a> (<code>&lt;|&gt;</code>) implementation of the <code>Maybe</code> type<a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a>. It takes the second branch in the computation if the first branch returns a <code>Nothing</code>.</p>
<p>Whew! That took us long. Let’s put it to the final test now:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb30-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid <span class="fu">=</span> readGrid <span class="st">&quot;6......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...&quot;</span></a>
<a class="sourceLine" id="cb30-2" data-line-number="2"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGrid grid</a>
<a class="sourceLine" id="cb30-3" data-line-number="3"><span class="dv">6</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb30-4" data-line-number="4"><span class="dv">4</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb30-5" data-line-number="5"><span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb30-6" data-line-number="6"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">4</span> <span class="fu">.</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb30-7" data-line-number="7"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb30-8" data-line-number="8"><span class="fu">.</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="dv">9</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb30-9" data-line-number="9"><span class="dv">3</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">4</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">2</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb30-10" data-line-number="10"><span class="fu">.</span> <span class="dv">5</span> <span class="fu">.</span> <span class="dv">1</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb30-11" data-line-number="11"><span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span> <span class="dv">8</span> <span class="fu">.</span> <span class="dv">6</span> <span class="fu">.</span> <span class="fu">.</span> <span class="fu">.</span></a>
<a class="sourceLine" id="cb30-12" data-line-number="12"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">Just</span> grid' <span class="fu">=</span> solve grid</a>
<a class="sourceLine" id="cb30-13" data-line-number="13"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> putStr <span class="fu">$</span> showGrid grid'</a>
<a class="sourceLine" id="cb30-14" data-line-number="14"><span class="dv">6</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">7</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb30-15" data-line-number="15"><span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">3</span> <span class="dv">6</span></a>
<a class="sourceLine" id="cb30-16" data-line-number="16"><span class="dv">1</span> <span class="dv">2</span> <span class="dv">5</span> <span class="dv">9</span> <span class="dv">6</span> <span class="dv">3</span> <span class="dv">8</span> <span class="dv">7</span> <span class="dv">4</span></a>
<a class="sourceLine" id="cb30-17" data-line-number="17"><span class="dv">9</span> <span class="dv">3</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">5</span> <span class="dv">1</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">7</span></a>
<a class="sourceLine" id="cb30-18" data-line-number="18"><span class="dv">5</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">2</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb30-19" data-line-number="19"><span class="dv">7</span> <span class="dv">4</span> <span class="dv">1</span> <span class="dv">3</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">6</span> <span class="dv">2</span> <span class="dv">5</span></a>
<a class="sourceLine" id="cb30-20" data-line-number="20"><span class="dv">3</span> <span class="dv">1</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">7</span> <span class="dv">5</span> <span class="dv">2</span> <span class="dv">6</span> <span class="dv">8</span></a>
<a class="sourceLine" id="cb30-21" data-line-number="21"><span class="dv">8</span> <span class="dv">5</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">2</span> <span class="dv">9</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">3</span></a>
<a class="sourceLine" id="cb30-22" data-line-number="22"><span class="dv">2</span> <span class="dv">7</span> <span class="dv">4</span> <span class="dv">8</span> <span class="dv">3</span> <span class="dv">6</span> <span class="dv">1</span> <span class="dv">5</span> <span class="dv">9</span></a></code></pre></div>
<p>It works! Let’s put a quick <code>main</code> wrapper around <code>solve</code> to call it from the command line:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb31-1" data-line-number="1"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb31-2" data-line-number="2">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb31-3" data-line-number="3">  inputs <span class="ot">&lt;-</span> lines <span class="fu">&lt;$&gt;</span> getContents</a>
<a class="sourceLine" id="cb31-4" data-line-number="4">  Control.Monad.forM_ inputs <span class="fu">$</span> \input <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb31-5" data-line-number="5">    <span class="kw">case</span> readGrid input <span class="kw">of</span></a>
<a class="sourceLine" id="cb31-6" data-line-number="6">      <span class="dt">Nothing</span>   <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;Invalid input&quot;</span></a>
<a class="sourceLine" id="cb31-7" data-line-number="7">      <span class="dt">Just</span> grid <span class="ot">-&gt;</span> <span class="kw">case</span> solve grid <span class="kw">of</span></a>
<a class="sourceLine" id="cb31-8" data-line-number="8">        <span class="dt">Nothing</span>    <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;No solution found&quot;</span></a>
<a class="sourceLine" id="cb31-9" data-line-number="9">        <span class="dt">Just</span> grid' <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> showGrid grid'</a></code></pre></div>
<p>And now, we can invoke it from the command line:</p>
<pre class="plain"><code>$ echo &quot;.......12.5.4............3.7..6..4....1..........8....92....8.....51.7.......3...&quot; | stack exec sudoku
3 6 4 9 7 8 5 1 2
1 5 2 4 3 6 9 7 8
8 7 9 1 2 5 6 3 4
7 3 8 6 5 1 4 2 9
6 9 1 2 4 7 3 8 5
2 4 5 3 8 9 1 6 7
9 2 3 7 6 4 8 5 1
4 8 6 5 1 2 7 9 3
5 1 7 8 9 3 2 4 6</code></pre>
<p>And, we are done.</p>
<p>If you want to play with different puzzles, the file <a href="https://abhinavsarkar.net/files/sudoku17.txt.bz2">here</a> lists some of the toughest ones. Let’s run<a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a> some of them through our program to see how fast it is:</p>
<pre class="plain"><code>$ head -n100 sudoku17.txt | time stack exec sudoku
... output omitted ...
      116.70 real       198.09 user        94.46 sys</code></pre>
<p>It took about 117 seconds to solve a hundred puzzles, so, about 1.2 seconds per puzzle. This is pretty slow but we’ll get around to making it faster in the subsequent posts.</p>
<h2 id="conclusion" data-track-content data-content-name="conclusion" data-content-piece="fast-sudoku-solver-in-haskell-1">Conclusion<a href="#conclusion" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>
<p>In this rather verbose article, we learned how to write a simple Sudoku solver in Haskell step-by-step. In the later parts of this series, we’ll delve into profiling the solution and figuring out better algorithms and data structures to solve Sudoku more efficiently. The code till now is available <a href="https://code.abhinavsarkar.net/abhin4v/hasdoku/src/commit/0ef77341a10fcc25926301ee47b931d92959c0fa" target="_blank" rel="noopener">here</a>. Discuss this post on <a href="https://www.reddit.com/r/haskell/comments/8uapij/fast_sudoku_solver_in_haskell/" target="_blank" rel="noopener">r/haskell</a> or comment below.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>This exercise was originally done as a part of <a href="https://github.com/pratul/haskell-classes/" target="_blank" rel="noopener">the</a> <a href="https://github.com/ford-prefect/haskell-classes/" target="_blank" rel="noopener">Haskell</a> <a href="https://github.com/bnvinay92/haskell-classes/" target="_blank" rel="noopener">classes</a> I taught at <a href="https://nilenso.com" target="_blank" rel="noopener">nilenso</a>.<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p><a href="https://hackage.haskell.org/package/base-4.11.1.0/docs/src/GHC.Base.html#line-873" target="_blank" rel="noopener">Source</a><a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p>All the runs were done on my MacBook Pro from 2014 with 2.2 GHz Intel Core i7 CPU and 16 GB memory.<a href="#fnref3" class="footnote-back">↩</a></p></li>
</ol>
</section><p>If you liked this post, please <a href="https://abhinavsarkar.net/posts/fast-sudoku-solver-in-haskell-1/#comment-container">leave a comment</a>.</p>]]></summary>
</entry>

</feed>
